// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/array.dart';
import 'api/async_misc.dart';
import 'api/async_spawn.dart';
import 'api/attribute.dart';
import 'api/benchmark_misc.dart';
import 'api/chrono_type.dart';
import 'api/comment.dart';
import 'api/constructor.dart';
import 'api/customization.dart';
import 'api/dart_code.dart';
import 'api/dart_fn.dart';
import 'api/dart_opaque.dart';
import 'api/dart_opaque_sync.dart';
import 'api/deliberate_name_conflict.dart';
import 'api/dropping.dart';
import 'api/enumeration.dart';
import 'api/event_listener.dart';
import 'api/exception.dart';
import 'api/external_impl.dart';
import 'api/external_type_in_crate.dart';
import 'api/inside_macro.dart';
import 'api/map_and_set.dart';
import 'api/method.dart';
import 'api/mirror.dart';
import 'api/misc_example.dart';
import 'api/misc_no_twin_example_a.dart';
import 'api/misc_no_twin_example_b.dart';
import 'api/misc_type.dart';
import 'api/newtype_pattern.dart';
import 'api/optional.dart';
import 'api/optional_primitive_misc.dart';
import 'api/ownership.dart';
import 'api/primitive_list_misc.dart';
import 'api/primitive_misc.dart';
import 'api/pseudo_manual/array_twin_rust_async.dart';
import 'api/pseudo_manual/array_twin_sync.dart';
import 'api/pseudo_manual/attribute_twin_rust_async.dart';
import 'api/pseudo_manual/attribute_twin_sync.dart';
import 'api/pseudo_manual/basic.dart';
import 'api/pseudo_manual/basic_list.dart';
import 'api/pseudo_manual/basic_list_twin_rust_async.dart';
import 'api/pseudo_manual/basic_list_twin_sync.dart';
import 'api/pseudo_manual/basic_map.dart';
import 'api/pseudo_manual/basic_map_twin_rust_async.dart';
import 'api/pseudo_manual/basic_map_twin_sync.dart';
import 'api/pseudo_manual/basic_optional.dart';
import 'api/pseudo_manual/basic_optional_twin_rust_async.dart';
import 'api/pseudo_manual/basic_optional_twin_sync.dart';
import 'api/pseudo_manual/basic_twin_rust_async.dart';
import 'api/pseudo_manual/basic_twin_sync.dart';
import 'api/pseudo_manual/benchmark_api.dart';
import 'api/pseudo_manual/benchmark_api_twin_rust_async.dart';
import 'api/pseudo_manual/benchmark_api_twin_sync.dart';
import 'api/pseudo_manual/chrono_type_twin_rust_async.dart';
import 'api/pseudo_manual/chrono_type_twin_sync.dart';
import 'api/pseudo_manual/comment_twin_rust_async.dart';
import 'api/pseudo_manual/comment_twin_sync.dart';
import 'api/pseudo_manual/dart_fn_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_sync.dart';
import 'api/pseudo_manual/dropping_twin_rust_async.dart';
import 'api/pseudo_manual/dropping_twin_sync.dart';
import 'api/pseudo_manual/enumeration_twin_rust_async.dart';
import 'api/pseudo_manual/enumeration_twin_sync.dart';
import 'api/pseudo_manual/event_listener_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_sync.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_rust_async.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sync.dart';
import 'api/pseudo_manual/map_and_set_twin_rust_async.dart';
import 'api/pseudo_manual/map_and_set_twin_sync.dart';
import 'api/pseudo_manual/method_twin_rust_async.dart';
import 'api/pseudo_manual/method_twin_sync.dart';
import 'api/pseudo_manual/mirror_twin_rust_async.dart';
import 'api/pseudo_manual/mirror_twin_sync.dart';
import 'api/pseudo_manual/misc_example_twin_rust_async.dart';
import 'api/pseudo_manual/misc_example_twin_sync.dart';
import 'api/pseudo_manual/misc_type_twin_rust_async.dart';
import 'api/pseudo_manual/misc_type_twin_sync.dart';
import 'api/pseudo_manual/newtype_pattern_twin_rust_async.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sync.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/optional_twin_rust_async.dart';
import 'api/pseudo_manual/optional_twin_sync.dart';
import 'api/pseudo_manual/ownership_twin_rust_async.dart';
import 'api/pseudo_manual/ownership_twin_sync.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sync.dart';
import 'api/pseudo_manual/primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/raw_string_twin_rust_async.dart';
import 'api/pseudo_manual/raw_string_twin_sync.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync.dart';
import 'api/pseudo_manual/simple_twin_rust_async.dart';
import 'api/pseudo_manual/simple_twin_sync.dart';
import 'api/pseudo_manual/stream_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_sync.dart';
import 'api/pseudo_manual/tuple_twin_rust_async.dart';
import 'api/pseudo_manual/tuple_twin_sync.dart';
import 'api/pseudo_manual/type_alias_twin_rust_async.dart';
import 'api/pseudo_manual/type_alias_twin_sync.dart';
import 'api/pseudo_manual/uuid_type_twin_rust_async.dart';
import 'api/pseudo_manual/uuid_type_twin_sync.dart';
import 'api/raw_string.dart';
import 'api/rust_auto_opaque.dart';
import 'api/rust_opaque.dart';
import 'api/rust_opaque_sync.dart';
import 'api/simple.dart';
import 'api/stream.dart';
import 'api/stream_misc.dart';
import 'api/structure.dart';
import 'api/tuple.dart';
import 'api/type_alias.dart';
import 'api/uuid_type.dart';
import 'auxiliary/new_module_system/sub_module.dart';
import 'auxiliary/old_module_system/sub_module.dart';
import 'auxiliary/sample_types.dart';
import 'dart:async';
import 'dart:convert';
import 'deliberate_name_conflict.dart';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiCustomizationInitApp();
    await api.crateApiCustomizationMyInitOne();
    await api.crateApiCustomizationMyInitTwo();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.33';

  @override
  int get rustContentHash => 1373257184;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'frb_example_pure_dart_pde',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BlobTwinNormal> crateApiArrayBoxedBlobTwinNormal(
      {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinNormal> crateApiArrayFuncTestIdTwinNormal(
      {required TestIdTwinNormal id, dynamic hint});

  Future<U8Array5> crateApiArrayGetArrayTwinNormal({dynamic hint});

  Future<PointTwinNormalArray2> crateApiArrayGetComplexArrayTwinNormal(
      {dynamic hint});

  Future<double> crateApiArrayLastNumberTwinNormal(
      {required F64Array16 array, dynamic hint});

  Future<TestIdTwinNormalArray2> crateApiArrayNestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id, dynamic hint});

  Future<MessageIdTwinNormal> crateApiArrayNewMsgidTwinNormal(
      {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinNormal> crateApiArrayReturnBoxedFeedIdTwinNormal(
      {required U8Array8 id, dynamic hint});

  Future<U8Array8> crateApiArrayReturnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id, dynamic hint});

  Future<U8Array1600> crateApiArrayUseBoxedBlobTwinNormal(
      {required BlobTwinNormal blob, dynamic hint});

  Future<U8Array32> crateApiArrayUseMsgidTwinNormal(
      {required MessageIdTwinNormal id, dynamic hint});

  Future<int> crateApiAsyncMiscFuncAsyncSimpleAddTwinNormal(
      {required int a, required int b, dynamic hint});

  Future<void> crateApiAsyncMiscFuncAsyncVoidTwinNormal({dynamic hint});

  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawn(
      {required String arg, dynamic hint});

  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawnBlocking(
      {required String arg, dynamic hint});

  Stream<String> crateApiAsyncSpawnSimpleUseAsyncSpawnLocal(
      {required String arg, dynamic hint});

  Future<void> crateApiAttributeHandleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val, dynamic hint});

  Future<UserIdTwinNormal> crateApiAttributeNextUserIdTwinNormal(
      {UserIdTwinNormal userId = const UserIdTwinNormal(), dynamic hint});

  void crateApiBenchmarkMiscBenchmarkVoidSemiSerialize({dynamic hint});

  Future<DateTime> crateApiChronoTypeDatetimeLocalTwinNormal(
      {required DateTime d, dynamic hint});

  Future<DateTime> crateApiChronoTypeDatetimeUtcTwinNormal(
      {required DateTime d, dynamic hint});

  Future<Duration> crateApiChronoTypeDurationTwinNormal(
      {required Duration d, dynamic hint});

  Future<List<DateTime>> crateApiChronoTypeHandleDurationsTwinNormal(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint});

  Future<List<Duration>> crateApiChronoTypeHandleTimestampsTwinNormal(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint});

  Future<Duration> crateApiChronoTypeHowLongDoesItTakeTwinNormal(
      {required FeatureChronoTwinNormal mine, dynamic hint});

  Future<DateTime> crateApiChronoTypeNaivedatetimeTwinNormal(
      {required DateTime d, dynamic hint});

  Future<DateTime?> crateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormal(
      {DateTime? d, dynamic hint});

  Future<TestChronoTwinNormal> crateApiChronoTypeTestChronoTwinNormal(
      {dynamic hint});

  Future<TestChronoTwinNormal> crateApiChronoTypeTestPreciseChronoTwinNormal(
      {dynamic hint});

  Future<void> crateApiCommentFunctionWithCommentsSlashStarStarTwinNormal(
      {dynamic hint});

  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormal(
          {dynamic hint});

  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormal(
          {dynamic hint});

  Future<void>
      crateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormal(
          {required StructWithCommentsTwinNormal that, dynamic hint});

  Future<void>
      crateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormal(
          {dynamic hint});

  void crateApiConstructorConstructorOpaqueStructTwinNormalCheck(
      {required ConstructorOpaqueStructTwinNormal that, dynamic hint});

  Future<ConstructorOpaqueStructTwinNormal>
      crateApiConstructorConstructorOpaqueStructTwinNormalNew({dynamic hint});

  void crateApiConstructorConstructorOpaqueSyncStructTwinNormalCheck(
      {required ConstructorOpaqueSyncStructTwinNormal that, dynamic hint});

  ConstructorOpaqueSyncStructTwinNormal
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalNew(
          {dynamic hint});

  Future<ConstructorTranslatableStructTwinNormal>
      crateApiConstructorConstructorTranslatableStructTwinNormalNew(
          {dynamic hint});

  ConstructorTranslatableSyncStructTwinNormal
      crateApiConstructorConstructorTranslatableSyncStructTwinNormalNew(
          {dynamic hint});

  Future<bool> crateApiCustomizationCheckInitDone({dynamic hint});

  Future<void> crateApiCustomizationInitApp({dynamic hint});

  Future<void> crateApiCustomizationMyInitOne({dynamic hint});

  Future<void> crateApiCustomizationMyInitTwo({dynamic hint});

  Future<int>
      crateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required OpaqueStructWithDartCodeTwinNormal that, dynamic hint});

  Future<int>
      crateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required TranslatableStructWithDartCodeTwinNormal that,
          dynamic hint});

  Future<void> crateApiDartFnRustCallDartLoopbackTwinNormal(
      {required FutureOr<DemoStructForRustCallDartTwinNormal> Function(
              DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint});

  Future<void> crateApiDartFnRustCallDartMultiTimesTwinNormal(
      {required FutureOr<void> Function() callback,
      required int numTimes,
      dynamic hint});

  Future<void> crateApiDartFnRustCallDartOneArgTwinNormal(
      {required FutureOr<void> Function(String) callback, dynamic hint});

  Future<void> crateApiDartFnRustCallDartReturnTwinNormal(
      {required FutureOr<String> Function() callback, dynamic hint});

  Future<void> crateApiDartFnRustCallDartSimpleTwinNormal(
      {required FutureOr<void> Function() callback, dynamic hint});

  Future<void> crateApiDartFnRustCallDartTwoArgsTwinNormal(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint});

  Future<void> crateApiDartFnRustCallDartWithDartOpaqueArgTwinNormal(
      {required Object input,
      required FutureOr<void> Function(Object) callback,
      dynamic hint});

  Future<Object> crateApiDartFnRustCallDartWithDartOpaqueResultTwinNormal(
      {required FutureOr<Object> Function() callback, dynamic hint});

  Future<String> crateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<List<Object>> crateApiDartOpaqueCloneDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinNormal>
      crateApiDartOpaqueCreateEnumDartOpaqueTwinNormal(
          {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinNormal>
      crateApiDartOpaqueCreateNestedDartOpaqueTwinNormal(
          {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void> crateApiDartOpaqueDropStaticDartOpaqueTwinNormal(
      {required int id, dynamic hint});

  Future<void> crateApiDartOpaqueGetEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque, dynamic hint});

  Future<void> crateApiDartOpaqueGetNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque, dynamic hint});

  Future<void> crateApiDartOpaqueLoopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1> crateApiDartOpaqueLoopBackArrayTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> crateApiDartOpaqueLoopBackOptionGetTwinNormal(
      {Object? opaque, dynamic hint});

  Future<Object?> crateApiDartOpaqueLoopBackOptionTwinNormal(
      {required Object opaque, dynamic hint});

  Future<Object> crateApiDartOpaqueLoopBackTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> crateApiDartOpaqueLoopBackVecGetTwinNormal(
      {required List<Object> opaque, dynamic hint});

  Future<List<Object>> crateApiDartOpaqueLoopBackVecTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> crateApiDartOpaquePanicUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> crateApiDartOpaqueSetStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque, dynamic hint});

  String crateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Object crateApiDartOpaqueSyncSyncLoopbackTwinNormal(
      {required Object opaque, dynamic hint});

  Object? crateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Object? crateApiDartOpaqueSyncSyncOptionLoopbackTwinNormal(
      {Object? opaque, dynamic hint});

  String crateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<StructInUpperLevel>
      crateApiDeliberateNameConflictTestDuplicatedModuleNames(
          {required StructInLowerLevel s, dynamic hint});

  Stream<int> crateApiDroppingDroppableTwinNormalCreateStream(
      {required DroppableTwinNormal that, dynamic hint});

  Future<int> crateApiDroppingDroppableTwinNormalGetDropCountTwinNormal(
      {dynamic hint});

  Future<DroppableTwinNormal> crateApiDroppingDroppableTwinNormalNewTwinNormal(
      {dynamic hint});

  Future<void> crateApiDroppingDroppableTwinNormalSimpleMethodTwinNormal(
      {required DroppableTwinNormal that, dynamic hint});

  Future<EnumSimpleTwinNormal> crateApiEnumerationFuncEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg, dynamic hint});

  Future<EnumWithDiscriminantTwinNormal>
      crateApiEnumerationFuncEnumWithDiscriminantTwinNormal(
          {required EnumWithDiscriminantTwinNormal arg, dynamic hint});

  Future<EnumWithItemMixedTwinNormal>
      crateApiEnumerationFuncEnumWithItemMixedTwinNormal(
          {required EnumWithItemMixedTwinNormal arg, dynamic hint});

  Future<EnumWithItemStructTwinNormal>
      crateApiEnumerationFuncEnumWithItemStructTwinNormal(
          {required EnumWithItemStructTwinNormal arg, dynamic hint});

  Future<EnumWithItemTupleTwinNormal>
      crateApiEnumerationFuncEnumWithItemTupleTwinNormal(
          {required EnumWithItemTupleTwinNormal arg, dynamic hint});

  Future<WeekdaysTwinNormal> crateApiEnumerationHandleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday, dynamic hint});

  Future<KitchenSinkTwinNormal> crateApiEnumerationHandleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val, dynamic hint});

  Future<WeekdaysTwinNormal?> crateApiEnumerationHandleReturnEnumTwinNormal(
      {required String input, dynamic hint});

  Future<MeasureTwinNormal?> crateApiEnumerationMultiplyByTenTwinNormal(
      {required MeasureTwinNormal measure, dynamic hint});

  Future<Uint8List> crateApiEnumerationPrintNoteTwinNormal(
      {required NoteTwinNormal note, dynamic hint});

  Future<void> crateApiEventListenerCloseEventListenerTwinNormal(
      {dynamic hint});

  void crateApiEventListenerCreateEventSyncTwinNormal(
      {required String address, required String payload, dynamic hint});

  Future<void> crateApiEventListenerCreateEventTwinNormal(
      {required String address, required String payload, dynamic hint});

  Future<String> crateApiEventListenerEventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that, dynamic hint});

  Future<Stream<EventTwinNormal>>
      crateApiEventListenerRegisterEventListenerTwinNormal({dynamic hint});

  Future<void> crateApiExceptionCustomEnumErrorPanicTwinNormal({dynamic hint});

  Future<int> crateApiExceptionCustomEnumErrorReturnErrorTwinNormal(
      {dynamic hint});

  Future<int> crateApiExceptionCustomEnumErrorReturnOkTwinNormal(
      {required int arg, dynamic hint});

  Future<void> crateApiExceptionCustomNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg, dynamic hint});

  Future<void> crateApiExceptionCustomStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg, dynamic hint});

  Future<CustomStructTwinNormal>
      crateApiExceptionCustomStructTwinNormalNewTwinNormal(
          {required String message, dynamic hint});

  Future<void>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
          {required CustomStructTwinNormal that, dynamic hint});

  Future<int>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
          {required CustomStructTwinNormal that, dynamic hint});

  Future<void>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormal(
          {dynamic hint});

  Future<int>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormal(
          {dynamic hint});

  Future<int> crateApiExceptionFuncReturnErrorTwinNormal({dynamic hint});

  Future<int> crateApiExceptionFuncTypeFalliblePanicTwinNormal({dynamic hint});

  Future<int> crateApiExceptionFuncTypeInfalliblePanicTwinNormal(
      {dynamic hint});

  Future<void> crateApiExceptionPanicWithCustomResultTwinNormal({dynamic hint});

  Future<void> crateApiExceptionReturnCustomNestedError1TwinNormal(
      {dynamic hint});

  Future<void> crateApiExceptionReturnCustomNestedError1Variant1TwinNormal(
      {dynamic hint});

  Future<void> crateApiExceptionReturnCustomNestedError2TwinNormal(
      {dynamic hint});

  Future<void> crateApiExceptionReturnCustomStructErrorTwinNormal(
      {dynamic hint});

  Future<int> crateApiExceptionReturnCustomStructOkTwinNormal({dynamic hint});

  Future<int> crateApiExceptionReturnErrCustomErrorTwinNormal({dynamic hint});

  Future<int> crateApiExceptionReturnErrorVariantTwinNormal(
      {required int variant, dynamic hint});

  Future<int> crateApiExceptionReturnOkCustomErrorTwinNormal({dynamic hint});

  Future<SomeStructTwinNormal>
      crateApiExceptionSomeStructTwinNormalNewTwinNormal(
          {required int value, dynamic hint});

  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
          {required SomeStructTwinNormal that, dynamic hint});

  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
          {required SomeStructTwinNormal that, dynamic hint});

  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormal(
          {dynamic hint});

  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormal(
          {dynamic hint});

  Future<Stream<String>> crateApiExceptionStreamSinkThrowAnyhowTwinNormal(
      {dynamic hint});

  Future<void> crateApiExceptionThrowAnyhowTwinNormal({dynamic hint});

  SimpleOpaqueExternalStructWithMethod
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodNew(
          {required String a, dynamic hint});

  Future<String>
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethod(
          {required SimpleOpaqueExternalStructWithMethod that, dynamic hint});

  Future<String>
      crateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethod(
          {required SimpleTranslatableExternalStructWithMethod that,
          dynamic hint});

  Future<NewSimpleStruct>
      crateApiExternalTypeInCrateCallNewModuleSystemTwinNormal({dynamic hint});

  Future<OldSimpleStruct>
      crateApiExternalTypeInCrateCallOldModuleSystemTwinNormal({dynamic hint});

  Future<bool> crateApiExternalTypeInCrateUseImportedEnumTwinNormal(
      {required MyEnum myEnum, dynamic hint});

  Future<bool> crateApiExternalTypeInCrateUseImportedStructTwinNormal(
      {required MyStruct myStruct, dynamic hint});

  Future<AnotherMacroStructTwinNormal>
      crateApiInsideMacroAnotherMacroStructTwinNormal({dynamic hint});

  Future<MacroStruct> crateApiInsideMacroFuncMacroStructTwinNormal(
      {required MacroStruct arg, dynamic hint});

  Future<Map<int, int>> crateApiMapAndSetFuncHashMapI32I32TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<String, Uint8List>>
      crateApiMapAndSetFuncHashMapStringBytesTwinNormal(
          {required Map<String, Uint8List> arg, dynamic hint});

  Future<Map<String, KitchenSinkTwinNormal>>
      crateApiMapAndSetFuncHashMapStringComplexEnumTwinNormal(
          {required Map<String, KitchenSinkTwinNormal> arg, dynamic hint});

  Future<Map<String, EnumSimpleTwinNormal>>
      crateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormal(
          {required Map<String, EnumSimpleTwinNormal> arg, dynamic hint});

  Future<Map<String, String>>
      crateApiMapAndSetFuncHashMapStringStringTwinNormal(
          {required Map<String, String> arg, dynamic hint});

  Future<Map<String, MySize>>
      crateApiMapAndSetFuncHashMapStringStructTwinNormal(
          {required Map<String, MySize> arg, dynamic hint});

  Future<Set<int>> crateApiMapAndSetFuncHashSetI32TwinNormal(
      {required Set<int> arg, dynamic hint});

  Future<Set<String>> crateApiMapAndSetFuncHashSetStringTwinNormal(
      {required Set<String> arg, dynamic hint});

  Future<int> crateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormal(
      {dynamic hint});

  Future<String>
      crateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormal(
          {required String a, required String b, dynamic hint});

  Future<String> crateApiMethodConcatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that,
      required String b,
      dynamic hint});

  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal(
          {dynamic hint});

  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint});

  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
          {required ConcatenateWithTwinNormal that, dynamic hint});

  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max,
          dynamic hint});

  Future<ConcatenateWithTwinNormal>
      crateApiMethodConcatenateWithTwinNormalNewTwinNormal(
          {required String a, dynamic hint});

  Future<String> crateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint});

  Future<SumWithTwinNormalArray3> crateApiMethodGetSumArrayTwinNormal(
      {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinNormal> crateApiMethodGetSumStructTwinNormal(
      {dynamic hint});

  Future<String> crateApiMethodMyCallableTwinNormalCall(
      {required MyCallableTwinNormal that, required String two, dynamic hint});

  Future<SimpleEnumTwinNormal>
      crateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormal(
          {required String one, dynamic hint});

  Future<String> crateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormal(
      {required SimpleEnumTwinNormal that, dynamic hint});

  Future<int> crateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormal(
      {required SimplePrimitiveEnumTwinNormal that, dynamic hint});

  Future<String> crateApiMethodSimpleStructTwinNormalArgSelfTwinNormal(
      {required SimpleStructTwinNormal a,
      required SimpleStructTwinNormal b,
      dynamic hint});

  Future<String> crateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormal(
      {required SimpleStructTwinNormal that, dynamic hint});

  Future<String> crateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormal(
      {required SimpleStructTwinNormal that, dynamic hint});

  Future<SimpleStructTwinNormal>
      crateApiMethodSimpleStructTwinNormalReturnSelfTwinNormal(
          {required String one, dynamic hint});

  Future<List<String>> crateApiMethodSimpleStructTwinNormalVecSelfTwinNormal(
      {required List<SimpleStructTwinNormal> arg, dynamic hint});

  Future<int> crateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormal(
      {required int a, dynamic hint});

  Future<int> crateApiMethodSumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that,
      required int y,
      required int z,
      dynamic hint});

  Stream<ApplicationSettings> crateApiMirrorAppSettingsStreamTwinNormal(
      {dynamic hint});

  Stream<List<ApplicationSettings>>
      crateApiMirrorAppSettingsVecStreamTwinNormal({dynamic hint});

  Future<int?> crateApiMirrorFirstNumberTwinNormal(
      {required Numbers nums, dynamic hint});

  Future<int?> crateApiMirrorFirstSequenceTwinNormal(
      {required Sequences seqs, dynamic hint});

  Future<ApplicationSettings> crateApiMirrorGetAppSettingsTwinNormal(
      {dynamic hint});

  Future<ApplicationSettings> crateApiMirrorGetFallibleAppSettingsTwinNormal(
      {dynamic hint});

  Future<ApplicationMessage> crateApiMirrorGetMessageTwinNormal({dynamic hint});

  Future<bool> crateApiMirrorIsAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<ApplicationModeArray2> crateApiMirrorMirrorArrayEnumStreamTwinNormal(
      {dynamic hint});

  Stream<ApplicationMode> crateApiMirrorMirrorEnumStreamTwinNormal(
      {dynamic hint});

  Stream<Map<int, ApplicationMode>> crateApiMirrorMirrorMapEnumStreamTwinNormal(
      {dynamic hint});

  Stream<ApplicationMode?> crateApiMirrorMirrorOptionEnumStreamTwinNormal(
      {dynamic hint});

  Stream<Set<ApplicationMode>> crateApiMirrorMirrorSetEnumStreamTwinNormal(
      {dynamic hint});

  Stream<MirrorStructTwinNormal> crateApiMirrorMirrorStructStreamTwinNormal(
      {dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiMirrorMirrorTupleStreamTwinNormal({dynamic hint});

  Stream<List<ApplicationMode>> crateApiMirrorMirrorVecEnumStreamTwinNormal(
      {dynamic hint});

  Future<Numbers> crateApiMirrorRepeatNumberTwinNormal(
      {required int num, required int times, dynamic hint});

  Future<Sequences> crateApiMirrorRepeatSequenceTwinNormal(
      {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinNormal>
      crateApiMirrorTestContainsMirroredSubStructTwinNormal({dynamic hint});

  Future<List<RawStringMirrored>>
      crateApiMirrorTestFallibleOfRawStringMirroredTwinNormal({dynamic hint});

  Future<StructWithHashMap>
      crateApiMirrorTestHashmapWithMirroredValueTwinNormal({dynamic hint});

  Future<List<RawStringEnumMirrored>>
      crateApiMirrorTestListOfNestedEnumsMirroredTwinNormal({dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      crateApiMirrorTestListOfRawNestedStringMirroredTwinNormal({dynamic hint});

  Future<NestedRawStringMirrored>
      crateApiMirrorTestNestedRawStringMirroredTwinNormal({dynamic hint});

  Future<RawStringEnumMirrored>
      crateApiMirrorTestRawStringEnumMirroredTwinNormal(
          {required bool nested, dynamic hint});

  Future<RawStringMirrored> crateApiMirrorTestRawStringMirroredTwinNormal(
      {dynamic hint});

  Future<BigBuffersTwinNormal> crateApiMiscExampleHandleBigBuffersTwinNormal(
      {dynamic hint});

  Future<MyTreeNodeTwinNormal> crateApiMiscExampleHandleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s, dynamic hint});

  Future<MyNestedStructTwinNormal>
      crateApiMiscExampleHandleNestedStructTwinNormal(
          {required MyNestedStructTwinNormal s, dynamic hint});

  Future<String> crateApiMiscExampleHandleStringTwinNormal(
      {required String s, dynamic hint});

  Future<MySize> crateApiMiscExampleHandleStructTwinNormal(
      {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List> crateApiMiscExampleHandleVecU8TwinNormal(
      {required List<int> v, dynamic hint});

  Future<List<WeekdaysTwinNormal>>
      crateApiMiscExampleListOfPrimitiveEnumsTwinNormal(
          {required List<WeekdaysTwinNormal> weekdays, dynamic hint});

  Future<AbcTwinNormal> crateApiMiscExampleTestAbcEnumTwinNormal(
      {required AbcTwinNormal abc, dynamic hint});

  Future<StructWithEnumTwinNormal>
      crateApiMiscExampleTestStructWithEnumTwinNormal(
          {required StructWithEnumTwinNormal se, dynamic hint});

  Future<void>
      crateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionA(
          {required StructInMiscNoTwinExampleA that, dynamic hint});

  Future<void>
      crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInA(
          {required StructWithImplBlockInMultiFile that, dynamic hint});

  Future<void> crateApiMiscNoTwinExampleASameFunctionNameInDifferentFiles(
      {dynamic hint});

  Future<StructInMiscNoTwinExampleA>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleA(
          {required StructInMiscNoTwinExampleB that, dynamic hint});

  Future<void>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionB(
          {required StructInMiscNoTwinExampleB that, dynamic hint});

  Future<void>
      crateApiMiscNoTwinExampleBStructWithImplBlockInMultiFileMethodInB(
          {required StructWithImplBlockInMultiFile that, dynamic hint});

  Future<void> crateApiMiscNoTwinExampleBSameFunctionNameInDifferentFiles(
      {dynamic hint});

  Future<EmptyTwinNormal> crateApiMiscTypeEmptyStructTwinNormal(
      {required EmptyTwinNormal empty, dynamic hint});

  Future<void> crateApiMiscTypeFuncReturnUnitTwinNormal({dynamic hint});

  Future<List<MySize>> crateApiMiscTypeHandleListOfStructTwinNormal(
      {required List<MySize> l, dynamic hint});

  Future<List<String>> crateApiMiscTypeHandleStringListTwinNormal(
      {required List<String> names, dynamic hint});

  Future<NewTypeIntTwinNormal> crateApiNewtypePatternHandleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg, dynamic hint});

  Future<double> crateApiOptionalHandleIncrementBoxedOptionalTwinNormal(
      {double? opt, dynamic hint});

  Future<String> crateApiOptionalHandleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox,
      dynamic hint});

  Future<ExoticOptionalsTwinNormal?>
      crateApiOptionalHandleOptionalIncrementTwinNormal(
          {ExoticOptionalsTwinNormal? opt, dynamic hint});

  Future<double?> crateApiOptionalHandleOptionalReturnTwinNormal(
      {required double left, required double right, dynamic hint});

  Future<ElementTwinNormal?> crateApiOptionalHandleOptionalStructTwinNormal(
      {String? document, dynamic hint});

  Future<OptVecsTwinNormal> crateApiOptionalHandleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt, dynamic hint});

  Future<int?> crateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormal(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<int> crateApiOwnershipBorrowI32TwinNormal(
      {required int arg, dynamic hint});

  Future<String> crateApiOwnershipBorrowStrTwinNormal(
      {required String arg, dynamic hint});

  Future<String> crateApiOwnershipBorrowStringTwinNormal(
      {required String arg, dynamic hint});

  Future<SimpleStructForBorrowTwinNormal>
      crateApiOwnershipBorrowStructTwinNormal(
          {required SimpleStructForBorrowTwinNormal arg, dynamic hint});

  Future<VecOfPrimitivePackTwinNormal>
      crateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormal(
          {required int n, dynamic hint});

  Future<int> crateApiPrimitiveMiscPrimitiveTypesTwinNormal(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  Future<int> crateApiPrimitiveMiscPrimitiveU32TwinNormal(
      {required int myU32, dynamic hint});

  Future<BlobTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsync(
          {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsync(
          {required TestIdTwinRustAsync id, dynamic hint});

  Future<U8Array5> crateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsync(
      {dynamic hint});

  Future<PointTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsync(
          {dynamic hint});

  Future<double> crateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsync(
      {required F64Array16 array, dynamic hint});

  Future<TestIdTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsync(
          {required TestIdTwinRustAsyncArray4 id, dynamic hint});

  Future<MessageIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsync(
          {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsync(
          {required U8Array8 id, dynamic hint});

  Future<U8Array8>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsync(
          {required FeedIdTwinRustAsync id, dynamic hint});

  Future<U8Array1600>
      crateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsync(
          {required BlobTwinRustAsync blob, dynamic hint});

  Future<U8Array32> crateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id, dynamic hint});

  BlobTwinSync crateApiPseudoManualArrayTwinSyncBoxedBlobTwinSync(
      {required U8Array1600 blob, dynamic hint});

  TestIdTwinSync crateApiPseudoManualArrayTwinSyncFuncTestIdTwinSync(
      {required TestIdTwinSync id, dynamic hint});

  U8Array5 crateApiPseudoManualArrayTwinSyncGetArrayTwinSync({dynamic hint});

  PointTwinSyncArray2 crateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSync(
      {dynamic hint});

  double crateApiPseudoManualArrayTwinSyncLastNumberTwinSync(
      {required F64Array16 array, dynamic hint});

  TestIdTwinSyncArray2 crateApiPseudoManualArrayTwinSyncNestedIdTwinSync(
      {required TestIdTwinSyncArray4 id, dynamic hint});

  MessageIdTwinSync crateApiPseudoManualArrayTwinSyncNewMsgidTwinSync(
      {required U8Array32 id, dynamic hint});

  FeedIdTwinSync crateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSync(
      {required U8Array8 id, dynamic hint});

  U8Array8 crateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id, dynamic hint});

  U8Array1600 crateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSync(
      {required BlobTwinSync blob, dynamic hint});

  U8Array32 crateApiPseudoManualArrayTwinSyncUseMsgidTwinSync(
      {required MessageIdTwinSync id, dynamic hint});

  Future<void>
      crateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsync(
          {required CustomizedTwinRustAsync val, dynamic hint});

  Future<UserIdTwinRustAsync>
      crateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsync(
          {UserIdTwinRustAsync userId = const UserIdTwinRustAsync(),
          dynamic hint});

  void crateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSync(
      {required CustomizedTwinSync val, dynamic hint});

  UserIdTwinSync crateApiPseudoManualAttributeTwinSyncNextUserIdTwinSync(
      {UserIdTwinSync userId = const UserIdTwinSync(), dynamic hint});

  Future<BasicGeneralEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required BasicGeneralEnumTwinNormal arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required BasicPrimitiveEnumTwinNormal arg, dynamic hint});

  Future<BasicStructTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormal(
          {required BasicStructTwinNormal arg, dynamic hint});

  Future<bool> crateApiPseudoManualBasicExampleBasicTypeBoolTwinNormal(
      {required bool arg, dynamic hint});

  Future<Uint8List> crateApiPseudoManualBasicExampleBasicTypeBytesTwinNormal(
      {required List<int> arg, dynamic hint});

  Future<double> crateApiPseudoManualBasicExampleBasicTypeF32TwinNormal(
      {required double arg, dynamic hint});

  Future<double> crateApiPseudoManualBasicExampleBasicTypeF64TwinNormal(
      {required double arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeI16TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeI32TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeI64TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeI8TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormal(
      {required int arg, dynamic hint});

  Future<String> crateApiPseudoManualBasicExampleBasicTypeStringTwinNormal(
      {required String arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeU16TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeU32TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeU64TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeU8TwinNormal(
      {required int arg, dynamic hint});

  Future<int> crateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormal(
      {required int arg, dynamic hint});

  Future<List<BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required List<BasicGeneralEnumTwinNormal> arg, dynamic hint});

  Future<List<BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required List<BasicPrimitiveEnumTwinNormal> arg, dynamic hint});

  Future<List<BasicStructTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormal(
          {required List<BasicStructTwinNormal> arg, dynamic hint});

  Future<List<bool>>
      crateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormal(
          {required List<bool> arg, dynamic hint});

  Future<List<Uint8List>>
      crateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormal(
          {required List<Uint8List> arg, dynamic hint});

  Future<Float32List>
      crateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormal(
          {required List<double> arg, dynamic hint});

  Future<Float64List>
      crateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormal(
          {required List<double> arg, dynamic hint});

  Future<Int16List>
      crateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormal(
          {required List<int> arg, dynamic hint});

  Future<Int32List>
      crateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormal(
          {required List<int> arg, dynamic hint});

  Future<Int64List>
      crateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormal(
          {required Int64List arg, dynamic hint});

  Future<Int8List>
      crateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormal(
          {required List<int> arg, dynamic hint});

  Future<List<String>>
      crateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormal(
          {required List<String> arg, dynamic hint});

  Future<Uint16List>
      crateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormal(
          {required List<int> arg, dynamic hint});

  Future<Uint32List>
      crateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormal(
          {required List<int> arg, dynamic hint});

  Future<Uint64List>
      crateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormal(
          {required Uint64List arg, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormal(
          {required List<int> arg, dynamic hint});

  Future<List<BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicGeneralEnumTwinRustAsync> arg, dynamic hint});

  Future<List<BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicPrimitiveEnumTwinRustAsync> arg, dynamic hint});

  Future<List<BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required List<BasicStructTwinRustAsync> arg, dynamic hint});

  Future<List<bool>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsync(
          {required List<bool> arg, dynamic hint});

  Future<List<Uint8List>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsync(
          {required List<Uint8List> arg, dynamic hint});

  Future<Float32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsync(
          {required List<double> arg, dynamic hint});

  Future<Float64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsync(
          {required List<double> arg, dynamic hint});

  Future<Int16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsync(
          {required List<int> arg, dynamic hint});

  Future<Int32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsync(
          {required List<int> arg, dynamic hint});

  Future<Int64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsync(
          {required Int64List arg, dynamic hint});

  Future<Int8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsync(
          {required List<int> arg, dynamic hint});

  Future<List<String>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsync(
          {required List<String> arg, dynamic hint});

  Future<Uint16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsync(
          {required List<int> arg, dynamic hint});

  Future<Uint32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsync(
          {required List<int> arg, dynamic hint});

  Future<Uint64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsync(
          {required Uint64List arg, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsync(
          {required List<int> arg, dynamic hint});

  List<BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSync(
          {required List<BasicGeneralEnumTwinSync> arg, dynamic hint});

  List<BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required List<BasicPrimitiveEnumTwinSync> arg, dynamic hint});

  List<BasicStructTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSync(
          {required List<BasicStructTwinSync> arg, dynamic hint});

  List<bool>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSync(
          {required List<bool> arg, dynamic hint});

  List<Uint8List>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSync(
          {required List<Uint8List> arg, dynamic hint});

  Float32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSync(
          {required List<double> arg, dynamic hint});

  Float64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSync(
          {required List<double> arg, dynamic hint});

  Int16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSync(
          {required List<int> arg, dynamic hint});

  Int32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSync(
          {required List<int> arg, dynamic hint});

  Int64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSync(
          {required Int64List arg, dynamic hint});

  Int8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSync(
      {required List<int> arg, dynamic hint});

  List<String>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSync(
          {required List<String> arg, dynamic hint});

  Uint16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSync(
          {required List<int> arg, dynamic hint});

  Uint32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSync(
          {required List<int> arg, dynamic hint});

  Uint64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSync(
          {required Uint64List arg, dynamic hint});

  Uint8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSync(
      {required List<int> arg, dynamic hint});

  Future<Map<int, BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required Map<int, BasicGeneralEnumTwinNormal> arg, dynamic hint});

  Future<Map<int, BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required Map<int, BasicPrimitiveEnumTwinNormal> arg, dynamic hint});

  Future<Map<int, BasicStructTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormal(
          {required Map<int, BasicStructTwinNormal> arg, dynamic hint});

  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormal(
          {required Map<int, bool> arg, dynamic hint});

  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormal(
          {required Map<int, Uint8List> arg, dynamic hint});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormal(
          {required Map<int, double> arg, dynamic hint});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormal(
          {required Map<int, double> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, String>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormal(
          {required Map<int, String> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormal(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicGeneralEnumTwinRustAsync> arg, dynamic hint});

  Future<Map<int, BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicPrimitiveEnumTwinRustAsync> arg,
          dynamic hint});

  Future<Map<int, BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicStructTwinRustAsync> arg, dynamic hint});

  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsync(
          {required Map<int, bool> arg, dynamic hint});

  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsync(
          {required Map<int, Uint8List> arg, dynamic hint});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsync(
          {required Map<int, double> arg, dynamic hint});

  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsync(
          {required Map<int, double> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, String>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsync(
          {required Map<int, String> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSync(
          {required Map<int, BasicGeneralEnumTwinSync> arg, dynamic hint});

  Map<int, BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required Map<int, BasicPrimitiveEnumTwinSync> arg, dynamic hint});

  Map<int, BasicStructTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSync(
          {required Map<int, BasicStructTwinSync> arg, dynamic hint});

  Map<int, bool>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSync(
          {required Map<int, bool> arg, dynamic hint});

  Map<int, Uint8List>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSync(
          {required Map<int, Uint8List> arg, dynamic hint});

  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSync(
          {required Map<int, double> arg, dynamic hint});

  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSync(
          {required Map<int, double> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, String>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSync(
          {required Map<int, String> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSync(
          {required Map<int, int> arg, dynamic hint});

  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSync(
          {required Map<int, int> arg, dynamic hint});

  Future<BasicGeneralEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormal(
          {BasicGeneralEnumTwinNormal? arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {BasicPrimitiveEnumTwinNormal? arg, dynamic hint});

  Future<BasicStructTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormal(
          {BasicStructTwinNormal? arg, dynamic hint});

  Future<bool?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormal(
          {bool? arg, dynamic hint});

  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormal(
          {Uint8List? arg, dynamic hint});

  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormal(
          {double? arg, dynamic hint});

  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormal(
          {double? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormal(
          {int? arg, dynamic hint});

  Future<String?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormal(
          {String? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormal(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormal(
          {int? arg, dynamic hint});

  Future<BasicGeneralEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {BasicGeneralEnumTwinRustAsync? arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {BasicPrimitiveEnumTwinRustAsync? arg, dynamic hint});

  Future<BasicStructTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
          {BasicStructTwinRustAsync? arg, dynamic hint});

  Future<bool?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsync(
          {bool? arg, dynamic hint});

  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsync(
          {Uint8List? arg, dynamic hint});

  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsync(
          {double? arg, dynamic hint});

  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsync(
          {double? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsync(
          {int? arg, dynamic hint});

  Future<String?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsync(
          {String? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsync(
          {int? arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsync(
          {int? arg, dynamic hint});

  BasicGeneralEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSync(
          {BasicGeneralEnumTwinSync? arg, dynamic hint});

  BasicPrimitiveEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {BasicPrimitiveEnumTwinSync? arg, dynamic hint});

  BasicStructTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSync(
          {BasicStructTwinSync? arg, dynamic hint});

  bool?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSync(
          {bool? arg, dynamic hint});

  Uint8List?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSync(
          {Uint8List? arg, dynamic hint});

  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSync(
          {double? arg, dynamic hint});

  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSync(
          {double? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSync(
          {int? arg, dynamic hint});

  String?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSync(
          {String? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSync(
          {int? arg, dynamic hint});

  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSync(
          {int? arg, dynamic hint});

  Future<BasicGeneralEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required BasicGeneralEnumTwinRustAsync arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required BasicPrimitiveEnumTwinRustAsync arg, dynamic hint});

  Future<BasicStructTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required BasicStructTwinRustAsync arg, dynamic hint});

  Future<bool>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsync(
          {required bool arg, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsync(
          {required List<int> arg, dynamic hint});

  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsync(
          {required double arg, dynamic hint});

  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsync(
          {required double arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsync(
          {required int arg, dynamic hint});

  Future<String>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsync(
          {required String arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsync(
          {required int arg, dynamic hint});

  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsync(
          {required int arg, dynamic hint});

  BasicGeneralEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
          {required BasicGeneralEnumTwinSync arg, dynamic hint});

  BasicPrimitiveEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required BasicPrimitiveEnumTwinSync arg, dynamic hint});

  BasicStructTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSync(
          {required BasicStructTwinSync arg, dynamic hint});

  bool crateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSync(
      {required bool arg, dynamic hint});

  Uint8List crateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSync(
      {required List<int> arg, dynamic hint});

  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSync(
      {required double arg, dynamic hint});

  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSync(
      {required double arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSync(
      {required int arg, dynamic hint});

  String crateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSync(
      {required String arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSync(
      {required int arg, dynamic hint});

  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSync(
      {required int arg, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormal(
          {required String raw, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormal(
          {required List<int> raw, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormal(
          {required BenchmarkBinaryTreeTwinNormal tree, dynamic hint});

  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormal(
          {required int depth, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormal(
          {required int depth, dynamic hint});

  Future<BenchmarkBinaryTreeTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormal(
          {required int depth, dynamic hint});

  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormal(
      {required String raw, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormal(
          {required List<int> raw, dynamic hint});

  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormal(
      {required BenchmarkBlobTwinNormal blob, dynamic hint});

  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormal(
          {required int size, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormal(
          {required int size, dynamic hint});

  Future<BenchmarkBlobTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormal(
          {required int size, dynamic hint});

  Future<int> crateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormal(
      {required List<int> bytes, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormal(
          {required int size, dynamic hint});

  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormal(
      {dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsync(
          {required String raw, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsync(
          {required List<int> raw, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsync(
          {required BenchmarkBinaryTreeTwinRustAsync tree, dynamic hint});

  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsync(
          {required int depth, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsync(
          {required int depth, dynamic hint});

  Future<BenchmarkBinaryTreeTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsync(
          {required int depth, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsync(
          {required String raw, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsync(
          {required List<int> raw, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsync(
          {required BenchmarkBlobTwinRustAsync blob, dynamic hint});

  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsync(
          {required int size, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsync(
          {required int size, dynamic hint});

  Future<BenchmarkBlobTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsync(
          {required int size, dynamic hint});

  Future<int>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsync(
          {required List<int> bytes, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsync(
          {required int size, dynamic hint});

  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsync(
          {dynamic hint});

  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSync(
          {required String raw, dynamic hint});

  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSync(
          {required List<int> raw, dynamic hint});

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSync(
      {required BenchmarkBinaryTreeTwinSync tree, dynamic hint});

  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSync(
          {required int depth, dynamic hint});

  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSync(
          {required int depth, dynamic hint});

  BenchmarkBinaryTreeTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSync(
          {required int depth, dynamic hint});

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSync(
      {required String raw, dynamic hint});

  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSync(
          {required List<int> raw, dynamic hint});

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSync(
      {required BenchmarkBlobTwinSync blob, dynamic hint});

  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSync(
          {required int size, dynamic hint});

  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSync(
          {required int size, dynamic hint});

  BenchmarkBlobTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSync(
          {required int size, dynamic hint});

  int crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSync(
      {required List<int> bytes, dynamic hint});

  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSync(
          {required int size, dynamic hint});

  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSync(
      {dynamic hint});

  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsync(
          {required DateTime d, dynamic hint});

  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsync(
          {required DateTime d, dynamic hint});

  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsync(
          {required Duration d, dynamic hint});

  Future<List<DateTime>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsync(
          {required List<Duration> durations,
          required DateTime since,
          dynamic hint});

  Future<List<Duration>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsync(
          {required List<DateTime> timestamps,
          required DateTime epoch,
          dynamic hint});

  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsync(
          {required FeatureChronoTwinRustAsync mine, dynamic hint});

  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsync(
          {required DateTime d, dynamic hint});

  Future<DateTime?>
      crateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsync(
          {DateTime? d, dynamic hint});

  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsync(
          {dynamic hint});

  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsync(
          {dynamic hint});

  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSync(
      {required DateTime d, dynamic hint});

  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSync(
      {required DateTime d, dynamic hint});

  Duration crateApiPseudoManualChronoTypeTwinSyncDurationTwinSync(
      {required Duration d, dynamic hint});

  List<DateTime> crateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSync(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint});

  List<Duration> crateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSync(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint});

  Duration crateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSync(
      {required FeatureChronoTwinSync mine, dynamic hint});

  DateTime crateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSync(
      {required DateTime d, dynamic hint});

  DateTime?
      crateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSync(
          {DateTime? d, dynamic hint});

  TestChronoTwinSync crateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSync(
      {dynamic hint});

  TestChronoTwinSync
      crateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
          {required StructWithCommentsTwinRustAsync that, dynamic hint});

  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsync(
          {dynamic hint});

  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSync(
          {required StructWithCommentsTwinSync that, dynamic hint});

  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsync(
          {required FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              callback,
          dynamic hint});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsync(
          {required FutureOr<void> Function() callback,
          required int numTimes,
          dynamic hint});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsync(
          {required FutureOr<void> Function(String) callback, dynamic hint});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsync(
          {required FutureOr<String> Function() callback, dynamic hint});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsync(
          {required FutureOr<void> Function() callback, dynamic hint});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsync(
          {required FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              callback,
          dynamic hint});

  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsync(
          {required Object input,
          required FutureOr<void> Function(Object) callback,
          dynamic hint});

  Future<Object>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsync(
          {required FutureOr<Object> Function() callback, dynamic hint});

  Future<String>
      crateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsync(
          {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsync(
          {required int id, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsync(
          {required EnumDartOpaqueTwinRustAsync opaque, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsync(
          {required DartOpaqueNestedTwinRustAsync opaque, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsync(
          {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsync(
          {Object? opaque, dynamic hint});

  Future<Object?>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<Object>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsync(
          {required List<Object> opaque, dynamic hint});

  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint});

  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsync(
          {required int id, required Object opaque, dynamic hint});

  String crateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSync(
      {required Object opaque, dynamic hint});

  List<Object> crateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSync(
      {required Object opaque, dynamic hint});

  EnumDartOpaqueTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSync(
          {required Object opaque, dynamic hint});

  DartOpaqueNestedTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSync(
          {required Object opaque1, required Object opaque2, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSync(
      {required int id, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSync(
      {required ObjectArray1 opaque, dynamic hint});

  ObjectArray1 crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSync(
      {required Object opaque, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSync(
      {Object? opaque, dynamic hint});

  Object? crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSync(
      {required Object opaque, dynamic hint});

  Object crateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSync(
      {required Object opaque, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSync(
      {required List<Object> opaque, dynamic hint});

  List<Object> crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSync(
      {required Object opaque, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSync(
      {required Object opaque, dynamic hint});

  void crateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSync(
      {required int id, required Object opaque, dynamic hint});

  Stream<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsync(
          {required DroppableTwinRustAsync that, dynamic hint});

  Future<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsync(
          {dynamic hint});

  Future<DroppableTwinRustAsync>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsync(
          {required DroppableTwinRustAsync that, dynamic hint});

  Stream<int>
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSync(
          {required DroppableTwinSync that, dynamic hint});

  int crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSync(
      {dynamic hint});

  DroppableTwinSync
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSync(
          {required DroppableTwinSync that, dynamic hint});

  Future<EnumSimpleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsync(
          {required EnumSimpleTwinRustAsync arg, dynamic hint});

  Future<EnumWithDiscriminantTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsync(
          {required EnumWithDiscriminantTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemMixedTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsync(
          {required EnumWithItemMixedTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemStructTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsync(
          {required EnumWithItemStructTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemTupleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsync(
          {required EnumWithItemTupleTwinRustAsync arg, dynamic hint});

  Future<WeekdaysTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsync(
          {required WeekdaysTwinRustAsync weekday, dynamic hint});

  Future<KitchenSinkTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsync(
          {required KitchenSinkTwinRustAsync val, dynamic hint});

  Future<WeekdaysTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsync(
          {required String input, dynamic hint});

  Future<MeasureTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsync(
          {required MeasureTwinRustAsync measure, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsync(
          {required NoteTwinRustAsync note, dynamic hint});

  EnumSimpleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSync(
          {required EnumSimpleTwinSync arg, dynamic hint});

  EnumWithDiscriminantTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSync(
          {required EnumWithDiscriminantTwinSync arg, dynamic hint});

  EnumWithItemMixedTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSync(
          {required EnumWithItemMixedTwinSync arg, dynamic hint});

  EnumWithItemStructTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSync(
          {required EnumWithItemStructTwinSync arg, dynamic hint});

  EnumWithItemTupleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSync(
          {required EnumWithItemTupleTwinSync arg, dynamic hint});

  WeekdaysTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSync(
          {required WeekdaysTwinSync weekday, dynamic hint});

  KitchenSinkTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSync(
          {required KitchenSinkTwinSync val, dynamic hint});

  WeekdaysTwinSync?
      crateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSync(
          {required String input, dynamic hint});

  MeasureTwinSync? crateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSync(
      {required MeasureTwinSync measure, dynamic hint});

  Uint8List crateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSync(
      {required NoteTwinSync note, dynamic hint});

  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsync(
          {required String address, required String payload, dynamic hint});

  Future<String>
      crateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsync(
          {required EventTwinRustAsync that, dynamic hint});

  Future<Stream<EventTwinRustAsync>>
      crateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsync(
          {required int arg, dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsync(
          {required CustomNestedErrorOuterTwinRustAsync arg, dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsync(
          {required CustomStructErrorTwinRustAsync arg, dynamic hint});

  Future<CustomStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsync(
          {required String message, dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsync(
          {required int variant, dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsync(
          {dynamic hint});

  Future<SomeStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsync(
          {required int value, dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that, dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that, dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync(
          {dynamic hint});

  Future<Stream<String>>
      crateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsync(
          {dynamic hint});

  void crateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSync(
      {required int arg, dynamic hint});

  void
      crateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSync(
          {required CustomNestedErrorOuterTwinSync arg, dynamic hint});

  void
      crateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSync(
          {required CustomStructErrorTwinSync arg, dynamic hint});

  CustomStructTwinSync
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSync(
          {required String message, dynamic hint});

  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
          {required CustomStructTwinSync that, dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that, dynamic hint});

  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSync(
          {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSync(
      {dynamic hint});

  void crateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSync(
      {dynamic hint});

  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSync(
      {dynamic hint});

  void
      crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSync(
          {dynamic hint});

  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSync(
      {dynamic hint});

  void crateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSync(
      {required int variant, dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSync(
      {dynamic hint});

  SomeStructTwinSync
      crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSync(
          {required int value, dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSync(
      {dynamic hint});

  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSync(
      {dynamic hint});

  Stream<String>
      crateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSync(
          {dynamic hint});

  void crateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSync({dynamic hint});

  Future<NewSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsync(
          {dynamic hint});

  Future<OldSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsync(
          {dynamic hint});

  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsync(
          {required MyEnum myEnum, dynamic hint});

  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsync(
          {required MyStruct myStruct, dynamic hint});

  NewSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSync(
          {dynamic hint});

  OldSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSync(
          {dynamic hint});

  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSync(
      {required MyEnum myEnum, dynamic hint});

  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSync(
      {required MyStruct myStruct, dynamic hint});

  Future<Map<int, int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsync(
          {required Map<int, int> arg, dynamic hint});

  Future<Map<String, Uint8List>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsync(
          {required Map<String, Uint8List> arg, dynamic hint});

  Future<Map<String, KitchenSinkTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsync(
          {required Map<String, KitchenSinkTwinRustAsync> arg, dynamic hint});

  Future<Map<String, EnumSimpleTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsync(
          {required Map<String, EnumSimpleTwinRustAsync> arg, dynamic hint});

  Future<Map<String, String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsync(
          {required Map<String, String> arg, dynamic hint});

  Future<Map<String, MySize>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsync(
          {required Map<String, MySize> arg, dynamic hint});

  Future<Set<int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsync(
          {required Set<int> arg, dynamic hint});

  Future<Set<String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsync(
          {required Set<String> arg, dynamic hint});

  Map<int, int> crateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<String, Uint8List>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSync(
          {required Map<String, Uint8List> arg, dynamic hint});

  Map<String, KitchenSinkTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSync(
          {required Map<String, KitchenSinkTwinSync> arg, dynamic hint});

  Map<String, EnumSimpleTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSync(
          {required Map<String, EnumSimpleTwinSync> arg, dynamic hint});

  Map<String, String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSync(
          {required Map<String, String> arg, dynamic hint});

  Map<String, MySize>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSync(
          {required Map<String, MySize> arg, dynamic hint});

  Set<int> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSync(
      {required Set<int> arg, dynamic hint});

  Set<String> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSync(
      {required Set<String> arg, dynamic hint});

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsync(
          {dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
          {required String a, required String b, dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required String b,
          dynamic hint});

  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync(
          {dynamic hint});

  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max, dynamic hint});

  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
          {required ConcatenateWithTwinRustAsync that, dynamic hint});

  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max,
          dynamic hint});

  Future<ConcatenateWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a, dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that, dynamic hint});

  Future<SumWithTwinRustAsyncArray3>
      crateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsync(
          {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsync(
          {dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCall(
          {required MyCallableTwinRustAsync that,
          required String two,
          dynamic hint});

  Future<SimpleEnumTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one, dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimpleEnumTwinRustAsync that, dynamic hint});

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimplePrimitiveEnumTwinRustAsync that, dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsync(
          {required SimpleStructTwinRustAsync a,
          required SimpleStructTwinRustAsync b,
          dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsync(
          {required SimpleStructTwinRustAsync that, dynamic hint});

  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsync(
          {required SimpleStructTwinRustAsync that, dynamic hint});

  Future<SimpleStructTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one, dynamic hint});

  Future<List<String>>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsync(
          {required List<SimpleStructTwinRustAsync> arg, dynamic hint});

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsync(
          {required int a, dynamic hint});

  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsync(
          {required SumWithTwinRustAsync that,
          required int y,
          required int z,
          dynamic hint});

  int crateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSync(
      {dynamic hint});

  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSync(
          {required String a, required String b, dynamic hint});

  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSync(
          {required ConcatenateWithTwinSync that,
          required String b,
          dynamic hint});

  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync(
          {dynamic hint});

  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max, dynamic hint});

  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
          {required ConcatenateWithTwinSync that, dynamic hint});

  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
          {required ConcatenateWithTwinSync that,
          required int key,
          required int max,
          dynamic hint});

  ConcatenateWithTwinSync
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSync(
          {required String a, dynamic hint});

  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSync(
          {required ConcatenateWithTwinSync that, dynamic hint});

  SumWithTwinSyncArray3 crateApiPseudoManualMethodTwinSyncGetSumArrayTwinSync(
      {required int a, required int b, required int c, dynamic hint});

  SumWithTwinSync crateApiPseudoManualMethodTwinSyncGetSumStructTwinSync(
      {dynamic hint});

  String crateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCall(
      {required MyCallableTwinSync that, required String two, dynamic hint});

  SimpleEnumTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSync(
          {required String one, dynamic hint});

  String
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSync(
          {required SimpleEnumTwinSync that, dynamic hint});

  int crateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSync(
      {required SimplePrimitiveEnumTwinSync that, dynamic hint});

  String crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSync(
      {required SimpleStructTwinSync a,
      required SimpleStructTwinSync b,
      dynamic hint});

  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSync(
          {required SimpleStructTwinSync that, dynamic hint});

  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSync(
          {required SimpleStructTwinSync that, dynamic hint});

  SimpleStructTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSync(
          {required String one, dynamic hint});

  List<String>
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSync(
          {required List<SimpleStructTwinSync> arg, dynamic hint});

  int crateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSync(
      {required int a, dynamic hint});

  int crateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that,
      required int y,
      required int z,
      dynamic hint});

  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsync(
          {dynamic hint});

  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsync(
          {dynamic hint});

  Future<int?> crateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsync(
      {required Numbers nums, dynamic hint});

  Future<int?>
      crateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsync(
          {required Sequences seqs, dynamic hint});

  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsync(
          {dynamic hint});

  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsync(
          {dynamic hint});

  Future<ApplicationMessage>
      crateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsync(
          {dynamic hint});

  Future<bool>
      crateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsync(
          {required ApplicationSettings appSettings, dynamic hint});

  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsync(
          {dynamic hint});

  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsync(
          {dynamic hint});

  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsync(
          {dynamic hint});

  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsync(
          {dynamic hint});

  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsync(
          {dynamic hint});

  Stream<MirrorStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsync(
          {dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsync(
          {dynamic hint});

  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsync(
          {dynamic hint});

  Future<Numbers>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsync(
          {required int num, required int times, dynamic hint});

  Future<Sequences>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsync(
          {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsync(
          {dynamic hint});

  Future<List<RawStringMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsync(
          {dynamic hint});

  Future<StructWithHashMap>
      crateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsync(
          {dynamic hint});

  Future<List<RawStringEnumMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsync(
          {dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsync(
          {dynamic hint});

  Future<NestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsync(
          {dynamic hint});

  Future<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsync(
          {required bool nested, dynamic hint});

  Future<RawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsync(
          {dynamic hint});

  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSync(
          {dynamic hint});

  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSync(
          {dynamic hint});

  int? crateApiPseudoManualMirrorTwinSyncFirstNumberTwinSync(
      {required Numbers nums, dynamic hint});

  int? crateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSync(
      {required Sequences seqs, dynamic hint});

  ApplicationSettings crateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSync(
      {dynamic hint});

  ApplicationSettings
      crateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSync(
          {dynamic hint});

  ApplicationMessage crateApiPseudoManualMirrorTwinSyncGetMessageTwinSync(
      {dynamic hint});

  bool crateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSync(
          {dynamic hint});

  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSync(
          {dynamic hint});

  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSync(
          {dynamic hint});

  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSync(
          {dynamic hint});

  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSync(
          {dynamic hint});

  Stream<MirrorStructTwinSync>
      crateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSync(
          {dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSync(
          {dynamic hint});

  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSync(
          {dynamic hint});

  Numbers crateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSync(
      {required int num, required int times, dynamic hint});

  Sequences crateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSync(
      {required int seq, required int times, dynamic hint});

  ContainsMirroredSubStructTwinSync
      crateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSync(
          {dynamic hint});

  List<RawStringMirrored>
      crateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSync(
          {dynamic hint});

  StructWithHashMap
      crateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSync(
          {dynamic hint});

  List<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSync(
          {dynamic hint});

  ListOfNestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSync(
          {dynamic hint});

  NestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSync(
          {dynamic hint});

  RawStringEnumMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSync(
          {required bool nested, dynamic hint});

  RawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSync(
          {dynamic hint});

  Future<BigBuffersTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsync(
          {dynamic hint});

  Future<MyTreeNodeTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsync(
          {required MyTreeNodeTwinRustAsync s, dynamic hint});

  Future<MyNestedStructTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsync(
          {required MyNestedStructTwinRustAsync s, dynamic hint});

  Future<String>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsync(
          {required String s, dynamic hint});

  Future<MySize>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsync(
          {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsync(
          {required List<int> v, dynamic hint});

  Future<List<WeekdaysTwinRustAsync>>
      crateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsync(
          {required List<WeekdaysTwinRustAsync> weekdays, dynamic hint});

  Future<AbcTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsync(
          {required AbcTwinRustAsync abc, dynamic hint});

  Future<StructWithEnumTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsync(
          {required StructWithEnumTwinRustAsync se, dynamic hint});

  BigBuffersTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSync(
          {dynamic hint});

  MyTreeNodeTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSync(
          {required MyTreeNodeTwinSync s, dynamic hint});

  MyNestedStructTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSync(
          {required MyNestedStructTwinSync s, dynamic hint});

  String crateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSync(
      {required String s, dynamic hint});

  MySize crateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSync(
      {required MySize arg, required MySize boxed, dynamic hint});

  Uint8List crateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSync(
      {required List<int> v, dynamic hint});

  List<WeekdaysTwinSync>
      crateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSync(
          {required List<WeekdaysTwinSync> weekdays, dynamic hint});

  AbcTwinSync crateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSync(
      {required AbcTwinSync abc, dynamic hint});

  StructWithEnumTwinSync
      crateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSync(
          {required StructWithEnumTwinSync se, dynamic hint});

  Future<EmptyTwinRustAsync>
      crateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsync(
          {required EmptyTwinRustAsync empty, dynamic hint});

  Future<void>
      crateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsync(
          {dynamic hint});

  Future<List<MySize>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsync(
          {required List<MySize> l, dynamic hint});

  Future<List<String>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsync(
          {required List<String> names, dynamic hint});

  EmptyTwinSync crateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSync(
      {required EmptyTwinSync empty, dynamic hint});

  void crateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSync(
      {dynamic hint});

  List<MySize> crateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSync(
      {required List<MySize> l, dynamic hint});

  List<String> crateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSync(
      {required List<String> names, dynamic hint});

  Future<NewTypeIntTwinRustAsync>
      crateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsync(
          {required NewTypeIntTwinRustAsync arg, dynamic hint});

  NewTypeIntTwinSync
      crateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSync(
          {required NewTypeIntTwinSync arg, dynamic hint});

  Future<int?>
      crateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsync(
          {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  int?
      crateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSync(
          {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<double>
      crateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsync(
          {double? opt, dynamic hint});

  Future<String>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsync(
          {int? i8Box,
          int? u8Box,
          int? i32Box,
          int? i64Box,
          double? f64Box,
          bool? boolbox,
          ExoticOptionalsTwinRustAsync? structbox,
          dynamic hint});

  Future<ExoticOptionalsTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsync(
          {ExoticOptionalsTwinRustAsync? opt, dynamic hint});

  Future<double?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsync(
          {required double left, required double right, dynamic hint});

  Future<ElementTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsync(
          {String? document, dynamic hint});

  Future<OptVecsTwinRustAsync>
      crateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsync(
          {required OptVecsTwinRustAsync opt, dynamic hint});

  double
      crateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSync(
          {double? opt, dynamic hint});

  String crateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox,
      dynamic hint});

  ExoticOptionalsTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSync(
          {ExoticOptionalsTwinSync? opt, dynamic hint});

  double? crateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSync(
      {required double left, required double right, dynamic hint});

  ElementTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSync(
          {String? document, dynamic hint});

  OptVecsTwinSync crateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt, dynamic hint});

  Future<int> crateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsync(
      {required int arg, dynamic hint});

  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsync(
          {required String arg, dynamic hint});

  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsync(
          {required String arg, dynamic hint});

  Future<SimpleStructForBorrowTwinRustAsync>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsync(
          {required SimpleStructForBorrowTwinRustAsync arg, dynamic hint});

  int crateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSync(
      {required int arg, dynamic hint});

  String crateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSync(
      {required String arg, dynamic hint});

  String crateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSync(
      {required String arg, dynamic hint});

  SimpleStructForBorrowTwinSync
      crateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSync(
          {required SimpleStructForBorrowTwinSync arg, dynamic hint});

  Future<VecOfPrimitivePackTwinRustAsync>
      crateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsync(
          {required int n, dynamic hint});

  VecOfPrimitivePackTwinSync
      crateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSync(
          {required int n, dynamic hint});

  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsync(
          {required int myI32,
          required int myI64,
          required double myF64,
          required bool myBool,
          dynamic hint});

  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsync(
          {required int myU32, dynamic hint});

  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSync(
      {required int myU32, dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsync(
          {dynamic hint});

  Future<RawStringItemStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsync(
          {dynamic hint});

  MoreThanJustOneRawStringStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSync(
          {dynamic hint});

  RawStringItemStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync(
          {dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsync(
          {dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          required int adder,
          dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsync(
          {required List<NonCloneSimpleTwinRustAsync> arg,
          required List<int> expect,
          dynamic hint});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b,
          dynamic hint});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync borrow,
          required NonCloneSimpleTwinRustAsync mutBorrow,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsync(
          {required BoxFnStringString arg, dynamic hint});

  Future<BoxFnStringString>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync a,
          required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync b,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsync(
          {required NonCloneSimpleEnumTwinRustAsync arg, dynamic hint});

  Future<NonCloneSimpleEnumTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsync(
          {required EnumWithGoodAndOpaqueTwinRustAsync arg, dynamic hint});

  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsync(
          {dynamic hint});

  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsync(
          {required int initial, dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsync(
          {required StructWithExplicitAutoOpaqueFieldTwinRustAsync arg,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required String b,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsync(
          {required BoxMyTraitTwinRustAsync arg, dynamic hint});

  Future<BoxMyTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsync(
          {dynamic hint});

  Future<(OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync)>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync(
          {dynamic hint});

  Future<OpaqueTwoTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsync(
          {dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsync(
          {required int initial, dynamic hint});

  Future<List<NonCloneSimpleTwinRustAsync>>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsync(
          {dynamic hint});

  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync apple,
          required NonCloneSimpleTwinRustAsync orange,
          dynamic hint});

  Stream<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldTwinRustAsync arg,
          dynamic hint});

  Future<StructWithGoodAndOpaqueFieldTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
          {required BoxHelloTraitTwinRustAsync arg,
          required String expect,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
          {required BoxHelloTraitTwinRustAsync arg,
          required String expect,
          dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
          {required BoxHelloTraitTwinRustAsync arg,
          required String expect,
          dynamic hint});

  Future<BoxHelloTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync(
          {dynamic hint});

  Future<BoxHelloTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b,
          dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSync(
          {dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSync(
          {dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          required int adder,
          dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint});

  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, required int expect, dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSync(
          {required List<NonCloneSimpleTwinSync> arg,
          required List<int> expect,
          dynamic hint});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync borrow,
      required NonCloneSimpleTwinSync mutBorrow,
      dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSync(
          {required BoxFnStringString arg, dynamic hint});

  BoxFnStringString
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSync(
          {dynamic hint});

  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSync(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinSync b,
      dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSync(
          {required NonCloneSimpleEnumTwinSync arg, dynamic hint});

  NonCloneSimpleEnumTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSync(
          {required EnumWithGoodAndOpaqueTwinSync arg, dynamic hint});

  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSync(
          {dynamic hint});

  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSync(
          {required int initial, dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSync(
          {required StructWithExplicitAutoOpaqueFieldTwinSync arg,
          dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSync(
          {required NonCloneSimpleTwinSync a, required String b, dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSync(
          {required BoxMyTraitTwinSync arg, dynamic hint});

  BoxMyTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSync(
          {dynamic hint});

  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSync(
      {dynamic hint});

  OpaqueTwoTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSync(
          {dynamic hint});

  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSync(
          {required int initial, dynamic hint});

  List<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSync(
          {dynamic hint});

  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSync(
      {required NonCloneSimpleTwinSync apple,
      required NonCloneSimpleTwinSync orange,
      dynamic hint});

  Stream<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
          {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint});

  StructWithGoodAndOpaqueFieldTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync(
          {dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgBorrowTwinSync(
          {required BoxHelloTraitTwinSync arg,
          required String expect,
          dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgMutBorrowTwinSync(
          {required BoxHelloTraitTwinSync arg,
          required String expect,
          dynamic hint});

  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgOwnTwinSync(
          {required BoxHelloTraitTwinSync arg,
          required String expect,
          dynamic hint});

  BoxHelloTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnOneTwinSync(
          {dynamic hint});

  BoxHelloTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinSync(
          {dynamic hint});

  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint});

  Future<EnumOpaqueTwinRustAsyncArray5>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsync(
          {dynamic hint});

  Future<OpaqueNestedTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsync(
          {dynamic hint});

  Future<HideDataTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsync(
          {dynamic hint});

  Future<HideDataTwinRustAsync?>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsync(
          {HideDataTwinRustAsync? opaque, dynamic hint});

  Future<FrbOpaqueReturnTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsync(
          {required HideDataTwinRustAsyncArray2 data, dynamic hint});

  Future<HideDataTwinRustAsyncArray2>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsync(
          {required List<HideDataTwinRustAsync> data, dynamic hint});

  Future<List<HideDataTwinRustAsync>>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsync(
          {dynamic hint});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsync(
          {required EnumOpaqueTwinRustAsync opaque, dynamic hint});

  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsync(
          {required OpaqueNestedTwinRustAsync opaque, dynamic hint});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsync(
          {required NonCloneDataTwinRustAsync clone, dynamic hint});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque, dynamic hint});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsync(
          {required HideDataTwinRustAsync opaque, dynamic hint});

  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque, dynamic hint});

  EnumOpaqueTwinSyncArray5
      crateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSync(
          {dynamic hint});

  OpaqueNestedTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSync(
          {dynamic hint});

  HideDataTwinSync crateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSync(
      {dynamic hint});

  HideDataTwinSync?
      crateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSync(
          {HideDataTwinSync? opaque, dynamic hint});

  FrbOpaqueReturnTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSync(
          {dynamic hint});

  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSync(
      {required HideDataTwinSyncArray2 data, dynamic hint});

  HideDataTwinSyncArray2
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSync({dynamic hint});

  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSync(
      {required List<HideDataTwinSync> data, dynamic hint});

  List<HideDataTwinSync>
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSync({dynamic hint});

  String crateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque, dynamic hint});

  void crateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque, dynamic hint});

  String crateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSync(
      {required NonCloneDataTwinSync clone, dynamic hint});

  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSync(
      {required HideDataTwinSync opaque, dynamic hint});

  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSync(
      {required HideDataTwinSync opaque, dynamic hint});

  String crateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSync(
      {required HideDataTwinSync opaque, dynamic hint});

  Future<int> crateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsync(
      {required int a, required int b, dynamic hint});

  int crateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSync(
      {required int a, required int b, dynamic hint});

  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsync(
          {dynamic hint});

  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsync(
          {dynamic hint});

  Stream<int>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsync(
          {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsync(
          {dynamic hint});

  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsync(
          {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsync(
          {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsync(
          {required int key, required int max, dynamic hint});

  Stream<U8Array2>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsync(
          {dynamic hint});

  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsync(
          {required MyStructContainingStreamSinkTwinRustAsync arg,
          dynamic hint});

  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsync(
          {required List<RustStreamSink<int>> arg, dynamic hint});

  Future<StructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsync(
          {required StructWithOneFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsync(
          {required StructWithTwoFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithZeroFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsync(
          {required StructWithZeroFieldTwinRustAsync arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg, dynamic hint});

  StructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSync(
          {required StructWithOneFieldTwinSync arg, dynamic hint});

  StructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSync(
          {required StructWithTwoFieldTwinSync arg, dynamic hint});

  StructWithZeroFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSync(
          {required StructWithZeroFieldTwinSync arg, dynamic hint});

  TupleStructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSync(
          {required TupleStructWithOneFieldTwinSync arg, dynamic hint});

  TupleStructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSync(
          {required TupleStructWithTwoFieldTwinSync arg, dynamic hint});

  Future<void> crateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsync(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)>
      crateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsync(
          {(String, int)? value, dynamic hint});

  void crateApiPseudoManualTupleTwinSyncTestTuple2TwinSync(
      {required List<(String, int)> value, dynamic hint});

  (String, int) crateApiPseudoManualTupleTwinSyncTestTupleTwinSync(
      {(String, int)? value, dynamic hint});

  Future<int>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsync(
          {required int input, dynamic hint});

  Future<TestModelTwinRustAsync>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsync(
          {required int input, dynamic hint});

  Future<int>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsync(
          {required int input, dynamic hint});

  int crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSync(
      {required int input, dynamic hint});

  TestModelTwinSync
      crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSync(
          {required int input, dynamic hint});

  int crateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSync(
      {required int input, dynamic hint});

  Future<FeatureUuidTwinRustAsync>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsync(
          {required FeatureUuidTwinRustAsync ids, dynamic hint});

  Future<UuidValue>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsync(
          {required UuidValue id, dynamic hint});

  Future<List<UuidValue>>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsync(
          {required List<UuidValue> ids, dynamic hint});

  FeatureUuidTwinSync
      crateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSync(
          {required FeatureUuidTwinSync ids, dynamic hint});

  UuidValue crateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSync(
      {required UuidValue id, dynamic hint});

  List<UuidValue> crateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSync(
      {required List<UuidValue> ids, dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinNormal>
      crateApiRawStringTestMoreThanJustOneRawStringStructTwinNormal(
          {dynamic hint});

  Future<RawStringItemStructTwinNormal>
      crateApiRawStringTestRawStringItemStructTwinNormal({dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<int>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormal(
          {dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormal(
          {dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormal(
          {dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal(
          {dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder,
      dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormal(
      {required List<NonCloneSimpleTwinNormal> arg,
      required List<int> expect,
      dynamic hint});

  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint});

  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal borrow,
      required NonCloneSimpleTwinNormal mutBorrow,
      dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormal(
      {required BoxFnStringString arg, dynamic hint});

  Future<BoxFnStringString>
      crateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormal(
          {dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormal(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinNormal b,
      dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormal(
      {required NonCloneSimpleEnumTwinNormal arg, dynamic hint});

  Future<NonCloneSimpleEnumTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormal(
          {dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormal(
          {required EnumWithGoodAndOpaqueTwinNormal arg, dynamic hint});

  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormal(
          {dynamic hint});

  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormal(
          {dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormal(
          {required int initial, dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormal(
      {required StructWithExplicitAutoOpaqueFieldTwinNormal arg, dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required NonCloneSimpleTwinNormal a, required String b, dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormal(
      {required BoxMyTraitTwinNormal arg, dynamic hint});

  Future<BoxMyTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormal(
          {dynamic hint});

  Future<(OpaqueOneTwinNormal, OpaqueTwoTwinNormal)>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormal(
          {dynamic hint});

  Future<OpaqueTwoTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormal(
          {dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormal(
          {required int initial, dynamic hint});

  Future<List<NonCloneSimpleTwinNormal>>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormal(
          {dynamic hint});

  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormal(
      {required NonCloneSimpleTwinNormal apple,
      required NonCloneSimpleTwinNormal orange,
      dynamic hint});

  Stream<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormal({dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
          {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint});

  Future<StructWithGoodAndOpaqueFieldTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal(
          {dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgBorrowTwinNormal(
          {required BoxHelloTraitTwinNormal arg,
          required String expect,
          dynamic hint});

  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgMutBorrowTwinNormal(
          {required BoxHelloTraitTwinNormal arg,
          required String expect,
          dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgOwnTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint});

  Future<BoxHelloTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnOneTwinNormal(
          {dynamic hint});

  Future<BoxHelloTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormal(
          {dynamic hint});

  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint});

  Future<EnumOpaqueTwinNormalArray5>
      crateApiRustOpaqueCreateArrayOpaqueEnumTwinNormal({dynamic hint});

  Future<OpaqueNestedTwinNormal> crateApiRustOpaqueCreateNestedOpaqueTwinNormal(
      {dynamic hint});

  Future<HideDataTwinNormal> crateApiRustOpaqueCreateOpaqueTwinNormal(
      {dynamic hint});

  Future<HideDataTwinNormal?> crateApiRustOpaqueCreateOptionOpaqueTwinNormal(
      {HideDataTwinNormal? opaque, dynamic hint});

  Future<FrbOpaqueReturnTwinNormal>
      crateApiRustOpaqueFrbGeneratorTestTwinNormal({dynamic hint});

  Future<void> crateApiRustOpaqueOpaqueArrayRunTwinNormal(
      {required HideDataTwinNormalArray2 data, dynamic hint});

  Future<HideDataTwinNormalArray2> crateApiRustOpaqueOpaqueArrayTwinNormal(
      {dynamic hint});

  Future<void> crateApiRustOpaqueOpaqueVecRunTwinNormal(
      {required List<HideDataTwinNormal> data, dynamic hint});

  Future<List<HideDataTwinNormal>> crateApiRustOpaqueOpaqueVecTwinNormal(
      {dynamic hint});

  Future<String> crateApiRustOpaqueRunEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque, dynamic hint});

  Future<void> crateApiRustOpaqueRunNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque, dynamic hint});

  Future<String> crateApiRustOpaqueRunNonCloneTwinNormal(
      {required NonCloneDataTwinNormal clone, dynamic hint});

  Future<String> crateApiRustOpaqueRunOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint});

  Future<String> crateApiRustOpaqueRunOpaqueWithDelayTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint});

  Future<String> crateApiRustOpaqueUnwrapRustOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint});

  FrbOpaqueSyncReturnTwinNormal
      crateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormal({dynamic hint});

  NonCloneDataTwinNormal crateApiRustOpaqueSyncSyncCreateNonCloneTwinNormal(
      {dynamic hint});

  HideDataAnotherTwinNormal crateApiRustOpaqueSyncSyncCreateOpaqueTwinNormal(
      {dynamic hint});

  HideDataAnotherTwinNormal?
      crateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormal({dynamic hint});

  Future<int> crateApiSimpleSimpleAdderTwinNormal(
      {required int a, required int b, dynamic hint});

  Future<Stream<String>> crateApiStreamFuncStreamReturnErrorTwinNormal(
      {dynamic hint});

  Future<Stream<String>> crateApiStreamFuncStreamReturnPanicTwinNormal(
      {dynamic hint});

  Stream<int> crateApiStreamFuncStreamSinkArgPositionTwinNormal(
      {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinNormal> crateApiStreamHandleStreamOfStructTwinNormal(
      {dynamic hint});

  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt1TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt2TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt3TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<U8Array2> crateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormal(
      {dynamic hint});

  Future<void> crateApiStreamStreamSinkInsideStructTwinNormal(
      {required MyStructContainingStreamSinkTwinNormal arg, dynamic hint});

  Future<void> crateApiStreamStreamSinkInsideVecTwinNormal(
      {required List<RustStreamSink<int>> arg, dynamic hint});

  Stream<String> crateApiStreamMiscFuncStreamRealisticTwinNormal(
      {required String arg, dynamic hint});

  Future<Stream<int>> crateApiStreamMiscStreamSinkDartAsyncTwinNormal(
      {dynamic hint});

  Future<StructWithOneFieldTwinNormal>
      crateApiStructureFuncStructWithOneFieldTwinNormal(
          {required StructWithOneFieldTwinNormal arg, dynamic hint});

  Future<StructWithTwoFieldTwinNormal>
      crateApiStructureFuncStructWithTwoFieldTwinNormal(
          {required StructWithTwoFieldTwinNormal arg, dynamic hint});

  Future<StructWithZeroFieldTwinNormal>
      crateApiStructureFuncStructWithZeroFieldTwinNormal(
          {required StructWithZeroFieldTwinNormal arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinNormal>
      crateApiStructureFuncTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinNormal>
      crateApiStructureFuncTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg, dynamic hint});

  Future<void> crateApiTupleTestTuple2TwinNormal(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)> crateApiTupleTestTupleTwinNormal(
      {(String, int)? value, dynamic hint});

  Future<int> crateApiTypeAliasHandleTypeAliasIdTwinNormal(
      {required int input, dynamic hint});

  Future<TestModelTwinNormal> crateApiTypeAliasHandleTypeAliasModelTwinNormal(
      {required int input, dynamic hint});

  Future<int> crateApiTypeAliasHandleTypeNestAliasIdTwinNormal(
      {required int input, dynamic hint});

  Future<FeatureUuidTwinNormal> crateApiUuidTypeHandleNestedUuidsTwinNormal(
      {required FeatureUuidTwinNormal ids, dynamic hint});

  Future<UuidValue> crateApiUuidTypeHandleUuidTwinNormal(
      {required UuidValue id, dynamic hint});

  Future<List<UuidValue>> crateApiUuidTypeHandleUuidsTwinNormal(
      {required List<UuidValue> ids, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnStringString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnStringString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxFnStringStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueSyncStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DroppableTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DroppableTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DroppableTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueStructWithDartCodeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SimpleOpaqueExternalStructWithMethod;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethod;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethodPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleA;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleAPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleB;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleB;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleBPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithImplBlockInMultiFile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFilePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_I32Ptr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BlobTwinNormal> crateApiArrayBoxedBlobTwinNormal(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayBoxedBlobTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<TestIdTwinNormal> crateApiArrayFuncTestIdTwinNormal(
      {required TestIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayFuncTestIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayFuncTestIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_test_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array5> crateApiArrayGetArrayTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayGetArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayGetArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_array_twin_normal",
        argNames: [],
      );

  @override
  Future<PointTwinNormalArray2> crateApiArrayGetComplexArrayTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayGetComplexArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayGetComplexArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_complex_array_twin_normal",
        argNames: [],
      );

  @override
  Future<double> crateApiArrayLastNumberTwinNormal(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayLastNumberTwinNormalConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayLastNumberTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "last_number_twin_normal",
        argNames: ["array"],
      );

  @override
  Future<TestIdTwinNormalArray2> crateApiArrayNestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_normal_array_4(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayNestedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayNestedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "nested_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinNormal> crateApiArrayNewMsgidTwinNormal(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayNewMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayNewMsgidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "new_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinNormal> crateApiArrayReturnBoxedFeedIdTwinNormal(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayReturnBoxedFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayReturnBoxedFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array8> crateApiArrayReturnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayReturnBoxedRawFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayReturnBoxedRawFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array1600> crateApiArrayUseBoxedBlobTwinNormal(
      {required BlobTwinNormal blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_normal(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayUseBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayUseBoxedBlobTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "use_boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<U8Array32> crateApiArrayUseMsgidTwinNormal(
      {required MessageIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiArrayUseMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiArrayUseMsgidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "use_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<int> crateApiAsyncMiscFuncAsyncSimpleAddTwinNormal(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncMiscFuncAsyncSimpleAddTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAsyncMiscFuncAsyncSimpleAddTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_async_simple_add_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<void> crateApiAsyncMiscFuncAsyncVoidTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncMiscFuncAsyncVoidTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAsyncMiscFuncAsyncVoidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_async_void_twin_normal",
        argNames: [],
      );

  @override
  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawn(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncSpawnSimpleUseAsyncSpawnConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAsyncSpawnSimpleUseAsyncSpawnConstMeta =>
      const TaskConstMeta(
        debugName: "simple_use_async_spawn",
        argNames: ["arg"],
      );

  @override
  Future<String> crateApiAsyncSpawnSimpleUseAsyncSpawnBlocking(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncSpawnSimpleUseAsyncSpawnBlockingConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAsyncSpawnSimpleUseAsyncSpawnBlockingConstMeta =>
      const TaskConstMeta(
        debugName: "simple_use_async_spawn_blocking",
        argNames: ["arg"],
      );

  @override
  Stream<String> crateApiAsyncSpawnSimpleUseAsyncSpawnLocal(
      {required String arg, dynamic hint}) {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAsyncSpawnSimpleUseAsyncSpawnLocalConstMeta,
      argValues: [arg, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiAsyncSpawnSimpleUseAsyncSpawnLocalConstMeta =>
      const TaskConstMeta(
        debugName: "simple_use_async_spawn_local",
        argNames: ["arg", "sink"],
      );

  @override
  Future<void> crateApiAttributeHandleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_normal(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAttributeHandleCustomizedStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiAttributeHandleCustomizedStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_customized_struct_twin_normal",
            argNames: ["val"],
          );

  @override
  Future<UserIdTwinNormal> crateApiAttributeNextUserIdTwinNormal(
      {UserIdTwinNormal userId = const UserIdTwinNormal(), dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_normal(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAttributeNextUserIdTwinNormalConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiAttributeNextUserIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "next_user_id_twin_normal",
        argNames: ["userId"],
      );

  @override
  void crateApiBenchmarkMiscBenchmarkVoidSemiSerialize({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBenchmarkMiscBenchmarkVoidSemiSerializeConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiBenchmarkMiscBenchmarkVoidSemiSerializeConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_void_semi_serialize",
        argNames: [],
      );

  @override
  Future<DateTime> crateApiChronoTypeDatetimeLocalTwinNormal(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Local(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeDatetimeLocalTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeDatetimeLocalTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "datetime_local_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<DateTime> crateApiChronoTypeDatetimeUtcTwinNormal(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeDatetimeUtcTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeDatetimeUtcTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "datetime_utc_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<Duration> crateApiChronoTypeDurationTwinNormal(
      {required Duration d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeDurationTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeDurationTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "duration_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<List<DateTime>> crateApiChronoTypeHandleDurationsTwinNormal(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Duration(durations, serializer);
        sse_encode_Chrono_Local(since, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeHandleDurationsTwinNormalConstMeta,
      argValues: [durations, since],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeHandleDurationsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_durations_twin_normal",
        argNames: ["durations", "since"],
      );

  @override
  Future<List<Duration>> crateApiChronoTypeHandleTimestampsTwinNormal(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Naive(timestamps, serializer);
        sse_encode_Chrono_Naive(epoch, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeHandleTimestampsTwinNormalConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeHandleTimestampsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_timestamps_twin_normal",
        argNames: ["timestamps", "epoch"],
      );

  @override
  Future<Duration> crateApiChronoTypeHowLongDoesItTakeTwinNormal(
      {required FeatureChronoTwinNormal mine, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_chrono_twin_normal(mine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiChronoTypeHowLongDoesItTakeTwinNormalConstMeta,
      argValues: [mine],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeHowLongDoesItTakeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "how_long_does_it_take_twin_normal",
        argNames: ["mine"],
      );

  @override
  Future<DateTime> crateApiChronoTypeNaivedatetimeTwinNormal(
      {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Naive(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeNaivedatetimeTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeNaivedatetimeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "naivedatetime_twin_normal",
        argNames: ["d"],
      );

  @override
  Future<DateTime?> crateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormal(
      {DateTime? d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormalConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiChronoTypeOptionalEmptyDatetimeUtcTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "optional_empty_datetime_utc_twin_normal",
            argNames: ["d"],
          );

  @override
  Future<TestChronoTwinNormal> crateApiChronoTypeTestChronoTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeTestChronoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeTestChronoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_chrono_twin_normal",
        argNames: [],
      );

  @override
  Future<TestChronoTwinNormal> crateApiChronoTypeTestPreciseChronoTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChronoTypeTestPreciseChronoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiChronoTypeTestPreciseChronoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_precise_chrono_twin_normal",
        argNames: [],
      );

  @override
  Future<void> crateApiCommentFunctionWithCommentsSlashStarStarTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentFunctionWithCommentsSlashStarStarTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentFunctionWithCommentsSlashStarStarTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "function_with_comments_slash_star_star_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormal(
          {required StructWithCommentsTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_normal_instance_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiCommentStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_normal_static_method_twin_normal",
            argNames: [],
          );

  @override
  void crateApiConstructorConstructorOpaqueStructTwinNormalCheck(
      {required ConstructorOpaqueStructTwinNormal that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueStructTwinNormalCheckConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueStructTwinNormalCheckConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueStructTwinNormal_check",
            argNames: ["that"],
          );

  @override
  Future<ConstructorOpaqueStructTwinNormal>
      crateApiConstructorConstructorOpaqueStructTwinNormalNew({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueStructTwinNormal_new",
            argNames: [],
          );

  @override
  void crateApiConstructorConstructorOpaqueSyncStructTwinNormalCheck(
      {required ConstructorOpaqueSyncStructTwinNormal that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalCheckConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalCheckConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueSyncStructTwinNormal_check",
            argNames: ["that"],
          );

  @override
  ConstructorOpaqueSyncStructTwinNormal
      crateApiConstructorConstructorOpaqueSyncStructTwinNormalNew(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorOpaqueSyncStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "ConstructorOpaqueSyncStructTwinNormal_new",
            argNames: [],
          );

  @override
  Future<ConstructorTranslatableStructTwinNormal>
      crateApiConstructorConstructorTranslatableStructTwinNormalNew(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_constructor_translatable_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorTranslatableStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorTranslatableStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "constructor_translatable_struct_twin_normal_new",
            argNames: [],
          );

  @override
  ConstructorTranslatableSyncStructTwinNormal
      crateApiConstructorConstructorTranslatableSyncStructTwinNormalNew(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_constructor_translatable_sync_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiConstructorConstructorTranslatableSyncStructTwinNormalNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiConstructorConstructorTranslatableSyncStructTwinNormalNewConstMeta =>
          const TaskConstMeta(
            debugName: "constructor_translatable_sync_struct_twin_normal_new",
            argNames: [],
          );

  @override
  Future<bool> crateApiCustomizationCheckInitDone({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCustomizationCheckInitDoneConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationCheckInitDoneConstMeta =>
      const TaskConstMeta(
        debugName: "check_init_done",
        argNames: [],
      );

  @override
  Future<void> crateApiCustomizationInitApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCustomizationInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationInitAppConstMeta =>
      const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiCustomizationMyInitOne({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiCustomizationMyInitOneConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationMyInitOneConstMeta =>
      const TaskConstMeta(
        debugName: "my_init_one",
        argNames: [],
      );

  @override
  Future<void> crateApiCustomizationMyInitTwo({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiCustomizationMyInitTwoConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiCustomizationMyInitTwoConstMeta =>
      const TaskConstMeta(
        debugName: "my_init_two",
        argNames: [],
      );

  @override
  Future<int>
      crateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required OpaqueStructWithDartCodeTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartCodeOpaqueStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "OpaqueStructWithDartCodeTwinNormal_normal_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormal(
          {required TranslatableStructWithDartCodeTwinNormal that,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartCodeTranslatableStructWithDartCodeTwinNormalNormalMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "translatable_struct_with_dart_code_twin_normal_normal_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiDartFnRustCallDartLoopbackTwinNormal(
      {required FutureOr<DemoStructForRustCallDartTwinNormal> Function(
              DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartLoopbackTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartLoopbackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_loopback_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> crateApiDartFnRustCallDartMultiTimesTwinNormal(
      {required FutureOr<void> Function() callback,
      required int numTimes,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        sse_encode_i_32(numTimes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartMultiTimesTwinNormalConstMeta,
      argValues: [callback, numTimes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartMultiTimesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_multi_times_twin_normal",
        argNames: ["callback", "numTimes"],
      );

  @override
  Future<void> crateApiDartFnRustCallDartOneArgTwinNormal(
      {required FutureOr<void> Function(String) callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartOneArgTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartOneArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_one_arg_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> crateApiDartFnRustCallDartReturnTwinNormal(
      {required FutureOr<String> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_String(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartReturnTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_return_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> crateApiDartFnRustCallDartSimpleTwinNormal(
      {required FutureOr<void> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartSimpleTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartSimpleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_simple_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> crateApiDartFnRustCallDartTwoArgsTwinNormal(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartFnRustCallDartTwoArgsTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartFnRustCallDartTwoArgsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_two_args_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> crateApiDartFnRustCallDartWithDartOpaqueArgTwinNormal(
      {required Object input,
      required FutureOr<void> Function(Object) callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(input, serializer);
        sse_encode_DartFn_Inputs_DartOpaque_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartFnRustCallDartWithDartOpaqueArgTwinNormalConstMeta,
      argValues: [input, callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartFnRustCallDartWithDartOpaqueArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_arg_twin_normal",
            argNames: ["input", "callback"],
          );

  @override
  Future<Object> crateApiDartFnRustCallDartWithDartOpaqueResultTwinNormal(
      {required FutureOr<Object> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_DartOpaque(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDartFnRustCallDartWithDartOpaqueResultTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartFnRustCallDartWithDartOpaqueResultTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_result_twin_normal",
            argNames: ["callback"],
          );

  @override
  Future<String> crateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueAsyncAcceptDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "async_accept_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<List<Object>> crateApiDartOpaqueCloneDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueCloneDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueCloneDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<EnumDartOpaqueTwinNormal>
      crateApiDartOpaqueCreateEnumDartOpaqueTwinNormal(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueCreateEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueCreateEnumDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "create_enum_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<DartOpaqueNestedTwinNormal>
      crateApiDartOpaqueCreateNestedDartOpaqueTwinNormal(
          {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueCreateNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueCreateNestedDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_dart_opaque_twin_normal",
            argNames: ["opaque1", "opaque2"],
          );

  @override
  Future<void> crateApiDartOpaqueDropStaticDartOpaqueTwinNormal(
      {required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 72, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueDropStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueDropStaticDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "drop_static_dart_opaque_twin_normal",
            argNames: ["id"],
          );

  @override
  Future<void> crateApiDartOpaqueGetEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueGetEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueGetEnumDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> crateApiDartOpaqueGetNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_normal(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueGetNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueGetNestedDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> crateApiDartOpaqueLoopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackArrayGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackArrayGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1> crateApiDartOpaqueLoopBackArrayTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackArrayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> crateApiDartOpaqueLoopBackOptionGetTwinNormal(
      {Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackOptionGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackOptionGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object?> crateApiDartOpaqueLoopBackOptionTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackOptionTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackOptionTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object> crateApiDartOpaqueLoopBackTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> crateApiDartOpaqueLoopBackVecGetTwinNormal(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackVecGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackVecGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> crateApiDartOpaqueLoopBackVecTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueLoopBackVecTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueLoopBackVecTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> crateApiDartOpaquePanicUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaquePanicUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaquePanicUnwrapDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "panic_unwrap_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<void> crateApiDartOpaqueSetStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSetStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueSetStaticDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_normal",
        argNames: ["id", "opaque"],
      );

  @override
  String crateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncSyncAcceptDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_accept_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Object crateApiDartOpaqueSyncSyncLoopbackTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiDartOpaqueSyncSyncLoopbackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_loopback_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object? crateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 78)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncSyncOptionDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_option_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Object? crateApiDartOpaqueSyncSyncOptionLoopbackTwinNormal(
      {Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncSyncOptionLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncSyncOptionLoopbackTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_option_loopback_twin_normal",
            argNames: ["opaque"],
          );

  @override
  String crateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDartOpaqueSyncUnwrapDartOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "unwrap_dart_opaque_twin_normal",
            argNames: ["opaque"],
          );

  @override
  Future<StructInUpperLevel>
      crateApiDeliberateNameConflictTestDuplicatedModuleNames(
          {required StructInLowerLevel s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_in_lower_level(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_in_upper_level,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDeliberateNameConflictTestDuplicatedModuleNamesConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDeliberateNameConflictTestDuplicatedModuleNamesConstMeta =>
          const TaskConstMeta(
            debugName: "test_duplicated_module_names",
            argNames: ["s"],
          );

  @override
  Stream<int> crateApiDroppingDroppableTwinNormalCreateStream(
      {required DroppableTwinNormal that, dynamic hint}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
            that, serializer);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 82, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDroppingDroppableTwinNormalCreateStreamConstMeta,
      argValues: [that, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiDroppingDroppableTwinNormalCreateStreamConstMeta =>
      const TaskConstMeta(
        debugName: "DroppableTwinNormal_create_stream",
        argNames: ["that", "sink"],
      );

  @override
  Future<int> crateApiDroppingDroppableTwinNormalGetDropCountTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 83, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDroppingDroppableTwinNormalGetDropCountTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDroppingDroppableTwinNormalGetDropCountTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinNormal_get_drop_count_twin_normal",
            argNames: [],
          );

  @override
  Future<DroppableTwinNormal> crateApiDroppingDroppableTwinNormalNewTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDroppingDroppableTwinNormalNewTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDroppingDroppableTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinNormal_new_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiDroppingDroppableTwinNormalSimpleMethodTwinNormal(
      {required DroppableTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiDroppingDroppableTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiDroppingDroppableTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinNormal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<EnumSimpleTwinNormal> crateApiEnumerationFuncEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 84, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumSimpleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationFuncEnumSimpleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_simple_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithDiscriminantTwinNormal>
      crateApiEnumerationFuncEnumWithDiscriminantTwinNormal(
          {required EnumWithDiscriminantTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_with_discriminant_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 88, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_discriminant_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiEnumerationFuncEnumWithDiscriminantTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithDiscriminantTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_discriminant_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemMixedTwinNormal>
      crateApiEnumerationFuncEnumWithItemMixedTwinNormal(
          {required EnumWithItemMixedTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 85, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumWithItemMixedTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithItemMixedTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_mixed_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemStructTwinNormal>
      crateApiEnumerationFuncEnumWithItemStructTwinNormal(
          {required EnumWithItemStructTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 87, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumWithItemStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithItemStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_struct_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemTupleTwinNormal>
      crateApiEnumerationFuncEnumWithItemTupleTwinNormal(
          {required EnumWithItemTupleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 86, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationFuncEnumWithItemTupleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationFuncEnumWithItemTupleTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_tuple_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<WeekdaysTwinNormal> crateApiEnumerationHandleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_normal(weekday, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 91, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationHandleEnumParameterTwinNormalConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiEnumerationHandleEnumParameterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_parameter_twin_normal",
            argNames: ["weekday"],
          );

  @override
  Future<KitchenSinkTwinNormal> crateApiEnumerationHandleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_normal(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 93, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationHandleEnumStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationHandleEnumStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_struct_twin_normal",
        argNames: ["val"],
      );

  @override
  Future<WeekdaysTwinNormal?> crateApiEnumerationHandleReturnEnumTwinNormal(
      {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 90, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationHandleReturnEnumTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationHandleReturnEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_return_enum_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<MeasureTwinNormal?> crateApiEnumerationMultiplyByTenTwinNormal(
      {required MeasureTwinNormal measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_normal(measure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 92, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationMultiplyByTenTwinNormalConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationMultiplyByTenTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "multiply_by_ten_twin_normal",
        argNames: ["measure"],
      );

  @override
  Future<Uint8List> crateApiEnumerationPrintNoteTwinNormal(
      {required NoteTwinNormal note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_normal(note, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 89, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnumerationPrintNoteTwinNormalConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiEnumerationPrintNoteTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "print_note_twin_normal",
        argNames: ["note"],
      );

  @override
  Future<void> crateApiEventListenerCloseEventListenerTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 95, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEventListenerCloseEventListenerTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiEventListenerCloseEventListenerTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "close_event_listener_twin_normal",
            argNames: [],
          );

  @override
  void crateApiEventListenerCreateEventSyncTwinNormal(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 97)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEventListenerCreateEventSyncTwinNormalConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiEventListenerCreateEventSyncTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_event_sync_twin_normal",
        argNames: ["address", "payload"],
      );

  @override
  Future<void> crateApiEventListenerCreateEventTwinNormal(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 96, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEventListenerCreateEventTwinNormalConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiEventListenerCreateEventTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_event_twin_normal",
        argNames: ["address", "payload"],
      );

  @override
  Future<String> crateApiEventListenerEventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_event_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 98, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiEventListenerEventTwinNormalAsStringTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiEventListenerEventTwinNormalAsStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "event_twin_normal_as_string_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<Stream<EventTwinNormal>>
      crateApiEventListenerRegisterEventListenerTwinNormal(
          {dynamic hint}) async {
    final listener = RustStreamSink<EventTwinNormal>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_event_twin_normal_Sse(listener, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 94, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiEventListenerRegisterEventListenerTwinNormalConstMeta,
      argValues: [listener],
      apiImpl: this,
      hint: hint,
    ));
    return listener.stream;
  }

  TaskConstMeta
      get kCrateApiEventListenerRegisterEventListenerTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "register_event_listener_twin_normal",
            argNames: ["listener"],
          );

  @override
  Future<void> crateApiExceptionCustomEnumErrorPanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 103, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionCustomEnumErrorPanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiExceptionCustomEnumErrorPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<int> crateApiExceptionCustomEnumErrorReturnErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 104, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomEnumErrorReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomEnumErrorReturnErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionCustomEnumErrorReturnOkTwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 102, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionCustomEnumErrorReturnOkTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomEnumErrorReturnOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_ok_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiExceptionCustomNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 105, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomNestedErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomNestedErrorReturnErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_nested_error_return_error_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiExceptionCustomStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 106, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructErrorReturnErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_error_return_error_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<CustomStructTwinNormal>
      crateApiExceptionCustomStructTwinNormalNewTwinNormal(
          {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 123, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExceptionCustomStructTwinNormalNewTwinNormalConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_twin_normal_new_twin_normal",
            argNames: ["message"],
          );

  @override
  Future<void>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
          {required CustomStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 126, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_nonstatic_return_custom_struct_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
          {required CustomStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 127, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_nonstatic_return_custom_struct_ok_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 124, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_static_return_custom_struct_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 125, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_normal_static_return_custom_struct_ok_twin_normal",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionFuncReturnErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 99, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionFuncReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiExceptionFuncReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> crateApiExceptionFuncTypeFalliblePanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 100, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionFuncTypeFalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionFuncTypeFalliblePanicTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_fallible_panic_twin_normal",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionFuncTypeInfalliblePanicTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 101, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExceptionFuncTypeInfalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionFuncTypeInfalliblePanicTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_infallible_panic_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionPanicWithCustomResultTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 116, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionPanicWithCustomResultTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionPanicWithCustomResultTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "panic_with_custom_result_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionReturnCustomNestedError1TwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 110, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomNestedError1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomNestedError1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionReturnCustomNestedError1Variant1TwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 111, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionReturnCustomNestedError1Variant1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomNestedError1Variant1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_variant1_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionReturnCustomNestedError2TwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 112, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomNestedError2TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomNestedError2TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_2_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiExceptionReturnCustomStructErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 113, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int> crateApiExceptionReturnCustomStructOkTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 114, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnCustomStructOkTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_normal",
        argNames: [],
      );

  @override
  Future<int> crateApiExceptionReturnErrCustomErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 107, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnErrCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> crateApiExceptionReturnErrorVariantTwinNormal(
      {required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 109, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnErrorVariantTwinNormalConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnErrorVariantTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_normal",
        argNames: ["variant"],
      );

  @override
  Future<int> crateApiExceptionReturnOkCustomErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 108, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kCrateApiExceptionReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiExceptionReturnOkCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Future<SomeStructTwinNormal>
      crateApiExceptionSomeStructTwinNormalNewTwinNormal(
          {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 118, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExceptionSomeStructTwinNormalNewTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "some_struct_twin_normal_new_twin_normal",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
          {required SomeStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 121, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_non_static_return_err_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
          {required SomeStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 122, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_non_static_return_ok_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 119, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_static_return_err_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int>
      crateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 120, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kCrateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExceptionSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_normal_static_return_ok_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<Stream<String>> crateApiExceptionStreamSinkThrowAnyhowTwinNormal(
      {dynamic hint}) async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionStreamSinkThrowAnyhowTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiExceptionStreamSinkThrowAnyhowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_throw_anyhow_twin_normal",
            argNames: ["sink"],
          );

  @override
  Future<void> crateApiExceptionThrowAnyhowTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 115, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiExceptionThrowAnyhowTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiExceptionThrowAnyhowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "throw_anyhow_twin_normal",
        argNames: [],
      );

  @override
  SimpleOpaqueExternalStructWithMethod
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodNew(
          {required String a, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 129)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodNewConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodNewConstMeta =>
          const TaskConstMeta(
            debugName: "SimpleOpaqueExternalStructWithMethod_new",
            argNames: ["a"],
          );

  @override
  Future<String>
      crateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethod(
          {required SimpleOpaqueExternalStructWithMethod that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 130, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethodConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalImplSimpleOpaqueExternalStructWithMethodSimpleExternalMethodConstMeta =>
          const TaskConstMeta(
            debugName:
                "SimpleOpaqueExternalStructWithMethod_simple_external_method",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethod(
          {required SimpleTranslatableExternalStructWithMethod that,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_translatable_external_struct_with_method(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 128, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethodConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalImplSimpleTranslatableExternalStructWithMethodSimpleExternalMethodConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_translatable_external_struct_with_method_simple_external_method",
            argNames: ["that"],
          );

  @override
  Future<NewSimpleStruct>
      crateApiExternalTypeInCrateCallNewModuleSystemTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 134, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalTypeInCrateCallNewModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateCallNewModuleSystemTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "call_new_module_system_twin_normal",
            argNames: [],
          );

  @override
  Future<OldSimpleStruct>
      crateApiExternalTypeInCrateCallOldModuleSystemTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 133, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalTypeInCrateCallOldModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateCallOldModuleSystemTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "call_old_module_system_twin_normal",
            argNames: [],
          );

  @override
  Future<bool> crateApiExternalTypeInCrateUseImportedEnumTwinNormal(
      {required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 132, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExternalTypeInCrateUseImportedEnumTwinNormalConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateUseImportedEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_enum_twin_normal",
            argNames: ["myEnum"],
          );

  @override
  Future<bool> crateApiExternalTypeInCrateUseImportedStructTwinNormal(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 131, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiExternalTypeInCrateUseImportedStructTwinNormalConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiExternalTypeInCrateUseImportedStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_struct_twin_normal",
            argNames: ["myStruct"],
          );

  @override
  Future<AnotherMacroStructTwinNormal>
      crateApiInsideMacroAnotherMacroStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 136, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_another_macro_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInsideMacroAnotherMacroStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiInsideMacroAnotherMacroStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "another_macro_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<MacroStruct> crateApiInsideMacroFuncMacroStructTwinNormal(
      {required MacroStruct arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_macro_struct(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 135, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_macro_struct,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInsideMacroFuncMacroStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiInsideMacroFuncMacroStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_macro_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> crateApiMapAndSetFuncHashMapI32I32TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 137, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapI32I32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMapAndSetFuncHashMapI32I32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_i32_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, Uint8List>>
      crateApiMapAndSetFuncHashMapStringBytesTwinNormal(
          {required Map<String, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 141, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapStringBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, KitchenSinkTwinNormal>>
      crateApiMapAndSetFuncHashMapStringComplexEnumTwinNormal(
          {required Map<String, KitchenSinkTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 144, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMapAndSetFuncHashMapStringComplexEnumTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringComplexEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_complex_enum_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, EnumSimpleTwinNormal>>
      crateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormal(
          {required Map<String, EnumSimpleTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 143, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringSimpleEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_simple_enum_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, String>>
      crateApiMapAndSetFuncHashMapStringStringTwinNormal(
          {required Map<String, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 139, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapStringStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, MySize>>
      crateApiMapAndSetFuncHashMapStringStructTwinNormal(
          {required Map<String, MySize> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 142, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashMapStringStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMapAndSetFuncHashMapStringStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_struct_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Set<int>> crateApiMapAndSetFuncHashSetI32TwinNormal(
      {required Set<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 138, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashSetI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMapAndSetFuncHashSetI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_set_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Set<String>> crateApiMapAndSetFuncHashSetStringTwinNormal(
      {required Set<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 140, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMapAndSetFuncHashSetStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMapAndSetFuncHashSetStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_set_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> crateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 166, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodStaticGetterOnlyTwinNormalStaticGetterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "StaticGetterOnlyTwinNormal_static_getter_twin_normal",
            argNames: [],
          );

  @override
  Future<String>
      crateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormal(
          {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 149, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_concatenate_static_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<String> crateApiMethodConcatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 148, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalConcatenateTwinNormalConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalConcatenateTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_normal_concatenate_twin_normal",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal(
          {dynamic hint}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 154, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_static_stream_sink_single_arg_twin_normal",
            argNames: ["sink"],
          );

  @override
  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<Log2TwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 153, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_static_stream_sink_twin_normal",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<int>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
          {required ConcatenateWithTwinNormal that, dynamic hint}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 152, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta,
      argValues: [that, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_stream_sink_at_1_twin_normal",
            argNames: ["that", "sink"],
          );

  @override
  Stream<Log2TwinNormal>
      crateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max,
          dynamic hint}) {
    final sink = RustStreamSink<Log2TwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 151, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta,
      argValues: [that, key, max, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_normal_handle_some_stream_sink_twin_normal",
            argNames: ["that", "key", "max", "sink"],
          );

  @override
  Future<ConcatenateWithTwinNormal>
      crateApiMethodConcatenateWithTwinNormalNewTwinNormal(
          {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 147, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodConcatenateWithTwinNormalNewTwinNormalConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_normal_new_twin_normal",
            argNames: ["a"],
          );

  @override
  Future<String> crateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 150, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodConcatenateWithTwinNormalSimpleGetterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_normal_simple_getter_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<SumWithTwinNormalArray3> crateApiMethodGetSumArrayTwinNormal(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 146, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_normal_array_3,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodGetSumArrayTwinNormalConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMethodGetSumArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_sum_array_twin_normal",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinNormal> crateApiMethodGetSumStructTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 145, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodGetSumStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMethodGetSumStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_sum_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<String> crateApiMethodMyCallableTwinNormalCall(
      {required MyCallableTwinNormal that, required String two, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_callable_twin_normal(that, serializer);
        sse_encode_String(two, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 156, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodMyCallableTwinNormalCallConstMeta,
      argValues: [that, two],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMethodMyCallableTwinNormalCallConstMeta =>
      const TaskConstMeta(
        debugName: "my_callable_twin_normal_call",
        argNames: ["that", "two"],
      );

  @override
  Future<SimpleEnumTwinNormal>
      crateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormal(
          {required String one, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 162, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormalConstMeta,
      argValues: [one],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleEnumTwinNormalReturnSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_normal_return_self_twin_normal",
            argNames: ["one"],
          );

  @override
  Future<String> crateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormal(
      {required SimpleEnumTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_enum_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 163, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleEnumTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_normal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormal(
      {required SimplePrimitiveEnumTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_simple_primitive_enum_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 164, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimplePrimitiveEnumTwinNormalSimpleMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_primitive_enum_twin_normal_simple_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiMethodSimpleStructTwinNormalArgSelfTwinNormal(
      {required SimpleStructTwinNormal a,
      required SimpleStructTwinNormal b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_normal(a, serializer);
        sse_encode_box_autoadd_simple_struct_twin_normal(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 160, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalArgSelfTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalArgSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_arg_self_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<String> crateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormal(
      {required SimpleStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 158, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalReceiverBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_receiver_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormal(
      {required SimpleStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 159, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalReceiverOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_receiver_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<SimpleStructTwinNormal>
      crateApiMethodSimpleStructTwinNormalReturnSelfTwinNormal(
          {required String one, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 157, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalReturnSelfTwinNormalConstMeta,
      argValues: [one],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalReturnSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_return_self_twin_normal",
            argNames: ["one"],
          );

  @override
  Future<List<String>> crateApiMethodSimpleStructTwinNormalVecSelfTwinNormal(
      {required List<SimpleStructTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_simple_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 161, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodSimpleStructTwinNormalVecSelfTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodSimpleStructTwinNormalVecSelfTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_normal_vec_self_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormal(
      {required int a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 165, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormalConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMethodStaticOnlyTwinNormalStaticMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "static_only_twin_normal_static_method_twin_normal",
            argNames: ["a"],
          );

  @override
  Future<int> crateApiMethodSumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_normal(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 155, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMethodSumWithTwinNormalSumTwinNormalConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMethodSumWithTwinNormalSumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sum_with_twin_normal_sum_twin_normal",
        argNames: ["that", "y", "z"],
      );

  @override
  Stream<ApplicationSettings> crateApiMirrorAppSettingsStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<ApplicationSettings>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 170, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorAppSettingsStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorAppSettingsStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<List<ApplicationSettings>>
      crateApiMirrorAppSettingsVecStreamTwinNormal({dynamic hint}) {
    final sink = RustStreamSink<List<ApplicationSettings>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 171, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorAppSettingsVecStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorAppSettingsVecStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Future<int?> crateApiMirrorFirstNumberTwinNormal(
      {required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 177, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorFirstNumberTwinNormalConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorFirstNumberTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "first_number_twin_normal",
        argNames: ["nums"],
      );

  @override
  Future<int?> crateApiMirrorFirstSequenceTwinNormal(
      {required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 178, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorFirstSequenceTwinNormalConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorFirstSequenceTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "first_sequence_twin_normal",
        argNames: ["seqs"],
      );

  @override
  Future<ApplicationSettings> crateApiMirrorGetAppSettingsTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 167, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorGetAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorGetAppSettingsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationSettings> crateApiMirrorGetFallibleAppSettingsTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 168, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMirrorGetFallibleAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorGetFallibleAppSettingsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationMessage> crateApiMirrorGetMessageTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 174, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorGetMessageTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorGetMessageTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_message_twin_normal",
        argNames: [],
      );

  @override
  Future<bool> crateApiMirrorIsAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 169, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorIsAppEmbeddedTwinNormalConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorIsAppEmbeddedTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "is_app_embedded_twin_normal",
        argNames: ["appSettings"],
      );

  @override
  Stream<ApplicationModeArray2> crateApiMirrorMirrorArrayEnumStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<ApplicationModeArray2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 192, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorArrayEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorArrayEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_array_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<ApplicationMode> crateApiMirrorMirrorEnumStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<ApplicationMode>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 187, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<Map<int, ApplicationMode>> crateApiMirrorMirrorMapEnumStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<Map<int, ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Map_u_8_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 190, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorMapEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorMapEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_map_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<ApplicationMode?> crateApiMirrorMirrorOptionEnumStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<ApplicationMode?>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 188, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorOptionEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorOptionEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_option_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<Set<ApplicationMode>> crateApiMirrorMirrorSetEnumStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<Set<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Set_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 191, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorSetEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorSetEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_set_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<MirrorStructTwinNormal> crateApiMirrorMirrorStructStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<MirrorStructTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mirror_struct_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 172, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorStructStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorStructStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiMirrorMirrorTupleStreamTwinNormal({dynamic hint}) {
    final sink = RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 173, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorTupleStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorTupleStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<List<ApplicationMode>> crateApiMirrorMirrorVecEnumStreamTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<List<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 189, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorMirrorVecEnumStreamTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMirrorMirrorVecEnumStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_vec_enum_stream_twin_normal",
        argNames: ["sink"],
      );

  @override
  Future<Numbers> crateApiMirrorRepeatNumberTwinNormal(
      {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 175, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorRepeatNumberTwinNormalConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorRepeatNumberTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_number_twin_normal",
        argNames: ["num", "times"],
      );

  @override
  Future<Sequences> crateApiMirrorRepeatSequenceTwinNormal(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 176, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorRepeatSequenceTwinNormalConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorRepeatSequenceTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_sequence_twin_normal",
        argNames: ["seq", "times"],
      );

  @override
  Future<ContainsMirroredSubStructTwinNormal>
      crateApiMirrorTestContainsMirroredSubStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 185, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_contains_mirrored_sub_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMirrorTestContainsMirroredSubStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestContainsMirroredSubStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_contains_mirrored_sub_struct_twin_normal",
            argNames: [],
          );

  @override
  Future<List<RawStringMirrored>>
      crateApiMirrorTestFallibleOfRawStringMirroredTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 183, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiMirrorTestFallibleOfRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestFallibleOfRawStringMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_fallible_of_raw_string_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<StructWithHashMap>
      crateApiMirrorTestHashmapWithMirroredValueTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 186, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_hash_map,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestHashmapWithMirroredValueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestHashmapWithMirroredValueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_hashmap_with_mirrored_value_twin_normal",
            argNames: [],
          );

  @override
  Future<List<RawStringEnumMirrored>>
      crateApiMirrorTestListOfNestedEnumsMirroredTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 184, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMirrorTestListOfNestedEnumsMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestListOfNestedEnumsMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_nested_enums_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<ListOfNestedRawStringMirrored>
      crateApiMirrorTestListOfRawNestedStringMirroredTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 182, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMirrorTestListOfRawNestedStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestListOfRawNestedStringMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_raw_nested_string_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<NestedRawStringMirrored>
      crateApiMirrorTestNestedRawStringMirroredTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 180, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestNestedRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestNestedRawStringMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_nested_raw_string_mirrored_twin_normal",
            argNames: [],
          );

  @override
  Future<RawStringEnumMirrored>
      crateApiMirrorTestRawStringEnumMirroredTwinNormal(
          {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 181, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestRawStringEnumMirroredTwinNormalConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMirrorTestRawStringEnumMirroredTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_enum_mirrored_twin_normal",
            argNames: ["nested"],
          );

  @override
  Future<RawStringMirrored> crateApiMirrorTestRawStringMirroredTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 179, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMirrorTestRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMirrorTestRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<BigBuffersTwinNormal> crateApiMiscExampleHandleBigBuffersTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 196, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleBigBuffersTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleBigBuffersTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_big_buffers_twin_normal",
        argNames: [],
      );

  @override
  Future<MyTreeNodeTwinNormal> crateApiMiscExampleHandleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_normal(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 193, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleComplexStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscExampleHandleComplexStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_complex_struct_twin_normal",
            argNames: ["s"],
          );

  @override
  Future<MyNestedStructTwinNormal>
      crateApiMiscExampleHandleNestedStructTwinNormal(
          {required MyNestedStructTwinNormal s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_normal(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 195, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleNestedStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleNestedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<String> crateApiMiscExampleHandleStringTwinNormal(
      {required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 199, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleStringTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<MySize> crateApiMiscExampleHandleStructTwinNormal(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 201, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleStructTwinNormalConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_struct_twin_normal",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<Uint8List> crateApiMiscExampleHandleVecU8TwinNormal(
      {required List<int> v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 200, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleHandleVecU8TwinNormalConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleHandleVecU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_u8_twin_normal",
        argNames: ["v"],
      );

  @override
  Future<List<WeekdaysTwinNormal>>
      crateApiMiscExampleListOfPrimitiveEnumsTwinNormal(
          {required List<WeekdaysTwinNormal> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_normal(weekdays, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 194, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleListOfPrimitiveEnumsTwinNormalConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscExampleListOfPrimitiveEnumsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "list_of_primitive_enums_twin_normal",
            argNames: ["weekdays"],
          );

  @override
  Future<AbcTwinNormal> crateApiMiscExampleTestAbcEnumTwinNormal(
      {required AbcTwinNormal abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_normal(abc, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 197, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleTestAbcEnumTwinNormalConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleTestAbcEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_abc_enum_twin_normal",
        argNames: ["abc"],
      );

  @override
  Future<StructWithEnumTwinNormal>
      crateApiMiscExampleTestStructWithEnumTwinNormal(
          {required StructWithEnumTwinNormal se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_normal(se, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 198, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscExampleTestStructWithEnumTwinNormalConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscExampleTestStructWithEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_normal",
        argNames: ["se"],
      );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionA(
          {required StructInMiscNoTwinExampleA that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 203, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionAConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionAConstMeta =>
          const TaskConstMeta(
            debugName: "StructInMiscNoTwinExampleA_sample_function_a",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInA(
          {required StructWithImplBlockInMultiFile that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 204, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInAConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInAConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithImplBlockInMultiFile_method_in_a",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleASameFunctionNameInDifferentFiles(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 202, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleASameFunctionNameInDifferentFilesConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleASameFunctionNameInDifferentFilesConstMeta =>
          const TaskConstMeta(
            debugName: "same_function_name_in_different_files",
            argNames: [],
          );

  @override
  Future<StructInMiscNoTwinExampleA>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleA(
          {required StructInMiscNoTwinExampleB that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 206, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleAConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleAConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructInMiscNoTwinExampleB_get_struct_in_misc_no_twin_example_a",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionB(
          {required StructInMiscNoTwinExampleB that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 207, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionBConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleBStructInMiscNoTwinExampleBSampleFunctionBConstMeta =>
          const TaskConstMeta(
            debugName: "StructInMiscNoTwinExampleB_sample_function_b",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiMiscNoTwinExampleBStructWithImplBlockInMultiFileMethodInB(
          {required StructWithImplBlockInMultiFile that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 208, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleBStructWithImplBlockInMultiFileMethodInBConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleBStructWithImplBlockInMultiFileMethodInBConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithImplBlockInMultiFile_method_in_b",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiMiscNoTwinExampleBSameFunctionNameInDifferentFiles(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 205, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMiscNoTwinExampleBSameFunctionNameInDifferentFilesConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiMiscNoTwinExampleBSameFunctionNameInDifferentFilesConstMeta =>
          const TaskConstMeta(
            debugName: "same_function_name_in_different_files",
            argNames: [],
          );

  @override
  Future<EmptyTwinNormal> crateApiMiscTypeEmptyStructTwinNormal(
      {required EmptyTwinNormal empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_normal(empty, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 212, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeEmptyStructTwinNormalConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeEmptyStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "empty_struct_twin_normal",
        argNames: ["empty"],
      );

  @override
  Future<void> crateApiMiscTypeFuncReturnUnitTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 209, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeFuncReturnUnitTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeFuncReturnUnitTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_unit_twin_normal",
        argNames: [],
      );

  @override
  Future<List<MySize>> crateApiMiscTypeHandleListOfStructTwinNormal(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 210, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeHandleListOfStructTwinNormalConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeHandleListOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_normal",
        argNames: ["l"],
      );

  @override
  Future<List<String>> crateApiMiscTypeHandleStringListTwinNormal(
      {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 211, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMiscTypeHandleStringListTwinNormalConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiMiscTypeHandleStringListTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_list_twin_normal",
        argNames: ["names"],
      );

  @override
  Future<NewTypeIntTwinNormal> crateApiNewtypePatternHandleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 213, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNewtypePatternHandleNewtypeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiNewtypePatternHandleNewtypeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_newtype_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double> crateApiOptionalHandleIncrementBoxedOptionalTwinNormal(
      {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 217, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOptionalHandleIncrementBoxedOptionalTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalHandleIncrementBoxedOptionalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_increment_boxed_optional_twin_normal",
            argNames: ["opt"],
          );

  @override
  Future<String> crateApiOptionalHandleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_normal(structbox, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 219, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionBoxArgumentsTwinNormalConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalHandleOptionBoxArgumentsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_option_box_arguments_twin_normal",
            argNames: [
              "i8Box",
              "u8Box",
              "i32Box",
              "i64Box",
              "f64Box",
              "boolbox",
              "structbox"
            ],
          );

  @override
  Future<ExoticOptionalsTwinNormal?>
      crateApiOptionalHandleOptionalIncrementTwinNormal(
          {ExoticOptionalsTwinNormal? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_normal(
            opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 216, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionalIncrementTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalHandleOptionalIncrementTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_increment_twin_normal",
            argNames: ["opt"],
          );

  @override
  Future<double?> crateApiOptionalHandleOptionalReturnTwinNormal(
      {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 214, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionalReturnTwinNormalConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOptionalHandleOptionalReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_normal",
        argNames: ["left", "right"],
      );

  @override
  Future<ElementTwinNormal?> crateApiOptionalHandleOptionalStructTwinNormal(
      {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 215, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleOptionalStructTwinNormalConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOptionalHandleOptionalStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_normal",
        argNames: ["document"],
      );

  @override
  Future<OptVecsTwinNormal> crateApiOptionalHandleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_normal(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 218, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOptionalHandleVecOfOptsTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOptionalHandleVecOfOptsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<int?> crateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormal(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 220, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiOptionalPrimitiveMiscPrimitiveOptionalTypesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_optional_types_twin_normal",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  Future<int> crateApiOwnershipBorrowI32TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 223, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String> crateApiOwnershipBorrowStrTwinNormal(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 222, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowStrTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowStrTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_str_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String> crateApiOwnershipBorrowStringTwinNormal(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 221, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<SimpleStructForBorrowTwinNormal>
      crateApiOwnershipBorrowStructTwinNormal(
          {required SimpleStructForBorrowTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_for_borrow_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 224, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_for_borrow_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiOwnershipBorrowStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiOwnershipBorrowStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "borrow_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<VecOfPrimitivePackTwinNormal>
      crateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormal(
          {required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 225, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormalConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPrimitiveListMiscHandleVecOfPrimitiveTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_primitive_twin_normal",
            argNames: ["n"],
          );

  @override
  Future<int> crateApiPrimitiveMiscPrimitiveTypesTwinNormal(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 226, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrimitiveMiscPrimitiveTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPrimitiveMiscPrimitiveTypesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_types_twin_normal",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int> crateApiPrimitiveMiscPrimitiveU32TwinNormal(
      {required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 227, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPrimitiveMiscPrimitiveU32TwinNormalConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiPrimitiveMiscPrimitiveU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_u32_twin_normal",
        argNames: ["myU32"],
      );

  @override
  Future<BlobTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsync(
          {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 232, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncBoxedBlobTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "boxed_blob_twin_rust_async",
            argNames: ["blob"],
          );

  @override
  Future<TestIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsync(
          {required TestIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 236, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncFuncTestIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_test_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  Future<U8Array5> crateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 228, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncGetArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_array_twin_rust_async",
            argNames: [],
          );

  @override
  Future<PointTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 229, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncGetComplexArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_complex_array_twin_rust_async",
            argNames: [],
          );

  @override
  Future<double> crateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsync(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 237, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsyncConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncLastNumberTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "last_number_twin_rust_async",
            argNames: ["array"],
          );

  @override
  Future<TestIdTwinRustAsyncArray2>
      crateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsync(
          {required TestIdTwinRustAsyncArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_rust_async_array_4(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 238, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncNestedIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "nested_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  Future<MessageIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsync(
          {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 230, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncNewMsgidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "new_msgid_twin_rust_async",
            argNames: ["id"],
          );

  @override
  Future<FeedIdTwinRustAsync>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsync(
          {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 234, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedFeedIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_feed_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  Future<U8Array8>
      crateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsync(
          {required FeedIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 235, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncReturnBoxedRawFeedIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_raw_feed_id_twin_rust_async",
            argNames: ["id"],
          );

  @override
  Future<U8Array1600>
      crateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsync(
          {required BlobTwinRustAsync blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_rust_async(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 233, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncUseBoxedBlobTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_boxed_blob_twin_rust_async",
            argNames: ["blob"],
          );

  @override
  Future<U8Array32> crateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 231, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinRustAsyncUseMsgidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_msgid_twin_rust_async",
            argNames: ["id"],
          );

  @override
  BlobTwinSync crateApiPseudoManualArrayTwinSyncBoxedBlobTwinSync(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 243)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncBoxedBlobTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "boxed_blob_twin_sync",
            argNames: ["blob"],
          );

  @override
  TestIdTwinSync crateApiPseudoManualArrayTwinSyncFuncTestIdTwinSync(
      {required TestIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 247)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncFuncTestIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncFuncTestIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_test_id_twin_sync",
            argNames: ["id"],
          );

  @override
  U8Array5 crateApiPseudoManualArrayTwinSyncGetArrayTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 239)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncGetArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncGetArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_array_twin_sync",
            argNames: [],
          );

  @override
  PointTwinSyncArray2 crateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 240)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncGetComplexArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_complex_array_twin_sync",
            argNames: [],
          );

  @override
  double crateApiPseudoManualArrayTwinSyncLastNumberTwinSync(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 248)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncLastNumberTwinSyncConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncLastNumberTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "last_number_twin_sync",
            argNames: ["array"],
          );

  @override
  TestIdTwinSyncArray2 crateApiPseudoManualArrayTwinSyncNestedIdTwinSync(
      {required TestIdTwinSyncArray4 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_sync_array_4(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 249)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncNestedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncNestedIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "nested_id_twin_sync",
            argNames: ["id"],
          );

  @override
  MessageIdTwinSync crateApiPseudoManualArrayTwinSyncNewMsgidTwinSync(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 241)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncNewMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncNewMsgidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "new_msgid_twin_sync",
            argNames: ["id"],
          );

  @override
  FeedIdTwinSync crateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSync(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 245)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncReturnBoxedFeedIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_feed_id_twin_sync",
            argNames: ["id"],
          );

  @override
  U8Array8 crateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 246)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncReturnBoxedRawFeedIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_boxed_raw_feed_id_twin_sync",
            argNames: ["id"],
          );

  @override
  U8Array1600 crateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSync(
      {required BlobTwinSync blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_sync(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 244)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncUseBoxedBlobTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_boxed_blob_twin_sync",
            argNames: ["blob"],
          );

  @override
  U8Array32 crateApiPseudoManualArrayTwinSyncUseMsgidTwinSync(
      {required MessageIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 242)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualArrayTwinSyncUseMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualArrayTwinSyncUseMsgidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_msgid_twin_sync",
            argNames: ["id"],
          );

  @override
  Future<void>
      crateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsync(
          {required CustomizedTwinRustAsync val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_rust_async(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 251, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinRustAsyncHandleCustomizedStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_customized_struct_twin_rust_async",
            argNames: ["val"],
          );

  @override
  Future<UserIdTwinRustAsync>
      crateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsync(
          {UserIdTwinRustAsync userId = const UserIdTwinRustAsync(),
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_rust_async(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 252, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsyncConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinRustAsyncNextUserIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "next_user_id_twin_rust_async",
            argNames: ["userId"],
          );

  @override
  void crateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSync(
      {required CustomizedTwinSync val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_sync(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 256)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinSyncHandleCustomizedStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_customized_struct_twin_sync",
            argNames: ["val"],
          );

  @override
  UserIdTwinSync crateApiPseudoManualAttributeTwinSyncNextUserIdTwinSync(
      {UserIdTwinSync userId = const UserIdTwinSync(), dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_sync(userId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 257)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualAttributeTwinSyncNextUserIdTwinSyncConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualAttributeTwinSyncNextUserIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "next_user_id_twin_sync",
            argNames: ["userId"],
          );

  @override
  Future<BasicGeneralEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required BasicGeneralEnumTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 276, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required BasicPrimitiveEnumTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 275, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinNormal>
      crateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormal(
          {required BasicStructTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 277, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<bool> crateApiPseudoManualBasicExampleBasicTypeBoolTwinNormal(
      {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 272, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List> crateApiPseudoManualBasicExampleBasicTypeBytesTwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 274, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double> crateApiPseudoManualBasicExampleBasicTypeF32TwinNormal(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 270, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double> crateApiPseudoManualBasicExampleBasicTypeF64TwinNormal(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 271, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeI16TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 261, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeI32TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 262, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeI64TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 263, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeI8TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 260, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 268, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeIsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_isize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<String> crateApiPseudoManualBasicExampleBasicTypeStringTwinNormal(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 273, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeU16TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 265, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeU32TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 266, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeU64TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 267, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeU8TwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 264, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int> crateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 269, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicExampleBasicTypeUsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_usize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required List<BasicGeneralEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 292, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required List<BasicPrimitiveEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 291, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicStructTwinNormal>>
      crateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormal(
          {required List<BasicStructTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 293, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<bool>>
      crateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormal(
          {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 288, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<Uint8List>>
      crateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormal(
          {required List<Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 290, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Float32List>
      crateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormal(
          {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 286, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Float64List>
      crateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormal(
          {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 287, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int16List>
      crateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormal(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 279, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int32List>
      crateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormal(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 280, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int64List>
      crateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormal(
          {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 281, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Int8List>
      crateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormal(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 278, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<String>>
      crateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormal(
          {required List<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 289, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint16List>
      crateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormal(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 283, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint32List>
      crateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormal(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 284, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint64List>
      crateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormal(
          {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 285, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormal(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 282, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListExampleBasicListTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicGeneralEnumTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 308, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicPrimitiveEnumTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 307, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required List<BasicStructTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 309, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<bool>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsync(
          {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 304, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<Uint8List>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsync(
          {required List<Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 306, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Float32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsync(
          {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 302, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Float64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsync(
          {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 303, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Int16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 295, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Int32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 296, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Int64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsync(
          {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 297, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Int8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 294, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<String>>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsync(
          {required List<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 305, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Uint16List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 299, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Uint32List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 300, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Uint64List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsync(
          {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 301, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 298, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinRustAsyncExampleBasicListTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  List<BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSync(
          {required List<BasicGeneralEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 324)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  List<BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required List<BasicPrimitiveEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 323)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  List<BasicStructTwinSync>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSync(
          {required List<BasicStructTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 325)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  List<bool>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSync(
          {required List<bool> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 320)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  List<Uint8List>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSync(
          {required List<Uint8List> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 322)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Float32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSync(
          {required List<double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 318)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Float64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSync(
          {required List<double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 319)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Int16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 311)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Int32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 312)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Int64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSync(
          {required Int64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 313)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Int8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 310)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_i8_twin_sync",
            argNames: ["arg"],
          );

  @override
  List<String>
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSync(
          {required List<String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 321)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Uint16List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 315)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Uint32List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 316)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Uint64List
      crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSync(
          {required Uint64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 317)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Uint8List crateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 314)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicListTwinSyncExampleBasicListTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_list_type_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicGeneralEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required Map<int, BasicGeneralEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 342, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicPrimitiveEnumTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required Map<int, BasicPrimitiveEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 341, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicStructTwinNormal>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormal(
          {required Map<int, BasicStructTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 343, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormal(
          {required Map<int, bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 338, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormal(
          {required Map<int, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 340, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormal(
          {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 336, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormal(
          {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 337, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 327, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 328, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 329, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 326, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 334, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeIsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_isize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, String>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormal(
          {required Map<int, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 339, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 331, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 332, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 333, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 330, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormal(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 335, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapExampleBasicMapTypeUsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_usize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicGeneralEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicGeneralEnumTwinRustAsync> arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 360, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicPrimitiveEnumTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicPrimitiveEnumTwinRustAsync> arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 359, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicStructTwinRustAsync>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicStructTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 361, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, bool>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsync(
          {required Map<int, bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 356, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, Uint8List>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsync(
          {required Map<int, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 358, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsync(
          {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 354, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, double>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsync(
          {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 355, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 345, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 346, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 347, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 344, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 352, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeIsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_isize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, String>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsync(
          {required Map<int, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 357, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 349, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 350, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 351, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 348, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 353, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinRustAsyncExampleBasicMapTypeUsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_usize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicGeneralEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSync(
          {required Map<int, BasicGeneralEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 378)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicPrimitiveEnumTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required Map<int, BasicPrimitiveEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 377)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicStructTwinSync>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSync(
          {required Map<int, BasicStructTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 379)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, bool>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSync(
          {required Map<int, bool> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 374)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, Uint8List>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSync(
          {required Map<int, Uint8List> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 376)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSync(
          {required Map<int, double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 372)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, double>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSync(
          {required Map<int, double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 373)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 363)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 364)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 365)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 362)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_i8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 370)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeIsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_isize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, String>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSync(
          {required Map<int, String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 375)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 367)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u16_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 368)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 369)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u64_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 366)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, int>
      crateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 371)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicMapTwinSyncExampleBasicMapTypeUsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_map_type_usize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicGeneralEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormal(
          {BasicGeneralEnumTwinNormal? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 396, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {BasicPrimitiveEnumTwinNormal? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 395, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinNormal?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormal(
          {BasicStructTwinNormal? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 397, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<bool?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormal(
          {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 392, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBoolTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bool_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormal(
          {Uint8List? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 394, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bytes_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormal(
          {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 390, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormal(
          {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 391, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeF64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 381, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 382, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 383, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 380, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeI8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 388, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeIsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_isize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<String?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormal(
          {String? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 393, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeStringTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_string_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 385, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU16TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u16_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 386, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU32TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u32_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 387, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU64TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u64_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 384, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeU8TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u8_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormal(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 389, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalExampleBasicOptionalTypeUsizeTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_usize_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicGeneralEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {BasicGeneralEnumTwinRustAsync? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 414, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {BasicPrimitiveEnumTwinRustAsync? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 413, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinRustAsync?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
          {BasicStructTwinRustAsync? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 415, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<bool?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsync(
          {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 410, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsync(
          {Uint8List? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 412, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsync(
          {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 408, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<double?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsync(
          {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 409, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 399, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 400, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 401, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 398, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 406, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_isize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<String?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsync(
          {String? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 411, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 403, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 404, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 405, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 402, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsync(
          {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 407, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_usize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicGeneralEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSync(
          {BasicGeneralEnumTwinSync? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 432)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicPrimitiveEnumTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {BasicPrimitiveEnumTwinSync? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 431)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicStructTwinSync?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSync(
          {BasicStructTwinSync? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 433)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  bool?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSync(
          {bool? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 428)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  Uint8List?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSync(
          {Uint8List? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 430)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSync(
          {double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 426)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  double?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSync(
          {double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 427)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 417)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i16_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 418)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 419)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i64_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 416)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_i8_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 424)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeIsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_isize_twin_sync",
            argNames: ["arg"],
          );

  @override
  String?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSync(
          {String? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 429)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 421)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u16_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 422)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u32_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 423)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u64_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 420)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  int?
      crateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSync(
          {int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 425)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicOptionalTwinSyncExampleBasicOptionalTypeUsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_optional_type_usize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<BasicGeneralEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required BasicGeneralEnumTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 450, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required BasicPrimitiveEnumTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 449, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinRustAsync>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required BasicStructTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 451, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<bool>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsync(
          {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 446, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBoolTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bool_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsync(
          {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 448, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsync(
          {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 444, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<double>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsync(
          {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 445, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeF64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 435, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 436, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 437, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 434, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeI8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 442, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeIsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_isize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<String>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsync(
          {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 447, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 439, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU16TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u16_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 440, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 441, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU64TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u64_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 438, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u8_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 443, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinRustAsyncExampleBasicTypeUsizeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_usize_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  BasicGeneralEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
          {required BasicGeneralEnumTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 468)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicPrimitiveEnumTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required BasicPrimitiveEnumTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 467)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicStructTwinSync
      crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSync(
          {required BasicStructTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 469)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  bool crateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSync(
      {required bool arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 464)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bool_twin_sync",
            argNames: ["arg"],
          );

  @override
  Uint8List crateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 466)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSync(
      {required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 462)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f32_twin_sync",
            argNames: ["arg"],
          );

  @override
  double crateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSync(
      {required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 463)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_f64_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 453)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i16_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 454)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 455)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i64_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 452)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_i8_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 460)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_isize_twin_sync",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSync(
      {required String arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 465)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 457)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u16_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 458)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u32_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 459)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u64_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 456)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_u8_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 461)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "example_basic_type_usize_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormal(
          {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 477, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_json_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormal(
          {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 475, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_protobuf_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormal(
          {required BenchmarkBinaryTreeTwinNormal tree, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_normal(
            tree, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 473, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormalConstMeta,
      argValues: [tree],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_twin_normal",
            argNames: ["tree"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormal(
          {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 478, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_json_twin_normal",
            argNames: ["depth"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormal(
          {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 476, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_protobuf_twin_normal",
            argNames: ["depth"],
          );

  @override
  Future<BenchmarkBinaryTreeTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormal(
          {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 474, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_twin_normal",
            argNames: ["depth"],
          );

  @override
  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormal(
      {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 483, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_json_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormal(
          {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 481, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_protobuf_twin_normal",
            argNames: ["raw"],
          );

  @override
  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormal(
      {required BenchmarkBlobTwinNormal blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_normal(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 479, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_twin_normal",
            argNames: ["blob"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormal(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 484, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_json_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormal(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 482, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_protobuf_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<BenchmarkBlobTwinNormal>
      crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormal(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 480, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<int> crateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormal(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 471, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormalConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_input_bytes_twin_normal",
            argNames: ["bytes"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormal(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 472, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_output_bytes_twin_normal",
            argNames: ["size"],
          );

  @override
  Future<void> crateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 470, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_void_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsync(
          {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 492, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_json_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsync(
          {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 490, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_protobuf_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsync(
          {required BenchmarkBinaryTreeTwinRustAsync tree, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_rust_async(
            tree, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 488, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsyncConstMeta,
      argValues: [tree],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeInputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_twin_rust_async",
            argNames: ["tree"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsync(
          {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 493, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_json_twin_rust_async",
            argNames: ["depth"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsync(
          {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 491, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_protobuf_twin_rust_async",
            argNames: ["depth"],
          );

  @override
  Future<BenchmarkBinaryTreeTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsync(
          {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 489, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBinaryTreeOutputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_twin_rust_async",
            argNames: ["depth"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsync(
          {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 498, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_json_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsync(
          {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 496, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_protobuf_twin_rust_async",
            argNames: ["raw"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsync(
          {required BenchmarkBlobTwinRustAsync blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_rust_async(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 494, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobInputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_twin_rust_async",
            argNames: ["blob"],
          );

  @override
  Future<String>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsync(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 499, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputJsonTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_json_twin_rust_async",
            argNames: ["size"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsync(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 497, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputProtobufTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_protobuf_twin_rust_async",
            argNames: ["size"],
          );

  @override
  Future<BenchmarkBlobTwinRustAsync>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsync(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 495, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkBlobOutputTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_twin_rust_async",
            argNames: ["size"],
          );

  @override
  Future<int>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsync(
          {required List<int> bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 486, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkInputBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_input_bytes_twin_rust_async",
            argNames: ["bytes"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsync(
          {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 487, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkOutputBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_output_bytes_twin_rust_async",
            argNames: ["size"],
          );

  @override
  Future<void>
      crateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 485, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinRustAsyncBenchmarkVoidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_void_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSync(
          {required String raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 507)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_json_twin_sync",
            argNames: ["raw"],
          );

  @override
  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSync(
          {required List<int> raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 505)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_protobuf_twin_sync",
            argNames: ["raw"],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSync(
      {required BenchmarkBinaryTreeTwinSync tree, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_sync(
            tree, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 503)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSyncConstMeta,
      argValues: [tree],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeInputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_input_twin_sync",
            argNames: ["tree"],
          );

  @override
  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSync(
          {required int depth, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 508)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_json_twin_sync",
            argNames: ["depth"],
          );

  @override
  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSync(
          {required int depth, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 506)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_protobuf_twin_sync",
            argNames: ["depth"],
          );

  @override
  BenchmarkBinaryTreeTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSync(
          {required int depth, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 504)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBinaryTreeOutputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_binary_tree_output_twin_sync",
            argNames: ["depth"],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSync(
      {required String raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 513)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_json_twin_sync",
            argNames: ["raw"],
          );

  @override
  void
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSync(
          {required List<int> raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 511)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_protobuf_twin_sync",
            argNames: ["raw"],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSync(
      {required BenchmarkBlobTwinSync blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_sync(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 509)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobInputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_input_twin_sync",
            argNames: ["blob"],
          );

  @override
  String
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSync(
          {required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 514)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputJsonTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_json_twin_sync",
            argNames: ["size"],
          );

  @override
  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSync(
          {required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 512)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputProtobufTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_protobuf_twin_sync",
            argNames: ["size"],
          );

  @override
  BenchmarkBlobTwinSync
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSync(
          {required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 510)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkBlobOutputTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_blob_output_twin_sync",
            argNames: ["size"],
          );

  @override
  int crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSync(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 501)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkInputBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_input_bytes_twin_sync",
            argNames: ["bytes"],
          );

  @override
  Uint8List
      crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSync(
          {required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 502)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkOutputBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_output_bytes_twin_sync",
            argNames: ["size"],
          );

  @override
  void crateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 500)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualBenchmarkApiTwinSyncBenchmarkVoidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "benchmark_void_twin_sync",
            argNames: [],
          );

  @override
  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsync(
          {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Local(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 516, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeLocalTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_local_twin_rust_async",
            argNames: ["d"],
          );

  @override
  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsync(
          {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 515, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncDatetimeUtcTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_utc_twin_rust_async",
            argNames: ["d"],
          );

  @override
  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsync(
          {required Duration d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 519, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncDurationTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "duration_twin_rust_async",
            argNames: ["d"],
          );

  @override
  Future<List<DateTime>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsync(
          {required List<Duration> durations,
          required DateTime since,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Duration(durations, serializer);
        sse_encode_Chrono_Local(since, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 521, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsyncConstMeta,
      argValues: [durations, since],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleDurationsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_durations_twin_rust_async",
            argNames: ["durations", "since"],
          );

  @override
  Future<List<Duration>>
      crateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsync(
          {required List<DateTime> timestamps,
          required DateTime epoch,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Naive(timestamps, serializer);
        sse_encode_Chrono_Naive(epoch, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 520, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsyncConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncHandleTimestampsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_timestamps_twin_rust_async",
            argNames: ["timestamps", "epoch"],
          );

  @override
  Future<Duration>
      crateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsync(
          {required FeatureChronoTwinRustAsync mine, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_chrono_twin_rust_async(mine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 524, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsyncConstMeta,
      argValues: [mine],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncHowLongDoesItTakeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "how_long_does_it_take_twin_rust_async",
            argNames: ["mine"],
          );

  @override
  Future<DateTime>
      crateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsync(
          {required DateTime d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Naive(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 517, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncNaivedatetimeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "naivedatetime_twin_rust_async",
            argNames: ["d"],
          );

  @override
  Future<DateTime?>
      crateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsync(
          {DateTime? d, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_Chrono_Utc(d, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 518, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncOptionalEmptyDatetimeUtcTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "optional_empty_datetime_utc_twin_rust_async",
            argNames: ["d"],
          );

  @override
  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 522, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncTestChronoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_chrono_twin_rust_async",
            argNames: [],
          );

  @override
  Future<TestChronoTwinRustAsync>
      crateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 523, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinRustAsyncTestPreciseChronoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_precise_chrono_twin_rust_async",
            argNames: [],
          );

  @override
  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSync(
      {required DateTime d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Local(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 526)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncDatetimeLocalTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_local_twin_sync",
            argNames: ["d"],
          );

  @override
  DateTime crateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSync(
      {required DateTime d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Utc(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 525)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncDatetimeUtcTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "datetime_utc_twin_sync",
            argNames: ["d"],
          );

  @override
  Duration crateApiPseudoManualChronoTypeTwinSyncDurationTwinSync(
      {required Duration d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 529)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncDurationTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncDurationTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "duration_twin_sync",
            argNames: ["d"],
          );

  @override
  List<DateTime> crateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSync(
      {required List<Duration> durations,
      required DateTime since,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Duration(durations, serializer);
        sse_encode_Chrono_Local(since, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 531)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Local,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSyncConstMeta,
      argValues: [durations, since],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncHandleDurationsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_durations_twin_sync",
            argNames: ["durations", "since"],
          );

  @override
  List<Duration> crateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSync(
      {required List<DateTime> timestamps,
      required DateTime epoch,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Chrono_Naive(timestamps, serializer);
        sse_encode_Chrono_Naive(epoch, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 530)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSyncConstMeta,
      argValues: [timestamps, epoch],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncHandleTimestampsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_timestamps_twin_sync",
            argNames: ["timestamps", "epoch"],
          );

  @override
  Duration crateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSync(
      {required FeatureChronoTwinSync mine, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_chrono_twin_sync(mine, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 534)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSyncConstMeta,
      argValues: [mine],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncHowLongDoesItTakeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "how_long_does_it_take_twin_sync",
            argNames: ["mine"],
          );

  @override
  DateTime crateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSync(
      {required DateTime d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Naive(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 527)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Naive,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncNaivedatetimeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "naivedatetime_twin_sync",
            argNames: ["d"],
          );

  @override
  DateTime?
      crateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSync(
          {DateTime? d, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_Chrono_Utc(d, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 528)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSyncConstMeta,
      argValues: [d],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncOptionalEmptyDatetimeUtcTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "optional_empty_datetime_utc_twin_sync",
            argNames: ["d"],
          );

  @override
  TestChronoTwinSync crateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 532)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncTestChronoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_chrono_twin_sync",
            argNames: [],
          );

  @override
  TestChronoTwinSync
      crateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 533)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_chrono_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualChronoTypeTwinSyncTestPreciseChronoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_precise_chrono_twin_sync",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 537, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "function_with_comments_slash_star_star_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 536, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 535, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
          {required StructWithCommentsTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_rust_async(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 539, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_rust_async_instance_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 538, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinRustAsyncStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_rust_async_static_method_twin_rust_async",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 542)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsSlashStarStarTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "function_with_comments_slash_star_star_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 541)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 540)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSync(
          {required StructWithCommentsTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 544)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "struct_with_comments_twin_sync_instance_method_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 543)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualCommentTwinSyncStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "struct_with_comments_twin_sync_static_method_twin_sync",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsync(
          {required FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              callback,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 549, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartLoopbackTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_loopback_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsync(
          {required FutureOr<void> Function() callback,
          required int numTimes,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        sse_encode_i_32(numTimes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 552, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsyncConstMeta,
      argValues: [callback, numTimes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartMultiTimesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_multi_times_twin_rust_async",
            argNames: ["callback", "numTimes"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsync(
          {required FutureOr<void> Function(String) callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 546, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartOneArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_one_arg_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsync(
          {required FutureOr<String> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_String(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 548, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_return_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsync(
          {required FutureOr<void> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 545, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartSimpleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_simple_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsync(
          {required FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              callback,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 547, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartTwoArgsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_two_args_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsync(
          {required Object input,
          required FutureOr<void> Function(Object) callback,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(input, serializer);
        sse_encode_DartFn_Inputs_DartOpaque_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 550, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsyncConstMeta,
      argValues: [input, callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_arg_twin_rust_async",
            argNames: ["input", "callback"],
          );

  @override
  Future<Object>
      crateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsync(
          {required FutureOr<Object> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_DartOpaque(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 551, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartFnTwinRustAsyncRustCallDartWithDartOpaqueResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_call_dart_with_dart_opaque_result_twin_rust_async",
            argNames: ["callback"],
          );

  @override
  Future<String>
      crateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 553, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncAsyncAcceptDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "async_accept_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 568, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncCloneDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "clone_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<EnumDartOpaqueTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 564, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateEnumDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_enum_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<DartOpaqueNestedTwinRustAsync>
      crateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsync(
          {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 562, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncCreateNestedDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_dart_opaque_twin_rust_async",
            argNames: ["opaque1", "opaque2"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsync(
          {required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 567, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncDropStaticDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "drop_static_dart_opaque_twin_rust_async",
            argNames: ["id"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsync(
          {required EnumDartOpaqueTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 565, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetEnumDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_enum_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsync(
          {required DartOpaqueNestedTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 563, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncGetNestedDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_nested_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsync(
          {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 559, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayGetTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_get_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<ObjectArray1>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 556, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsync(
          {Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 558, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionGetTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_get_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<Object?>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 555, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackOptionTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<Object>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 554, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsync(
          {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 560, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecGetTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_get_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<List<Object>>
      crateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 557, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncLoopBackVecTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsync(
          {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 561, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncPanicUnwrapDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_unwrap_dart_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsync(
          {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 566, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinRustAsyncSetStaticDartOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "set_static_dart_opaque_twin_rust_async",
            argNames: ["id", "opaque"],
          );

  @override
  String crateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 569)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncAsyncAcceptDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "async_accept_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  List<Object> crateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 584)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncCloneDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "clone_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  EnumDartOpaqueTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSync(
          {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 580)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncCreateEnumDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_enum_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  DartOpaqueNestedTwinSync
      crateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSync(
          {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 578)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncCreateNestedDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_dart_opaque_twin_sync",
            argNames: ["opaque1", "opaque2"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSync(
      {required int id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 583)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncDropStaticDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "drop_static_dart_opaque_twin_sync",
            argNames: ["id"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 581)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncGetEnumDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_enum_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 579)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncGetNestedDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_nested_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSync(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 575)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayGetTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_get_twin_sync",
            argNames: ["opaque"],
          );

  @override
  ObjectArray1 crateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 572)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_array_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSync(
      {Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 574)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionGetTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_get_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Object? crateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 571)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackOptionTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_option_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Object crateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 570)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSync(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 576)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecGetTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_get_twin_sync",
            argNames: ["opaque"],
          );

  @override
  List<Object> crateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 573)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncLoopBackVecTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "loop_back_vec_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 577)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncPanicUnwrapDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_unwrap_dart_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSync(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 582)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDartOpaqueTwinSyncSetStaticDartOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "set_static_dart_opaque_twin_sync",
            argNames: ["id", "opaque"],
          );

  @override
  Stream<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsync(
          {required DroppableTwinRustAsync that, dynamic hint}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
            that, serializer);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 587, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncCreateStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_create_stream_twin_rust_async",
            argNames: ["that", "sink"],
          );

  @override
  Future<int>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 588, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncGetDropCountTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_get_drop_count_twin_rust_async",
            argNames: [],
          );

  @override
  Future<DroppableTwinRustAsync>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 585, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_new_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsync(
          {required DroppableTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 586, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinRustAsyncDroppableTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinRustAsync_simple_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Stream<int>
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSync(
          {required DroppableTwinSync that, dynamic hint}) {
    final sink = RustStreamSink<int>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
            that, serializer);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 591)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncCreateStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_create_stream_twin_sync",
            argNames: ["that", "sink"],
          );

  @override
  int crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 592)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncGetDropCountTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_get_drop_count_twin_sync",
            argNames: [],
          );

  @override
  DroppableTwinSync
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 589)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_new_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSync(
          {required DroppableTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 590)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualDroppingTwinSyncDroppableTwinSyncSimpleMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "DroppableTwinSync_simple_method_twin_sync",
            argNames: ["that"],
          );

  @override
  Future<EnumSimpleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsync(
          {required EnumSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 593, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumSimpleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_simple_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithDiscriminantTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsync(
          {required EnumWithDiscriminantTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_with_discriminant_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 597, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_discriminant_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithDiscriminantTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_discriminant_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemMixedTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsync(
          {required EnumWithItemMixedTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 594, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemMixedTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_mixed_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemStructTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsync(
          {required EnumWithItemStructTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 596, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithItemTupleTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsync(
          {required EnumWithItemTupleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 595, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncFuncEnumWithItemTupleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_tuple_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<WeekdaysTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsync(
          {required WeekdaysTwinRustAsync weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_rust_async(weekday, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 600, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumParameterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_parameter_twin_rust_async",
            argNames: ["weekday"],
          );

  @override
  Future<KitchenSinkTwinRustAsync>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsync(
          {required KitchenSinkTwinRustAsync val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_rust_async(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 602, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncHandleEnumStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_struct_twin_rust_async",
            argNames: ["val"],
          );

  @override
  Future<WeekdaysTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsync(
          {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 599, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncHandleReturnEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_return_enum_twin_rust_async",
            argNames: ["input"],
          );

  @override
  Future<MeasureTwinRustAsync?>
      crateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsync(
          {required MeasureTwinRustAsync measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_rust_async(measure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 601, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsyncConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncMultiplyByTenTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "multiply_by_ten_twin_rust_async",
            argNames: ["measure"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsync(
          {required NoteTwinRustAsync note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_rust_async(note, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 598, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsyncConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinRustAsyncPrintNoteTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "print_note_twin_rust_async",
            argNames: ["note"],
          );

  @override
  EnumSimpleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSync(
          {required EnumSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 603)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumSimpleTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_simple_twin_sync",
            argNames: ["arg"],
          );

  @override
  EnumWithDiscriminantTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSync(
          {required EnumWithDiscriminantTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_with_discriminant_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 607)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_discriminant_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithDiscriminantTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_discriminant_twin_sync",
            argNames: ["arg"],
          );

  @override
  EnumWithItemMixedTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSync(
          {required EnumWithItemMixedTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 604)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemMixedTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_mixed_twin_sync",
            argNames: ["arg"],
          );

  @override
  EnumWithItemStructTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSync(
          {required EnumWithItemStructTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 606)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  EnumWithItemTupleTwinSync
      crateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSync(
          {required EnumWithItemTupleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 605)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncFuncEnumWithItemTupleTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_enum_with_item_tuple_twin_sync",
            argNames: ["arg"],
          );

  @override
  WeekdaysTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSync(
          {required WeekdaysTwinSync weekday, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_sync(weekday, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 610)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncHandleEnumParameterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_parameter_twin_sync",
            argNames: ["weekday"],
          );

  @override
  KitchenSinkTwinSync
      crateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSync(
          {required KitchenSinkTwinSync val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_sync(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 612)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncHandleEnumStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_enum_struct_twin_sync",
            argNames: ["val"],
          );

  @override
  WeekdaysTwinSync?
      crateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSync(
          {required String input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 609)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncHandleReturnEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_return_enum_twin_sync",
            argNames: ["input"],
          );

  @override
  MeasureTwinSync? crateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSync(
      {required MeasureTwinSync measure, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_sync(measure, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 611)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSyncConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncMultiplyByTenTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "multiply_by_ten_twin_sync",
            argNames: ["measure"],
          );

  @override
  Uint8List crateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSync(
      {required NoteTwinSync note, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_sync(note, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 608)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSyncConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEnumerationTwinSyncPrintNoteTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "print_note_twin_sync",
            argNames: ["note"],
          );

  @override
  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 614, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncCloseEventListenerTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "close_event_listener_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsync(
          {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 615, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsyncConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncCreateEventTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_event_twin_rust_async",
            argNames: ["address", "payload"],
          );

  @override
  Future<String>
      crateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsync(
          {required EventTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_event_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 616, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncEventTwinRustAsyncAsStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "event_twin_rust_async_as_string_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<Stream<EventTwinRustAsync>>
      crateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsync(
          {dynamic hint}) async {
    final listener = RustStreamSink<EventTwinRustAsync>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_event_twin_rust_async_Sse(listener, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 613, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsyncConstMeta,
      argValues: [listener],
      apiImpl: this,
      hint: hint,
    ));
    return listener.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualEventListenerTwinRustAsyncRegisterEventListenerTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "register_event_listener_twin_rust_async",
            argNames: ["listener"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 621, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorPanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_panic_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 622, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsync(
          {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 620, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomEnumErrorReturnOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_ok_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsync(
          {required CustomNestedErrorOuterTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 623, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomNestedErrorReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_nested_error_return_error_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsync(
          {required CustomStructErrorTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 624, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructErrorReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_error_return_error_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<CustomStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsync(
          {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 641, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_twin_rust_async_new_twin_rust_async",
            argNames: ["message"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 644, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_nonstatic_return_custom_struct_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 645, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_nonstatic_return_custom_struct_ok_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 642, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_static_return_custom_struct_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 643, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_rust_async_static_return_custom_struct_ok_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 617, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncFuncReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 618, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeFalliblePanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_fallible_panic_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 619, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncFuncTypeInfalliblePanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_infallible_panic_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 634, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncPanicWithCustomResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_with_custom_result_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 628, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 629, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError1Variant1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_variant1_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 630, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomNestedError2TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_2_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 631, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 632, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_ok_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 625, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_err_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsync(
          {required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 627, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsyncConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnErrorVariantTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_error_variant_twin_rust_async",
            argNames: ["variant"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 626, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_ok_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<SomeStructTwinRustAsync>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsync(
          {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 636, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "some_struct_twin_rust_async_new_twin_rust_async",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 639, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_non_static_return_err_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
          {required SomeStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 640, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_non_static_return_ok_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 637, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_static_return_err_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 638, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_rust_async_static_return_ok_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<Stream<String>>
      crateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsync(
          {dynamic hint}) async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 635, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncStreamSinkThrowAnyhowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_throw_anyhow_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<void>
      crateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 633, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinRustAsyncThrowAnyhowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "throw_anyhow_twin_rust_async",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 650)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorPanicTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_panic_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 651)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 649)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomEnumErrorReturnOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_enum_error_return_ok_twin_sync",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSync(
          {required CustomNestedErrorOuterTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 652)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomNestedErrorReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_nested_error_return_error_twin_sync",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSync(
          {required CustomStructErrorTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 653)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructErrorReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_error_return_error_twin_sync",
            argNames: ["arg"],
          );

  @override
  CustomStructTwinSync
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSync(
          {required String message, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 670)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSyncConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "custom_struct_twin_sync_new_twin_sync",
            argNames: ["message"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
          {required CustomStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 673)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_nonstatic_return_custom_struct_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 674)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_nonstatic_return_custom_struct_ok_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 671)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_static_return_custom_struct_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 672)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "custom_struct_twin_sync_static_return_custom_struct_ok_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 646)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncFuncReturnErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 647)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncFuncTypeFalliblePanicTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_fallible_panic_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 648)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncFuncTypeInfalliblePanicTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_type_infallible_panic_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 663)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncPanicWithCustomResultTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "panic_with_custom_result_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 657)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 658)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError1Variant1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_1_variant1_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 659)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomNestedError2TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_nested_error_2_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 660)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 661)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_custom_struct_ok_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 654)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_err_custom_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSync(
      {required int variant, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 656)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSyncConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnErrorVariantTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_error_variant_twin_sync",
            argNames: ["variant"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 655)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "return_ok_custom_error_twin_sync",
            argNames: [],
          );

  @override
  SomeStructTwinSync
      crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSync(
          {required int value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 665)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "some_struct_twin_sync_new_twin_sync",
            argNames: ["value"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 668)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_non_static_return_err_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 669)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_non_static_return_ok_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 666)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_static_return_err_custom_error_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 667)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "some_struct_twin_sync_static_return_ok_custom_error_twin_sync",
            argNames: [],
          );

  @override
  Stream<String>
      crateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<String>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 664)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncStreamSinkThrowAnyhowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_throw_anyhow_twin_sync",
            argNames: ["sink"],
          );

  @override
  void crateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 662)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExceptionTwinSyncThrowAnyhowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "throw_anyhow_twin_sync",
            argNames: [],
          );

  @override
  Future<NewSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 678, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallNewModuleSystemTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_new_module_system_twin_rust_async",
            argNames: [],
          );

  @override
  Future<OldSimpleStruct>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 677, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncCallOldModuleSystemTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_old_module_system_twin_rust_async",
            argNames: [],
          );

  @override
  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsync(
          {required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 676, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_enum_twin_rust_async",
            argNames: ["myEnum"],
          );

  @override
  Future<bool>
      crateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsync(
          {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 675, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinRustAsyncUseImportedStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_struct_twin_rust_async",
            argNames: ["myStruct"],
          );

  @override
  NewSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 682)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallNewModuleSystemTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_new_module_system_twin_sync",
            argNames: [],
          );

  @override
  OldSimpleStruct
      crateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 681)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncCallOldModuleSystemTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "call_old_module_system_twin_sync",
            argNames: [],
          );

  @override
  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSync(
      {required MyEnum myEnum, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 680)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_enum_twin_sync",
            argNames: ["myEnum"],
          );

  @override
  bool crateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSync(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 679)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualExternalTypeInCrateTwinSyncUseImportedStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "use_imported_struct_twin_sync",
            argNames: ["myStruct"],
          );

  @override
  Future<Map<int, int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsync(
          {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 683, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapI32I32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_i32_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, Uint8List>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsync(
          {required Map<String, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 687, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringBytesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_bytes_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, KitchenSinkTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsync(
          {required Map<String, KitchenSinkTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 690, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringComplexEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_complex_enum_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, EnumSimpleTwinRustAsync>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsync(
          {required Map<String, EnumSimpleTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 689, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringSimpleEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_simple_enum_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsync(
          {required Map<String, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 685, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<String, MySize>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsync(
          {required Map<String, MySize> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 688, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashMapStringStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Set<int>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsync(
          {required Set<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 684, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Set<String>>
      crateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsync(
          {required Set<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 686, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinRustAsyncFuncHashSetStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Map<int, int> crateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 691)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapI32I32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_i32_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<String, Uint8List>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSync(
          {required Map<String, Uint8List> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 695)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringBytesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_bytes_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<String, KitchenSinkTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSync(
          {required Map<String, KitchenSinkTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 698)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringComplexEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_complex_enum_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<String, EnumSimpleTwinSync>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSync(
          {required Map<String, EnumSimpleTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 697)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringSimpleEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_simple_enum_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<String, String>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSync(
          {required Map<String, String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 693)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<String, MySize>
      crateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSync(
          {required Map<String, MySize> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 696)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashMapStringStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_map_string_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  Set<int> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSync(
      {required Set<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 692)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  Set<String> crateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSync(
      {required Set<String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 694)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMapAndSetTwinSyncFuncHashSetStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_hash_set_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 720, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncStaticGetterOnlyTwinRustAsyncStaticGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StaticGetterOnlyTwinRustAsync_static_getter_twin_rust_async",
            argNames: [],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
          {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 703, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_concatenate_static_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required String b,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 702, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_concatenate_twin_rust_async",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 708, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_static_stream_sink_single_arg_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<Log2TwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_rust_async_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 707, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_static_stream_sink_twin_rust_async",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
          {required ConcatenateWithTwinRustAsync that, dynamic hint}) {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 706, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_stream_sink_at_1_twin_rust_async",
            argNames: ["that", "sink"],
          );

  @override
  Stream<Log2TwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max,
          dynamic hint}) {
    final sink = RustStreamSink<Log2TwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_rust_async_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 705, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta,
      argValues: [that, key, max, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_handle_some_stream_sink_twin_rust_async",
            argNames: ["that", "key", "max", "sink"],
          );

  @override
  Future<ConcatenateWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 701, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_rust_async_new_twin_rust_async",
            argNames: ["a"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 704, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_rust_async_simple_getter_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<SumWithTwinRustAsyncArray3>
      crateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsync(
          {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 700, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_rust_async_array_3,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncGetSumArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_array_twin_rust_async",
            argNames: ["a", "b", "c"],
          );

  @override
  Future<SumWithTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 699, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncGetSumStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_struct_twin_rust_async",
            argNames: [],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCall(
          {required MyCallableTwinRustAsync that,
          required String two,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_callable_twin_rust_async(that, serializer);
        sse_encode_String(two, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 710, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCallConstMeta,
      argValues: [that, two],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncMyCallableTwinRustAsyncCallConstMeta =>
          const TaskConstMeta(
            debugName: "my_callable_twin_rust_async_call",
            argNames: ["that", "two"],
          );

  @override
  Future<SimpleEnumTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 716, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsyncConstMeta,
      argValues: [one],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncReturnSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_enum_twin_rust_async_return_self_twin_rust_async",
            argNames: ["one"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimpleEnumTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_enum_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 717, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_enum_twin_rust_async_simple_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsync(
          {required SimplePrimitiveEnumTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_simple_primitive_enum_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 718, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimplePrimitiveEnumTwinRustAsyncSimpleMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_primitive_enum_twin_rust_async_simple_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsync(
          {required SimpleStructTwinRustAsync a,
          required SimpleStructTwinRustAsync b,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(a, serializer);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 714, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncArgSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_rust_async_arg_self_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsync(
          {required SimpleStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 712, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_struct_twin_rust_async_receiver_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<String>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsync(
          {required SimpleStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 713, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReceiverOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_struct_twin_rust_async_receiver_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<SimpleStructTwinRustAsync>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsync(
          {required String one, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 711, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsyncConstMeta,
      argValues: [one],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncReturnSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_struct_twin_rust_async_return_self_twin_rust_async",
            argNames: ["one"],
          );

  @override
  Future<List<String>>
      crateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsync(
          {required List<SimpleStructTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_simple_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 715, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSimpleStructTwinRustAsyncVecSelfTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_rust_async_vec_self_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsync(
          {required int a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 719, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncStaticOnlyTwinRustAsyncStaticMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "static_only_twin_rust_async_static_method_twin_rust_async",
            argNames: ["a"],
          );

  @override
  Future<int>
      crateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsync(
          {required SumWithTwinRustAsync that,
          required int y,
          required int z,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_rust_async(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 709, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinRustAsyncSumWithTwinRustAsyncSumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "sum_with_twin_rust_async_sum_twin_rust_async",
            argNames: ["that", "y", "z"],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 742)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncStaticGetterOnlyTwinSyncStaticGetterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "StaticGetterOnlyTwinSync_static_getter_twin_sync",
            argNames: [],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSync(
          {required String a, required String b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 725)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_concatenate_static_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSync(
          {required ConcatenateWithTwinSync that,
          required String b,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 724)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncConcatenateTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_sync_concatenate_twin_sync",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<int>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 730)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_static_stream_sink_single_arg_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<Log2TwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_sync_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 729)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_static_stream_sink_twin_sync",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<int>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
          {required ConcatenateWithTwinSync that, dynamic hint}) {
    final sink = RustStreamSink<int>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_StreamSink_u_32_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 728)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta,
      argValues: [that, sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_stream_sink_at_1_twin_sync",
            argNames: ["that", "sink"],
          );

  @override
  Stream<Log2TwinSync>
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
          {required ConcatenateWithTwinSync that,
          required int key,
          required int max,
          dynamic hint}) {
    final sink = RustStreamSink<Log2TwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_2_twin_sync_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 727)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta,
      argValues: [that, key, max, sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "concatenate_with_twin_sync_handle_some_stream_sink_twin_sync",
            argNames: ["that", "key", "max", "sink"],
          );

  @override
  ConcatenateWithTwinSync
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSync(
          {required String a, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 723)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_sync_new_twin_sync",
            argNames: ["a"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSync(
          {required ConcatenateWithTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 726)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncConcatenateWithTwinSyncSimpleGetterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "concatenate_with_twin_sync_simple_getter_twin_sync",
            argNames: ["that"],
          );

  @override
  SumWithTwinSyncArray3 crateApiPseudoManualMethodTwinSyncGetSumArrayTwinSync(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 722)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_sync_array_3,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncGetSumArrayTwinSyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncGetSumArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_array_twin_sync",
            argNames: ["a", "b", "c"],
          );

  @override
  SumWithTwinSync crateApiPseudoManualMethodTwinSyncGetSumStructTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 721)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncGetSumStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncGetSumStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_sum_struct_twin_sync",
            argNames: [],
          );

  @override
  String crateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCall(
      {required MyCallableTwinSync that, required String two, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_callable_twin_sync(that, serializer);
        sse_encode_String(two, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 732)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCallConstMeta,
      argValues: [that, two],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncMyCallableTwinSyncCallConstMeta =>
          const TaskConstMeta(
            debugName: "my_callable_twin_sync_call",
            argNames: ["that", "two"],
          );

  @override
  SimpleEnumTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSync(
          {required String one, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 738)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSyncConstMeta,
      argValues: [one],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncReturnSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_sync_return_self_twin_sync",
            argNames: ["one"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSync(
          {required SimpleEnumTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_enum_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 739)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleEnumTwinSyncSimpleMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_enum_twin_sync_simple_method_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSync(
      {required SimplePrimitiveEnumTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_simple_primitive_enum_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 740)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimplePrimitiveEnumTwinSyncSimpleMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "simple_primitive_enum_twin_sync_simple_method_twin_sync",
            argNames: ["that"],
          );

  @override
  String crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSync(
      {required SimpleStructTwinSync a,
      required SimpleStructTwinSync b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_sync(a, serializer);
        sse_encode_box_autoadd_simple_struct_twin_sync(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 736)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncArgSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_arg_self_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSync(
          {required SimpleStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 734)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_receiver_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  String
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSync(
          {required SimpleStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 735)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReceiverOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_receiver_own_twin_sync",
            argNames: ["that"],
          );

  @override
  SimpleStructTwinSync
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSync(
          {required String one, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(one, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 733)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSyncConstMeta,
      argValues: [one],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncReturnSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_return_self_twin_sync",
            argNames: ["one"],
          );

  @override
  List<String>
      crateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSync(
          {required List<SimpleStructTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_simple_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 737)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSimpleStructTwinSyncVecSelfTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_struct_twin_sync_vec_self_twin_sync",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSync(
      {required int a, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 741)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncStaticOnlyTwinSyncStaticMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "static_only_twin_sync_static_method_twin_sync",
            argNames: ["a"],
          );

  @override
  int crateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_sync(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 731)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMethodTwinSyncSumWithTwinSyncSumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "sum_with_twin_sync_sum_twin_sync",
            argNames: ["that", "y", "z"],
          );

  @override
  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationSettings>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 746, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<List<ApplicationSettings>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_settings_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 747, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncAppSettingsVecStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_vec_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<int?> crateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsync(
      {required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 753, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsyncConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncFirstNumberTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_number_twin_rust_async",
            argNames: ["nums"],
          );

  @override
  Future<int?>
      crateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsync(
          {required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 754, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncFirstSequenceTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_sequence_twin_rust_async",
            argNames: ["seqs"],
          );

  @override
  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 743, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncGetAppSettingsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_app_settings_twin_rust_async",
            argNames: [],
          );

  @override
  Future<ApplicationSettings>
      crateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 744, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncGetFallibleAppSettingsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_fallible_app_settings_twin_rust_async",
            argNames: [],
          );

  @override
  Future<ApplicationMessage>
      crateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 750, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncGetMessageTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_message_twin_rust_async",
            argNames: [],
          );

  @override
  Future<bool>
      crateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsync(
          {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 745, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncIsAppEmbeddedTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "is_app_embedded_twin_rust_async",
            argNames: ["appSettings"],
          );

  @override
  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationModeArray2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 768, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorArrayEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_array_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationMode>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 763, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<Map<int, ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Map_u_8_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 766, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorMapEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_map_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationMode?>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 764, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorOptionEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_option_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<Set<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Set_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 767, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorSetEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_set_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<MirrorStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<MirrorStructTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mirror_struct_twin_rust_async_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 748, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorStructStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_struct_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 749, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorTupleStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_tuple_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<List<ApplicationMode>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_mode_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 765, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncMirrorVecEnumStreamTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_vec_enum_stream_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<Numbers>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsync(
          {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 751, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncRepeatNumberTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_number_twin_rust_async",
            argNames: ["num", "times"],
          );

  @override
  Future<Sequences>
      crateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsync(
          {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 752, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncRepeatSequenceTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_sequence_twin_rust_async",
            argNames: ["seq", "times"],
          );

  @override
  Future<ContainsMirroredSubStructTwinRustAsync>
      crateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 761, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_contains_mirrored_sub_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestContainsMirroredSubStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_contains_mirrored_sub_struct_twin_rust_async",
            argNames: [],
          );

  @override
  Future<List<RawStringMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 759, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_fallible_of_raw_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  Future<StructWithHashMap>
      crateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 762, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_hash_map,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestHashmapWithMirroredValueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_hashmap_with_mirrored_value_twin_rust_async",
            argNames: [],
          );

  @override
  Future<List<RawStringEnumMirrored>>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 760, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_nested_enums_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  Future<ListOfNestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 758, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "test_list_of_raw_nested_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  Future<NestedRawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 756, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestNestedRawStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_nested_raw_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  Future<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsync(
          {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 757, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsyncConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringEnumMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_enum_mirrored_twin_rust_async",
            argNames: ["nested"],
          );

  @override
  Future<RawStringMirrored>
      crateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 755, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinRustAsyncTestRawStringMirroredTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_mirrored_twin_rust_async",
            argNames: [],
          );

  @override
  Stream<ApplicationSettings>
      crateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationSettings>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_settings_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 772)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncAppSettingsStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationSettings>>
      crateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<List<ApplicationSettings>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_settings_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 773)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncAppSettingsVecStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "app_settings_vec_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  int? crateApiPseudoManualMirrorTwinSyncFirstNumberTwinSync(
      {required Numbers nums, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 779)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncFirstNumberTwinSyncConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncFirstNumberTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_number_twin_sync",
            argNames: ["nums"],
          );

  @override
  int? crateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSync(
      {required Sequences seqs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 780)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncFirstSequenceTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "first_sequence_twin_sync",
            argNames: ["seqs"],
          );

  @override
  ApplicationSettings crateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 769)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncGetAppSettingsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_app_settings_twin_sync",
            argNames: [],
          );

  @override
  ApplicationSettings
      crateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 770)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncGetFallibleAppSettingsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_fallible_app_settings_twin_sync",
            argNames: [],
          );

  @override
  ApplicationMessage crateApiPseudoManualMirrorTwinSyncGetMessageTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 776)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualMirrorTwinSyncGetMessageTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncGetMessageTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "get_message_twin_sync",
            argNames: [],
          );

  @override
  bool crateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 771)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncIsAppEmbeddedTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "is_app_embedded_twin_sync",
            argNames: ["appSettings"],
          );

  @override
  Stream<ApplicationModeArray2>
      crateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationModeArray2>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_array_2_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 794)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorArrayEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_array_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode>
      crateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationMode>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_application_mode_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 789)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<Map<int, ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<Map<int, ApplicationMode>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Map_u_8_application_mode_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 792)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorMapEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_map_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<ApplicationMode?>
      crateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<ApplicationMode?>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
            sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 790)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorOptionEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_option_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<Set<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<Set<ApplicationMode>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Set_application_mode_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 793)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorSetEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_set_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<MirrorStructTwinSync>
      crateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<MirrorStructTwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_mirror_struct_twin_sync_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 774)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorStructStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_struct_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      crateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
            sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 775)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorTupleStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_tuple_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Stream<List<ApplicationMode>>
      crateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<List<ApplicationMode>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_application_mode_Sse(sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 791)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncMirrorVecEnumStreamTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "mirror_vec_enum_stream_twin_sync",
            argNames: ["sink"],
          );

  @override
  Numbers crateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSync(
      {required int num, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 777)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncRepeatNumberTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_number_twin_sync",
            argNames: ["num", "times"],
          );

  @override
  Sequences crateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSync(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 778)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncRepeatSequenceTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "repeat_sequence_twin_sync",
            argNames: ["seq", "times"],
          );

  @override
  ContainsMirroredSubStructTwinSync
      crateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 787)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_contains_mirrored_sub_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestContainsMirroredSubStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_contains_mirrored_sub_struct_twin_sync",
            argNames: [],
          );

  @override
  List<RawStringMirrored>
      crateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 785)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestFallibleOfRawStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_fallible_of_raw_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  StructWithHashMap
      crateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 788)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_hash_map,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestHashmapWithMirroredValueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_hashmap_with_mirrored_value_twin_sync",
            argNames: [],
          );

  @override
  List<RawStringEnumMirrored>
      crateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 786)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestListOfNestedEnumsMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_nested_enums_mirrored_twin_sync",
            argNames: [],
          );

  @override
  ListOfNestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 784)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestListOfRawNestedStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_list_of_raw_nested_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  NestedRawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 782)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestNestedRawStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_nested_raw_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  RawStringEnumMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSync(
          {required bool nested, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 783)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSyncConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestRawStringEnumMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_enum_mirrored_twin_sync",
            argNames: ["nested"],
          );

  @override
  RawStringMirrored
      crateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 781)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMirrorTwinSyncTestRawStringMirroredTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_mirrored_twin_sync",
            argNames: [],
          );

  @override
  Future<BigBuffersTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 798, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleBigBuffersTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_big_buffers_twin_rust_async",
            argNames: [],
          );

  @override
  Future<MyTreeNodeTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsync(
          {required MyTreeNodeTwinRustAsync s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_rust_async(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 795, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleComplexStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_complex_struct_twin_rust_async",
            argNames: ["s"],
          );

  @override
  Future<MyNestedStructTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsync(
          {required MyNestedStructTwinRustAsync s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_rust_async(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 797, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleNestedStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_struct_twin_rust_async",
            argNames: ["s"],
          );

  @override
  Future<String>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsync(
          {required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 801, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_twin_rust_async",
            argNames: ["s"],
          );

  @override
  Future<MySize>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsync(
          {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 803, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_struct_twin_rust_async",
            argNames: ["arg", "boxed"],
          );

  @override
  Future<Uint8List>
      crateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsync(
          {required List<int> v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 802, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsyncConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncHandleVecU8TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_u8_twin_rust_async",
            argNames: ["v"],
          );

  @override
  Future<List<WeekdaysTwinRustAsync>>
      crateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsync(
          {required List<WeekdaysTwinRustAsync> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_rust_async(weekdays, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 796, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncListOfPrimitiveEnumsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "list_of_primitive_enums_twin_rust_async",
            argNames: ["weekdays"],
          );

  @override
  Future<AbcTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsync(
          {required AbcTwinRustAsync abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_rust_async(abc, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 799, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsyncConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncTestAbcEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_abc_enum_twin_rust_async",
            argNames: ["abc"],
          );

  @override
  Future<StructWithEnumTwinRustAsync>
      crateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsync(
          {required StructWithEnumTwinRustAsync se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_rust_async(se, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 800, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsyncConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinRustAsyncTestStructWithEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_struct_with_enum_twin_rust_async",
            argNames: ["se"],
          );

  @override
  BigBuffersTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 807)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleBigBuffersTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_big_buffers_twin_sync",
            argNames: [],
          );

  @override
  MyTreeNodeTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSync(
          {required MyTreeNodeTwinSync s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_sync(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 804)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleComplexStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_complex_struct_twin_sync",
            argNames: ["s"],
          );

  @override
  MyNestedStructTwinSync
      crateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSync(
          {required MyNestedStructTwinSync s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_sync(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 806)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleNestedStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_struct_twin_sync",
            argNames: ["s"],
          );

  @override
  String crateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSync(
      {required String s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 810)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_twin_sync",
            argNames: ["s"],
          );

  @override
  MySize crateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSync(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 812)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_struct_twin_sync",
            argNames: ["arg", "boxed"],
          );

  @override
  Uint8List crateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSync(
      {required List<int> v, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 811)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSyncConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncHandleVecU8TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_u8_twin_sync",
            argNames: ["v"],
          );

  @override
  List<WeekdaysTwinSync>
      crateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSync(
          {required List<WeekdaysTwinSync> weekdays, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_sync(weekdays, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 805)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncListOfPrimitiveEnumsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "list_of_primitive_enums_twin_sync",
            argNames: ["weekdays"],
          );

  @override
  AbcTwinSync crateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSync(
      {required AbcTwinSync abc, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_sync(abc, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 808)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSyncConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncTestAbcEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_abc_enum_twin_sync",
            argNames: ["abc"],
          );

  @override
  StructWithEnumTwinSync
      crateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSync(
          {required StructWithEnumTwinSync se, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_sync(se, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 809)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSyncConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscExampleTwinSyncTestStructWithEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_struct_with_enum_twin_sync",
            argNames: ["se"],
          );

  @override
  Future<EmptyTwinRustAsync>
      crateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsync(
          {required EmptyTwinRustAsync empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_rust_async(empty, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 816, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsyncConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncEmptyStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "empty_struct_twin_rust_async",
            argNames: ["empty"],
          );

  @override
  Future<void>
      crateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 813, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncFuncReturnUnitTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_unit_twin_rust_async",
            argNames: [],
          );

  @override
  Future<List<MySize>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsync(
          {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 814, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsyncConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleListOfStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_list_of_struct_twin_rust_async",
            argNames: ["l"],
          );

  @override
  Future<List<String>>
      crateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsync(
          {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 815, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsyncConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinRustAsyncHandleStringListTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_list_twin_rust_async",
            argNames: ["names"],
          );

  @override
  EmptyTwinSync crateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSync(
      {required EmptyTwinSync empty, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_sync(empty, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 820)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSyncConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncEmptyStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "empty_struct_twin_sync",
            argNames: ["empty"],
          );

  @override
  void crateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 817)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncFuncReturnUnitTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_return_unit_twin_sync",
            argNames: [],
          );

  @override
  List<MySize> crateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSync(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 818)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSyncConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncHandleListOfStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_list_of_struct_twin_sync",
            argNames: ["l"],
          );

  @override
  List<String> crateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSync(
      {required List<String> names, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 819)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSyncConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualMiscTypeTwinSyncHandleStringListTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_string_list_twin_sync",
            argNames: ["names"],
          );

  @override
  Future<NewTypeIntTwinRustAsync>
      crateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsync(
          {required NewTypeIntTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 821, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualNewtypePatternTwinRustAsyncHandleNewtypeTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_newtype_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  NewTypeIntTwinSync
      crateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSync(
          {required NewTypeIntTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 822)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualNewtypePatternTwinSyncHandleNewtypeTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_newtype_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<int?>
      crateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsync(
          {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 823, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalPrimitiveMiscTwinRustAsyncPrimitiveOptionalTypesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_optional_types_twin_rust_async",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  int?
      crateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSync(
          {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 824)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalPrimitiveMiscTwinSyncPrimitiveOptionalTypesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_optional_types_twin_sync",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  Future<double>
      crateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsync(
          {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 828, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleIncrementBoxedOptionalTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_increment_boxed_optional_twin_rust_async",
            argNames: ["opt"],
          );

  @override
  Future<String>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsync(
          {int? i8Box,
          int? u8Box,
          int? i32Box,
          int? i64Box,
          double? f64Box,
          bool? boolbox,
          ExoticOptionalsTwinRustAsync? structbox,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_rust_async(
            structbox, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 830, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionBoxArgumentsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_option_box_arguments_twin_rust_async",
            argNames: [
              "i8Box",
              "u8Box",
              "i32Box",
              "i64Box",
              "f64Box",
              "boolbox",
              "structbox"
            ],
          );

  @override
  Future<ExoticOptionalsTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsync(
          {ExoticOptionalsTwinRustAsync? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
            opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 827, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalIncrementTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_increment_twin_rust_async",
            argNames: ["opt"],
          );

  @override
  Future<double?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsync(
          {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 825, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_return_twin_rust_async",
            argNames: ["left", "right"],
          );

  @override
  Future<ElementTwinRustAsync?>
      crateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsync(
          {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 826, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsyncConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleOptionalStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_struct_twin_rust_async",
            argNames: ["document"],
          );

  @override
  Future<OptVecsTwinRustAsync>
      crateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsync(
          {required OptVecsTwinRustAsync opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_rust_async(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 829, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinRustAsyncHandleVecOfOptsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_opts_twin_rust_async",
            argNames: ["opt"],
          );

  @override
  double
      crateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSync(
          {double? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 834)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleIncrementBoxedOptionalTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_increment_boxed_optional_twin_sync",
            argNames: ["opt"],
          );

  @override
  String crateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_sync(structbox, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 836)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionBoxArgumentsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_option_box_arguments_twin_sync",
            argNames: [
              "i8Box",
              "u8Box",
              "i32Box",
              "i64Box",
              "f64Box",
              "boolbox",
              "structbox"
            ],
          );

  @override
  ExoticOptionalsTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSync(
          {ExoticOptionalsTwinSync? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_sync(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 833)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionalIncrementTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_increment_twin_sync",
            argNames: ["opt"],
          );

  @override
  double? crateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSync(
      {required double left, required double right, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 831)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionalReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_return_twin_sync",
            argNames: ["left", "right"],
          );

  @override
  ElementTwinSync?
      crateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSync(
          {String? document, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 832)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSyncConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleOptionalStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_optional_struct_twin_sync",
            argNames: ["document"],
          );

  @override
  OptVecsTwinSync crateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_sync(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 835)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOptionalTwinSyncHandleVecOfOptsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_opts_twin_sync",
            argNames: ["opt"],
          );

  @override
  Future<int> crateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 839, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowI32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_i32_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsync(
          {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 838, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStrTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_str_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<String>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsync(
          {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 837, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStringTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_string_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<SimpleStructForBorrowTwinRustAsync>
      crateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsync(
          {required SimpleStructForBorrowTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 840, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_for_borrow_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinRustAsyncBorrowStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  int crateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSync(
      {required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 843)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowI32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_i32_twin_sync",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSync(
      {required String arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 842)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowStrTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_str_twin_sync",
            argNames: ["arg"],
          );

  @override
  String crateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSync(
      {required String arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 841)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowStringTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_string_twin_sync",
            argNames: ["arg"],
          );

  @override
  SimpleStructForBorrowTwinSync
      crateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSync(
          {required SimpleStructForBorrowTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_simple_struct_for_borrow_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 844)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_struct_for_borrow_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualOwnershipTwinSyncBorrowStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "borrow_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<VecOfPrimitivePackTwinRustAsync>
      crateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsync(
          {required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 845, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsyncConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveListMiscTwinRustAsyncHandleVecOfPrimitiveTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_primitive_twin_rust_async",
            argNames: ["n"],
          );

  @override
  VecOfPrimitivePackTwinSync
      crateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSync(
          {required int n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 846)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSyncConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveListMiscTwinSyncHandleVecOfPrimitiveTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_vec_of_primitive_twin_sync",
            argNames: ["n"],
          );

  @override
  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsync(
          {required int myI32,
          required int myI64,
          required double myF64,
          required bool myBool,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 847, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveTypesTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_types_twin_rust_async",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  Future<int>
      crateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsync(
          {required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 848, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinRustAsyncPrimitiveU32TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_u32_twin_rust_async",
            argNames: ["myU32"],
          );

  @override
  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 849)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveTypesTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_types_twin_sync",
            argNames: ["myI32", "myI64", "myF64", "myBool"],
          );

  @override
  int crateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSync(
      {required int myU32, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 850)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualPrimitiveMiscTwinSyncPrimitiveU32TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "primitive_u32_twin_sync",
            argNames: ["myU32"],
          );

  @override
  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 852, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinRustAsyncTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "test_more_than_just_one_raw_string_struct_twin_rust_async",
            argNames: [],
          );

  @override
  Future<RawStringItemStructTwinRustAsync>
      crateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 851, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinRustAsyncTestRawStringItemStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_struct_twin_rust_async",
            argNames: [],
          );

  @override
  MoreThanJustOneRawStringStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 854)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinSyncTestMoreThanJustOneRawStringStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_more_than_just_one_raw_string_struct_twin_sync",
            argNames: [],
          );

  @override
  RawStringItemStructTwinSync
      crateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 853)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRawStringTwinSyncTestRawStringItemStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_struct_twin_sync",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 898, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 899, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_mut_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 897, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 901, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_getter_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 900, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_return_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 895, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_new_custom_name_twin_rust_async",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 894, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinRustAsync_new_twin_rust_async",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 896, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_new_with_result_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 891, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 892, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_mut_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 890, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 893, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 856, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_borrow_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          required int adder,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 857, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_mut_borrow_twin_rust_async",
            argNames: ["arg", "expect", "adder"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 859, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_arg_own_and_return_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 855, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsync(
          {required List<NonCloneSimpleTwinRustAsync> arg,
          required List<int> expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_list_prim_i_32_loose(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 880, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueArgVecOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_vec_own_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 889, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_borrow_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync borrow,
          required NonCloneSimpleTwinRustAsync mutBorrow,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 888, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async",
            argNames: ["borrow", "mutBorrow"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsync(
          {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 864, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_arg_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BoxFnStringString>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 865, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueCallableReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_return_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync a,
          required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync b,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 876, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueDummyTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_dummy_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsync(
          {required NonCloneSimpleEnumTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 877, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_arg_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleEnumTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 878, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsync(
          {required EnumWithGoodAndOpaqueTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 873, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 874, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_rust_async",
            argNames: [],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 875, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg,
          required int expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 882, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_arg_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsync(
          {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 884, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsyncConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_twin_rust_async",
            argNames: ["initial"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsync(
          {required StructWithExplicitAutoOpaqueFieldTwinRustAsync arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 883, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueExplicitStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required String b,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 861, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsync(
          {required BoxMyTraitTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 862, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_arg_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BoxMyTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 863, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaquePlusSignReturnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_return_twin_rust_async",
            argNames: [],
          );

  @override
  Future<(OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync)>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 886, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async",
            argNames: [],
          );

  @override
  Future<OpaqueTwoTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 887, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_two_twin_rust_async",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsync(
          {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 858, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsyncConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_own_twin_rust_async",
            argNames: ["initial"],
          );

  @override
  Future<List<NonCloneSimpleTwinRustAsync>>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 881, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueReturnVecOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_vec_own_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync apple,
          required NonCloneSimpleTwinRustAsync orange,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            apple, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            orange, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 885, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsyncConstMeta,
      argValues: [apple, orange],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueSleepTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_sleep_twin_rust_async",
            argNames: ["apple", "orange"],
          );

  @override
  Stream<NonCloneSimpleTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<NonCloneSimpleTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 879, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_stream_sink_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldTwinRustAsync arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 871, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 872, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_good_and_opaque_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
          {required BoxHelloTraitTwinRustAsync arg,
          required String expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 867, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_borrow_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
          {required BoxHelloTraitTwinRustAsync arg,
          required String expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 868, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
          {required BoxHelloTraitTwinRustAsync arg,
          required String expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 866, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_arg_own_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BoxHelloTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 869, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_one_twin_rust_async",
            argNames: [],
          );

  @override
  Future<BoxHelloTraitTwinRustAsync>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 870, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_two_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync a,
          required NonCloneSimpleTwinRustAsync b,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 860, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinRustAsyncRustAutoOpaqueTwoArgsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_two_args_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 945)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 946)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 944)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync",
            argNames: ["that"],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 948)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodGetterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_getter_twin_sync",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 947)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_return_own_twin_sync",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 942)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_new_custom_name_twin_sync",
            argNames: [],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 941)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_new_twin_sync",
            argNames: [],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 943)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncNewWithResultTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_new_with_result_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 938)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 939)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 937)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_static_method_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 940)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_return_own_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 903)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_borrow_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          required int adder,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 904)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSyncConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_mut_borrow_twin_sync",
            argNames: ["arg", "expect", "adder"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSync(
          {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 906)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_and_return_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 902)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSync(
          {required List<NonCloneSimpleTwinSync> arg,
          required List<int> expect,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_list_prim_i_32_loose(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 927)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueArgVecOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_vec_own_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 936)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_borrow_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync borrow,
      required NonCloneSimpleTwinSync mutBorrow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            mutBorrow, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 935)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSyncConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueBorrowAndMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync",
            argNames: ["borrow", "mutBorrow"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSync(
          {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 911)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_arg_twin_sync",
            argNames: ["arg"],
          );

  @override
  BoxFnStringString
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 912)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueCallableReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_return_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSync(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSync a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinSync b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 923)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueDummyTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_dummy_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSync(
          {required NonCloneSimpleEnumTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 924)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  NonCloneSimpleEnumTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 925)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_return_own_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSync(
          {required EnumWithGoodAndOpaqueTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_good_and_opaque_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 920)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 921)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_sync",
            argNames: [],
          );

  @override
  EnumWithGoodAndOpaqueTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 922)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSync(
          {required NonCloneSimpleTwinSync arg,
          required int expect,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 929)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_arg_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSync(
          {required int initial, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 931)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSyncConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_twin_sync",
            argNames: ["initial"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSync(
          {required StructWithExplicitAutoOpaqueFieldTwinSync arg,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 930)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueExplicitStructTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_struct_twin_sync",
            argNames: ["arg"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSync(
          {required NonCloneSimpleTwinSync a,
          required String b,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 908)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSync(
          {required BoxMyTraitTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 909)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_arg_twin_sync",
            argNames: ["arg"],
          );

  @override
  BoxMyTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 910)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaquePlusSignReturnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_return_twin_sync",
            argNames: [],
          );

  @override
  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 933)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_sync",
            argNames: [],
          );

  @override
  OpaqueTwoTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 934)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOpaqueTwoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_two_twin_sync",
            argNames: [],
          );

  @override
  NonCloneSimpleTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSync(
          {required int initial, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 905)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSyncConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_own_twin_sync",
            argNames: ["initial"],
          );

  @override
  List<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 928)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueReturnVecOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_vec_own_twin_sync",
            argNames: [],
          );

  @override
  int crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSync(
      {required NonCloneSimpleTwinSync apple,
      required NonCloneSimpleTwinSync orange,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            apple, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            orange, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 932)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSyncConstMeta,
      argValues: [apple, orange],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueSleepTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_sleep_twin_sync",
            argNames: ["apple", "orange"],
          );

  @override
  Stream<NonCloneSimpleTwinSync>
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSync(
          {dynamic hint}) {
    final sink = RustStreamSink<NonCloneSimpleTwinSync>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
            sink, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 926)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_stream_sink_twin_sync",
            argNames: ["sink"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
          {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 918)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  StructWithGoodAndOpaqueFieldTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 919)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_good_and_opaque_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync",
            argNames: [],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgBorrowTwinSync(
          {required BoxHelloTraitTwinSync arg,
          required String expect,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 914)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgMutBorrowTwinSync(
          {required BoxHelloTraitTwinSync arg,
          required String expect,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 915)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  void
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgOwnTwinSync(
          {required BoxHelloTraitTwinSync arg,
          required String expect,
          dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 913)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_arg_own_twin_sync",
            argNames: ["arg", "expect"],
          );

  @override
  BoxHelloTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnOneTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 916)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_return_own_one_twin_sync",
            argNames: [],
          );

  @override
  BoxHelloTraitTwinSync
      crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 917)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_return_own_two_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 907)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustAutoOpaqueTwinSyncRustAutoOpaqueTwoArgsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_two_args_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<EnumOpaqueTwinRustAsyncArray5>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 951, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_rust_async_array_5,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateArrayOpaqueEnumTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_array_opaque_enum_twin_rust_async",
            argNames: [],
          );

  @override
  Future<OpaqueNestedTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 960, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateNestedOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_opaque_twin_rust_async",
            argNames: [],
          );

  @override
  Future<HideDataTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 949, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_opaque_twin_rust_async",
            argNames: [],
          );

  @override
  Future<HideDataTwinRustAsync?>
      crateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsync(
          {HideDataTwinRustAsync? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 950, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncCreateOptionOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_option_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<FrbOpaqueReturnTwinRustAsync>
      crateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 963, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueReturnTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncFrbGeneratorTestTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "frb_generator_test_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsync(
          {required HideDataTwinRustAsyncArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync_array_2(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 957, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayRunTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_run_twin_rust_async",
            argNames: ["data"],
          );

  @override
  Future<HideDataTwinRustAsyncArray2>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 955, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinRustAsync_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsync(
          {required List<HideDataTwinRustAsync> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_HideDataTwinRustAsync(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 959, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecRunTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_run_twin_rust_async",
            argNames: ["data"],
          );

  @override
  Future<List<HideDataTwinRustAsync>>
      crateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 958, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_HideDataTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncOpaqueVecTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_twin_rust_async",
            argNames: [],
          );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsync(
          {required EnumOpaqueTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_rust_async(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 952, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunEnumOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_enum_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<void>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsync(
          {required OpaqueNestedTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 961, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNestedOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_nested_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsync(
          {required NonCloneDataTwinRustAsync clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_NonCloneDataTwinRustAsync(clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 956, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsyncConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunNonCloneTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_non_clone_twin_rust_async",
            argNames: ["clone"],
          );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 953, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsync(
          {required HideDataTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 954, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncRunOpaqueWithDelayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_with_delay_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  Future<String>
      crateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsync(
          {required HideDataTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinRustAsync(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 962, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinRustAsyncUnwrapRustOpaqueTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "unwrap_rust_opaque_twin_rust_async",
            argNames: ["opaque"],
          );

  @override
  EnumOpaqueTwinSyncArray5
      crateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 966)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_sync_array_5,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateArrayOpaqueEnumTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_array_opaque_enum_twin_sync",
            argNames: [],
          );

  @override
  OpaqueNestedTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 975)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateNestedOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_nested_opaque_twin_sync",
            argNames: [],
          );

  @override
  HideDataTwinSync crateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 964)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_opaque_twin_sync",
            argNames: [],
          );

  @override
  HideDataTwinSync?
      crateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSync(
          {HideDataTwinSync? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
            opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 965)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncCreateOptionOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "create_option_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  FrbOpaqueReturnTwinSync
      crateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 978)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueReturnTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncFrbGeneratorTestTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "frb_generator_test_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSync(
      {required HideDataTwinSyncArray2 data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync_array_2(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 972)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayRunTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_run_twin_sync",
            argNames: ["data"],
          );

  @override
  HideDataTwinSyncArray2
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 970)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinSync_array_2,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueArrayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_array_twin_sync",
            argNames: [],
          );

  @override
  void crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSync(
      {required List<HideDataTwinSync> data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_HideDataTwinSync(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 974)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecRunTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_run_twin_sync",
            argNames: ["data"],
          );

  @override
  List<HideDataTwinSync>
      crateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 973)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_HideDataTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncOpaqueVecTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "opaque_vec_twin_sync",
            argNames: [],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 967)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunEnumOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_enum_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  void crateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 976)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunNestedOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_nested_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSync(
      {required NonCloneDataTwinSync clone, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_NonCloneDataTwinSync(clone, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 971)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSyncConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunNonCloneTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_non_clone_twin_sync",
            argNames: ["clone"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSync(
      {required HideDataTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 968)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSync(
      {required HideDataTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 969)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncRunOpaqueWithDelayTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "run_opaque_with_delay_twin_sync",
            argNames: ["opaque"],
          );

  @override
  String crateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSync(
      {required HideDataTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinSync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 977)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualRustOpaqueTwinSyncUnwrapRustOpaqueTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "unwrap_rust_opaque_twin_sync",
            argNames: ["opaque"],
          );

  @override
  Future<int> crateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsync(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 979, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualSimpleTwinRustAsyncSimpleAdderTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_adder_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  int crateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSync(
      {required int a, required int b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 980)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualSimpleTwinSyncSimpleAdderTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "simple_adder_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsync(
          {dynamic hint}) async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 981, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_return_error_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<Stream<String>>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsync(
          {dynamic hint}) async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 982, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamReturnPanicTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_return_panic_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<int>
      crateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsync(
          {required int a, required int b, dynamic hint}) {
    final c = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_StreamSink_u_32_Sse(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 983, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    )));
    return c.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncFuncStreamSinkArgPositionTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_sink_arg_position_twin_rust_async",
            argNames: ["a", "b", "c"],
          );

  @override
  Stream<MyStreamEntryTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<MyStreamEntryTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_my_stream_entry_twin_rust_async_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 984, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamOfStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_of_struct_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsync(
          {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<LogTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_twin_rust_async_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 985, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_sink_at_1_twin_rust_async",
            argNames: ["key", "max", "sink"],
          );

  @override
  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsync(
          {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<LogTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_StreamSink_log_twin_rust_async_Sse(sink, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 986, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsyncConstMeta,
      argValues: [key, sink, max],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt2TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_sink_at_2_twin_rust_async",
            argNames: ["key", "sink", "max"],
          );

  @override
  Stream<LogTwinRustAsync>
      crateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsync(
          {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<LogTwinRustAsync>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_twin_rust_async_Sse(sink, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 987, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsyncConstMeta,
      argValues: [sink, key, max],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncHandleStreamSinkAt3TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_stream_sink_at_3_twin_rust_async",
            argNames: ["sink", "key", "max"],
          );

  @override
  Stream<U8Array2>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsync(
          {dynamic hint}) {
    final sink = RustStreamSink<U8Array2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_8_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 988, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsyncConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkFixedSizedPrimitiveArrayTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "stream_sink_fixed_sized_primitive_array_twin_rust_async",
            argNames: ["sink"],
          );

  @override
  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsync(
          {required MyStructContainingStreamSinkTwinRustAsync arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 990, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideStructTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_inside_struct_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsync(
          {required List<RustStreamSink<int>> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_StreamSink_i_32_Sse(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 989, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStreamTwinRustAsyncStreamSinkInsideVecTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_inside_vec_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<StructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsync(
          {required StructWithOneFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 992, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithOneFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_one_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<StructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsync(
          {required StructWithTwoFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 993, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithTwoFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_two_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<StructWithZeroFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsync(
          {required StructWithZeroFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 991, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncStructWithZeroFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_zero_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<TupleStructWithOneFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 994, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_tuple_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithOneFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_one_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<TupleStructWithTwoFieldTwinRustAsync>
      crateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 995, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_tuple_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinRustAsyncFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_two_field_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  StructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSync(
          {required StructWithOneFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 997)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncStructWithOneFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_one_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  StructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSync(
          {required StructWithTwoFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 998)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncStructWithTwoFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_two_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  StructWithZeroFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSync(
          {required StructWithZeroFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 996)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncStructWithZeroFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_zero_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  TupleStructWithOneFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSync(
          {required TupleStructWithOneFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 999)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithOneFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_one_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  TupleStructWithTwoFieldTwinSync
      crateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSync(
          {required TupleStructWithTwoFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1000)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualStructureTwinSyncFuncTupleStructWithTwoFieldTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_two_field_twin_sync",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsync(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1002, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinRustAsyncTestTuple2TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_2_twin_rust_async",
            argNames: ["value"],
          );

  @override
  Future<(String, int)>
      crateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsync(
          {(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1001, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinRustAsyncTestTupleTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_twin_rust_async",
            argNames: ["value"],
          );

  @override
  void crateApiPseudoManualTupleTwinSyncTestTuple2TwinSync(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1004)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualTupleTwinSyncTestTuple2TwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinSyncTestTuple2TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_2_twin_sync",
            argNames: ["value"],
          );

  @override
  (String, int) crateApiPseudoManualTupleTwinSyncTestTupleTwinSync(
      {(String, int)? value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1003)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPseudoManualTupleTwinSyncTestTupleTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTupleTwinSyncTestTupleTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "test_tuple_twin_sync",
            argNames: ["value"],
          );

  @override
  Future<int>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsync(
          {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1005, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_id_twin_rust_async",
            argNames: ["input"],
          );

  @override
  Future<TestModelTwinRustAsync>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsync(
          {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1007, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeAliasModelTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_model_twin_rust_async",
            argNames: ["input"],
          );

  @override
  Future<int>
      crateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsync(
          {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1006, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinRustAsyncHandleTypeNestAliasIdTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_nest_alias_id_twin_rust_async",
            argNames: ["input"],
          );

  @override
  int crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSync(
      {required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1008)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_id_twin_sync",
            argNames: ["input"],
          );

  @override
  TestModelTwinSync
      crateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSync(
          {required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1010)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeAliasModelTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_alias_model_twin_sync",
            argNames: ["input"],
          );

  @override
  int crateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSync(
      {required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1009)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualTypeAliasTwinSyncHandleTypeNestAliasIdTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_nest_alias_id_twin_sync",
            argNames: ["input"],
          );

  @override
  Future<FeatureUuidTwinRustAsync>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsync(
          {required FeatureUuidTwinRustAsync ids, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_uuid_twin_rust_async(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1013, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_feature_uuid_twin_rust_async,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsyncConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleNestedUuidsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_uuids_twin_rust_async",
            argNames: ["ids"],
          );

  @override
  Future<UuidValue>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsync(
          {required UuidValue id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1011, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuid_twin_rust_async",
            argNames: ["id"],
          );

  @override
  Future<List<UuidValue>>
      crateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsync(
          {required List<UuidValue> ids, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Uuid(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1012, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsyncConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinRustAsyncHandleUuidsTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuids_twin_rust_async",
            argNames: ["ids"],
          );

  @override
  FeatureUuidTwinSync
      crateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSync(
          {required FeatureUuidTwinSync ids, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_uuid_twin_sync(ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1016)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_feature_uuid_twin_sync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSyncConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinSyncHandleNestedUuidsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_nested_uuids_twin_sync",
            argNames: ["ids"],
          );

  @override
  UuidValue crateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSync(
      {required UuidValue id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1014)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuid_twin_sync",
            argNames: ["id"],
          );

  @override
  List<UuidValue> crateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSync(
      {required List<UuidValue> ids, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Uuid(ids, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1015)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSyncConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiPseudoManualUuidTypeTwinSyncHandleUuidsTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "handle_uuids_twin_sync",
            argNames: ["ids"],
          );

  @override
  Future<MoreThanJustOneRawStringStructTwinNormal>
      crateApiRawStringTestMoreThanJustOneRawStringStructTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1018, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRawStringTestMoreThanJustOneRawStringStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRawStringTestMoreThanJustOneRawStringStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_more_than_just_one_raw_string_struct_twin_normal",
            argNames: [],
          );

  @override
  Future<RawStringItemStructTwinNormal>
      crateApiRawStringTestRawStringItemStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1017, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRawStringTestRawStringItemStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRawStringTestRawStringItemStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "test_raw_string_item_struct_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1062, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1063, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1061, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1065, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_getter_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1064, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1059, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinNormal_new_custom_name_twin_normal",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1058, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinNormal_new_twin_normal",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1060, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalNewWithResultTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinNormal_new_with_result_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1055, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1056, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1054, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1057, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1020, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_borrow_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1021, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormalConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_mut_borrow_twin_normal",
            argNames: ["arg", "expect", "adder"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1023, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_and_return_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1019, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_own_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormal(
      {required List<NonCloneSimpleTwinNormal> arg,
      required List<int> expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_list_prim_i_32_loose(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1044, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueArgVecOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_arg_vec_own_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1053, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_borrow_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal borrow,
      required NonCloneSimpleTwinNormal mutBorrow,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1052, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormalConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueBorrowAndMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_normal",
            argNames: ["borrow", "mutBorrow"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormal(
      {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1028, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueCallableArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_arg_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BoxFnStringString>
      crateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1029, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueCallableReturnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_callable_return_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormal(
      {required StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal a,
      required EnumWithGoodAndOpaqueWithoutOptionTwinNormal b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1040, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueDummyTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_dummy_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormal(
      {required NonCloneSimpleEnumTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1041, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleEnumTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1042, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_enum_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormal(
          {required EnumWithGoodAndOpaqueTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_good_and_opaque_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1037, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1038, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_good_twin_normal",
            argNames: [],
          );

  @override
  Future<EnumWithGoodAndOpaqueTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1039, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_good_and_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_enum_with_good_and_opaque_return_own_opaque_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1046, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_arg_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormal(
          {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1048, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormalConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitReturnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_return_twin_normal",
            argNames: ["initial"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormal(
      {required StructWithExplicitAutoOpaqueFieldTwinNormal arg,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1047, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueExplicitStructTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_explicit_struct_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required NonCloneSimpleTwinNormal a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1025, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormal(
      {required BoxMyTraitTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1026, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_arg_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BoxMyTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1027, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaquePlusSignReturnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_plus_sign_return_twin_normal",
            argNames: [],
          );

  @override
  Future<(OpaqueOneTwinNormal, OpaqueTwoTwinNormal)>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1050, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_normal",
            argNames: [],
          );

  @override
  Future<OpaqueTwoTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1051, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOpaqueTwoTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_opaque_two_twin_normal",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormal(
          {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1022, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormalConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_own_twin_normal",
            argNames: ["initial"],
          );

  @override
  Future<List<NonCloneSimpleTwinNormal>>
      crateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1045, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueReturnVecOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_return_vec_own_twin_normal",
            argNames: [],
          );

  @override
  Future<int> crateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormal(
      {required NonCloneSimpleTwinNormal apple,
      required NonCloneSimpleTwinNormal orange,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            apple, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            orange, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1049, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormalConstMeta,
      argValues: [apple, orange],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueSleepTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_sleep_twin_normal",
            argNames: ["apple", "orange"],
          );

  @override
  Stream<NonCloneSimpleTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormal({dynamic hint}) {
    final sink = RustStreamSink<NonCloneSimpleTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
            sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1043, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_stream_sink_twin_normal",
            argNames: ["sink"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
          {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1035, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1036, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_struct_with_good_and_opaque_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgBorrowTwinNormal(
          {required BoxHelloTraitTwinNormal arg,
          required String expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1031, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgMutBorrowTwinNormal(
          {required BoxHelloTraitTwinNormal arg,
          required String expect,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1032, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgMutBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgOwnTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1030, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_trait_object_arg_own_twin_normal",
            argNames: ["arg", "expect"],
          );

  @override
  Future<BoxHelloTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnOneTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1033, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnOneTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnOneTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_one_twin_normal",
            argNames: [],
          );

  @override
  Future<BoxHelloTraitTwinNormal>
      crateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1034, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_two_twin_normal",
            argNames: [],
          );

  @override
  Future<void> crateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1024, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustAutoOpaqueRustAutoOpaqueTwoArgsTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "rust_auto_opaque_two_args_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<EnumOpaqueTwinNormalArray5>
      crateApiRustOpaqueCreateArrayOpaqueEnumTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1068, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_normal_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateArrayOpaqueEnumTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueCreateArrayOpaqueEnumTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "create_array_opaque_enum_twin_normal",
            argNames: [],
          );

  @override
  Future<OpaqueNestedTwinNormal> crateApiRustOpaqueCreateNestedOpaqueTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1077, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateNestedOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueCreateNestedOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<HideDataTwinNormal> crateApiRustOpaqueCreateOpaqueTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1066, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueCreateOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<HideDataTwinNormal?> crateApiRustOpaqueCreateOptionOpaqueTwinNormal(
      {HideDataTwinNormal? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1067, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueCreateOptionOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueCreateOptionOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<FrbOpaqueReturnTwinNormal>
      crateApiRustOpaqueFrbGeneratorTestTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1080, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueReturnTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueFrbGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueFrbGeneratorTestTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_normal",
        argNames: [],
      );

  @override
  Future<void> crateApiRustOpaqueOpaqueArrayRunTwinNormal(
      {required HideDataTwinNormalArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal_array_2(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1074, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueArrayRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueArrayRunTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<HideDataTwinNormalArray2> crateApiRustOpaqueOpaqueArrayTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1072, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataTwinNormal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueArrayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_twin_normal",
        argNames: [],
      );

  @override
  Future<void> crateApiRustOpaqueOpaqueVecRunTwinNormal(
      {required List<HideDataTwinNormal> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_HideDataTwinNormal(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1076, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueVecRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueVecRunTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_vec_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<List<HideDataTwinNormal>> crateApiRustOpaqueOpaqueVecTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1075, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_HideDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueOpaqueVecTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueOpaqueVecTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_vec_twin_normal",
        argNames: [],
      );

  @override
  Future<String> crateApiRustOpaqueRunEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1069, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunEnumOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunEnumOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_enum_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> crateApiRustOpaqueRunNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1078, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunNestedOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunNestedOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_nested_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> crateApiRustOpaqueRunNonCloneTwinNormal(
      {required NonCloneDataTwinNormal clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_NonCloneDataTwinNormal(clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1073, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunNonCloneTwinNormalConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunNonCloneTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_non_clone_twin_normal",
        argNames: ["clone"],
      );

  @override
  Future<String> crateApiRustOpaqueRunOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1070, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> crateApiRustOpaqueRunOpaqueWithDelayTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1071, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueRunOpaqueWithDelayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueRunOpaqueWithDelayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> crateApiRustOpaqueUnwrapRustOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_HideDataTwinNormal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1079, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRustOpaqueUnwrapRustOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiRustOpaqueUnwrapRustOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  FrbOpaqueSyncReturnTwinNormal
      crateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1084)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_FrbOpaqueSyncReturnTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncFrbSyncGeneratorTestTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "frb_sync_generator_test_twin_normal",
            argNames: [],
          );

  @override
  NonCloneDataTwinNormal crateApiRustOpaqueSyncSyncCreateNonCloneTwinNormal(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1083)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_NonCloneDataTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueSyncSyncCreateNonCloneTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncSyncCreateNonCloneTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_create_non_clone_twin_normal",
            argNames: [],
          );

  @override
  HideDataAnotherTwinNormal crateApiRustOpaqueSyncSyncCreateOpaqueTwinNormal(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1082)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_HideDataAnotherTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiRustOpaqueSyncSyncCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncSyncCreateOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_create_opaque_twin_normal",
            argNames: [],
          );

  @override
  HideDataAnotherTwinNormal?
      crateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1081)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiRustOpaqueSyncSyncOptionRustOpaqueTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "sync_option_rust_opaque_twin_normal",
            argNames: [],
          );

  @override
  Future<int> crateApiSimpleSimpleAdderTwinNormal(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1085, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSimpleAdderTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSimpleAdderTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "simple_adder_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<Stream<String>> crateApiStreamFuncStreamReturnErrorTwinNormal(
      {dynamic hint}) async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1086, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiStreamFuncStreamReturnErrorTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamFuncStreamReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_normal",
        argNames: ["sink"],
      );

  @override
  Future<Stream<String>> crateApiStreamFuncStreamReturnPanicTwinNormal(
      {dynamic hint}) async {
    final sink = RustStreamSink<String>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1087, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiStreamFuncStreamReturnPanicTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamFuncStreamReturnPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<int> crateApiStreamFuncStreamSinkArgPositionTwinNormal(
      {required int a, required int b, dynamic hint}) {
    final c = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_StreamSink_u_32_Sse(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1088, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamFuncStreamSinkArgPositionTwinNormalConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    )));
    return c.stream;
  }

  TaskConstMeta
      get kCrateApiStreamFuncStreamSinkArgPositionTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_stream_sink_arg_position_twin_normal",
            argNames: ["a", "b", "c"],
          );

  @override
  Stream<MyStreamEntryTwinNormal> crateApiStreamHandleStreamOfStructTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<MyStreamEntryTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_my_stream_entry_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1089, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamOfStructTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_normal",
        argNames: ["sink"],
      );

  @override
  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt1TwinNormal(
      {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<LogTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        sse_encode_StreamSink_log_twin_normal_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1090, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamSinkAt1TwinNormalConstMeta,
      argValues: [key, max, sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamSinkAt1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_normal",
        argNames: ["key", "max", "sink"],
      );

  @override
  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt2TwinNormal(
      {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<LogTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_StreamSink_log_twin_normal_Sse(sink, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1091, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamSinkAt2TwinNormalConstMeta,
      argValues: [key, sink, max],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamSinkAt2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_normal",
        argNames: ["key", "sink", "max"],
      );

  @override
  Stream<LogTwinNormal> crateApiStreamHandleStreamSinkAt3TwinNormal(
      {required int key, required int max, dynamic hint}) {
    final sink = RustStreamSink<LogTwinNormal>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_log_twin_normal_Sse(sink, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1092, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamHandleStreamSinkAt3TwinNormalConstMeta,
      argValues: [sink, key, max],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamHandleStreamSinkAt3TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_normal",
        argNames: ["sink", "key", "max"],
      );

  @override
  Stream<U8Array2> crateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormal(
      {dynamic hint}) {
    final sink = RustStreamSink<U8Array2>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_u_8_array_2_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1093, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta
      get kCrateApiStreamStreamSinkFixedSizedPrimitiveArrayTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "stream_sink_fixed_sized_primitive_array_twin_normal",
            argNames: ["sink"],
          );

  @override
  Future<void> crateApiStreamStreamSinkInsideStructTwinNormal(
      {required MyStructContainingStreamSinkTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1095, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamStreamSinkInsideStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiStreamStreamSinkInsideStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_inside_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> crateApiStreamStreamSinkInsideVecTwinNormal(
      {required List<RustStreamSink<int>> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_StreamSink_i_32_Sse(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1094, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamStreamSinkInsideVecTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiStreamStreamSinkInsideVecTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_inside_vec_twin_normal",
        argNames: ["arg"],
      );

  @override
  Stream<String> crateApiStreamMiscFuncStreamRealisticTwinNormal(
      {required String arg, dynamic hint}) {
    final sink = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(sink, serializer);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1096, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamMiscFuncStreamRealisticTwinNormalConstMeta,
      argValues: [sink, arg],
      apiImpl: this,
      hint: hint,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamMiscFuncStreamRealisticTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_realistic_twin_normal",
        argNames: ["sink", "arg"],
      );

  @override
  Future<Stream<int>> crateApiStreamMiscStreamSinkDartAsyncTwinNormal(
      {dynamic hint}) async {
    final sink = RustStreamSink<int>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1097, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamMiscStreamSinkDartAsyncTwinNormalConstMeta,
      argValues: [sink],
      apiImpl: this,
      hint: hint,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiStreamMiscStreamSinkDartAsyncTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_dart_async_twin_normal",
        argNames: ["sink"],
      );

  @override
  Future<StructWithOneFieldTwinNormal>
      crateApiStructureFuncStructWithOneFieldTwinNormal(
          {required StructWithOneFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1099, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureFuncStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncStructWithOneFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_one_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithTwoFieldTwinNormal>
      crateApiStructureFuncStructWithTwoFieldTwinNormal(
          {required StructWithTwoFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1100, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureFuncStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncStructWithTwoFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_two_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithZeroFieldTwinNormal>
      crateApiStructureFuncStructWithZeroFieldTwinNormal(
          {required StructWithZeroFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1098, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStructureFuncStructWithZeroFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncStructWithZeroFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_struct_with_zero_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<TupleStructWithOneFieldTwinNormal>
      crateApiStructureFuncTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1101, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructureFuncTupleStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncTupleStructWithOneFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_one_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<TupleStructWithTwoFieldTwinNormal>
      crateApiStructureFuncTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1102, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiStructureFuncTupleStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiStructureFuncTupleStructWithTwoFieldTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "func_tuple_struct_with_two_field_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> crateApiTupleTestTuple2TwinNormal(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1104, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTupleTestTuple2TwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiTupleTestTuple2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_tuple_2_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<(String, int)> crateApiTupleTestTupleTwinNormal(
      {(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1103, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTupleTestTupleTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiTupleTestTupleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_tuple_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<int> crateApiTypeAliasHandleTypeAliasIdTwinNormal(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1105, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypeAliasHandleTypeAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiTypeAliasHandleTypeAliasIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinNormal> crateApiTypeAliasHandleTypeAliasModelTwinNormal(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1107, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypeAliasHandleTypeAliasModelTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiTypeAliasHandleTypeAliasModelTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<int> crateApiTypeAliasHandleTypeNestAliasIdTwinNormal(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1106, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypeAliasHandleTypeNestAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCrateApiTypeAliasHandleTypeNestAliasIdTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "handle_type_nest_alias_id_twin_normal",
            argNames: ["input"],
          );

  @override
  Future<FeatureUuidTwinNormal> crateApiUuidTypeHandleNestedUuidsTwinNormal(
      {required FeatureUuidTwinNormal ids, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feature_uuid_twin_normal(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1110, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_feature_uuid_twin_normal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUuidTypeHandleNestedUuidsTwinNormalConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiUuidTypeHandleNestedUuidsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_uuids_twin_normal",
        argNames: ["ids"],
      );

  @override
  Future<UuidValue> crateApiUuidTypeHandleUuidTwinNormal(
      {required UuidValue id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Uuid(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1108, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUuidTypeHandleUuidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiUuidTypeHandleUuidTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_uuid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<List<UuidValue>> crateApiUuidTypeHandleUuidsTwinNormal(
      {required List<UuidValue> ids, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_Uuid(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1109, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_Uuid,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUuidTypeHandleUuidsTwinNormalConstMeta,
      argValues: [ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCrateApiUuidTypeHandleUuidsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_uuids_twin_normal",
        argNames: ["ids"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_DartOpaque_Output_unit(
          FutureOr<void> Function(Object) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_DartOpaque(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic) encode_DartFn_Inputs_String_Output_unit(
      FutureOr<void> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
          FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
              raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 =
          dco_decode_demo_struct_for_rust_call_dart_twin_normal(rawArg1);

      final rawOutput = await raw(arg0, arg1);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
          FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 =
          dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(rawArg1);

      final rawOutput = await raw(arg0, arg1);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_DartOpaque(FutureOr<Object> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_DartOpaque(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_String(FutureOr<String> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_String(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_unit(FutureOr<void> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
          FutureOr<DemoStructForRustCallDartTwinNormal> Function(
                  DemoStructForRustCallDartTwinNormal)
              raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_demo_struct_for_rust_call_dart_twin_normal(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_demo_struct_for_rust_call_dart_twin_normal(
          rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
          FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_demo_struct_for_rust_call_dart_twin_rust_async(
          rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_BoxdynDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_BoxdynDartDebugTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueReturnTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueReturnTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_FrbOpaqueSyncReturnTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_HideDataAnotherTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_HideDataAnotherTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_HideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_HideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_HideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_HideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_HideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_HideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_NonCloneDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_NonCloneDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnStringString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnStringString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueStructTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueStructTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ConstructorOpaqueSyncStructTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ConstructorOpaqueSyncStructTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DroppableTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DroppableTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleEnumTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueStructWithDartCodeTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueStructWithDartCodeTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SimpleOpaqueExternalStructWithMethod =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SimpleOpaqueExternalStructWithMethod =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StaticGetterOnlyTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StaticGetterOnlyTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleA => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleB => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleB => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithImplBlockInMultiFile => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32 =>
      wire.rust_arc_increment_strong_count_RustOpaque_i32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32 =>
      wire.rust_arc_decrement_strong_count_RustOpaque_i32;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  BoxFnStringString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxFnStringString.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethod.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleA
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleA.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleB
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleB.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithImplBlockInMultiFile
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithImplBlockInMultiFile.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinRustAsync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethod.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleA
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleA.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleB
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleB.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithImplBlockInMultiFile
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithImplBlockInMultiFile.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_Backtrace(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: false);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  FutureOr<void> Function(Object)
      dco_decode_DartFn_Inputs_DartOpaque_Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String) dco_decode_DartFn_Inputs_String_Output_unit(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
      dco_decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function(String, DemoStructForRustCallDartTwinRustAsync)
      dco_decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Object> Function() dco_decode_DartFn_Inputs__Output_DartOpaque(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<String> Function() dco_decode_DartFn_Inputs__Output_String(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<void> Function() dco_decode_DartFn_Inputs__Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<DemoStructForRustCallDartTwinNormal> Function(
          DemoStructForRustCallDartTwinNormal)
      dco_decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
          DemoStructForRustCallDartTwinRustAsync)
      dco_decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ObjectArray1 dco_decode_DartOpaque_array_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ObjectArray1(
        (raw as List<dynamic>).map(dco_decode_DartOpaque).toList());
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinNormal>
      dco_decode_Map_String_enum_simple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_enum_simple_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinRustAsync>
      dco_decode_Map_String_enum_simple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_enum_simple_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinSync> dco_decode_Map_String_enum_simple_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_enum_simple_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, HashMapValue> dco_decode_Map_String_hash_map_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_hash_map_value(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinNormal>
      dco_decode_Map_String_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_kitchen_sink_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinRustAsync>
      dco_decode_Map_String_kitchen_sink_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_kitchen_sink_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinSync> dco_decode_Map_String_kitchen_sink_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_kitchen_sink_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, Uint8List> dco_decode_Map_String_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_list_prim_u_8_strict(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, MySize> dco_decode_Map_String_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_my_size(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, String> dco_decode_Map_i_32_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinNormal>
      dco_decode_Map_i_32_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_general_enum_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinRustAsync>
      dco_decode_Map_i_32_basic_general_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_general_enum_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinSync>
      dco_decode_Map_i_32_basic_general_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_general_enum_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinNormal>
      dco_decode_Map_i_32_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_primitive_enum_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinRustAsync>
      dco_decode_Map_i_32_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinSync>
      dco_decode_Map_i_32_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_primitive_enum_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinNormal> dco_decode_Map_i_32_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_struct_twin_normal(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinRustAsync>
      dco_decode_Map_i_32_basic_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_struct_twin_rust_async(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinSync> dco_decode_Map_i_32_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_basic_struct_twin_sync(raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, bool> dco_decode_Map_i_32_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_bool(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> dco_decode_Map_i_32_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_f_32(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> dco_decode_Map_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_f_64(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_16(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_32(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_64(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_i_8(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_isize(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint8List> dco_decode_Map_i_32_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_list_prim_u_8_strict(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_16(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_32(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_64(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_i_32_u_8(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> dco_decode_Map_i_32_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_i_32_usize(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, ApplicationMode> dco_decode_Map_u_8_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_8_application_mode(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  BoxDartDebugTwinNormal dco_decode_RustOpaque_BoxdynDartDebugTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxDartDebugTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxDartDebugTwinRustAsync dco_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxDartDebugTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxDartDebugTwinSync dco_decode_RustOpaque_BoxdynDartDebugTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxDartDebugTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbOpaqueReturnTwinNormal dco_decode_RustOpaque_FrbOpaqueReturnTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueReturnTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbOpaqueReturnTwinRustAsync
      dco_decode_RustOpaque_FrbOpaqueReturnTwinRustAsync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueReturnTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbOpaqueReturnTwinSync dco_decode_RustOpaque_FrbOpaqueReturnTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueReturnTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FrbOpaqueSyncReturnTwinNormal
      dco_decode_RustOpaque_FrbOpaqueSyncReturnTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FrbOpaqueSyncReturnTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataAnotherTwinNormal dco_decode_RustOpaque_HideDataAnotherTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataAnotherTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataTwinNormal dco_decode_RustOpaque_HideDataTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataTwinNormalArray2 dco_decode_RustOpaque_HideDataTwinNormal_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinNormalArray2((raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinNormal)
        .toList());
  }

  @protected
  HideDataTwinRustAsync dco_decode_RustOpaque_HideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataTwinRustAsyncArray2
      dco_decode_RustOpaque_HideDataTwinRustAsync_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinRustAsyncArray2((raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinRustAsync)
        .toList());
  }

  @protected
  HideDataTwinSync dco_decode_RustOpaque_HideDataTwinSync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  HideDataTwinSyncArray2 dco_decode_RustOpaque_HideDataTwinSync_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HideDataTwinSyncArray2((raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinSync)
        .toList());
  }

  @protected
  MutexHideDataTwinNormal dco_decode_RustOpaque_MutexHideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexHideDataTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexHideDataTwinRustAsync dco_decode_RustOpaque_MutexHideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexHideDataTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexHideDataTwinSync dco_decode_RustOpaque_MutexHideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexHideDataTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneDataTwinNormal dco_decode_RustOpaque_NonCloneDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneDataTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneDataTwinRustAsync dco_decode_RustOpaque_NonCloneDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneDataTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneDataTwinSync dco_decode_RustOpaque_NonCloneDataTwinSync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneDataTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockHideDataTwinNormal dco_decode_RustOpaque_RwLockHideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockHideDataTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockHideDataTwinRustAsync dco_decode_RustOpaque_RwLockHideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockHideDataTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RwLockHideDataTwinSync dco_decode_RustOpaque_RwLockHideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RwLockHideDataTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxFnStringString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxFnStringString.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxHelloTraitTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxHelloTraitTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxMyTraitTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxMyTraitTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  DroppableTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DroppableTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DroppableTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleEnumTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NonCloneSimpleTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueOneTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueOneTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OpaqueTwoTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpaqueTwoTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethod.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinNormal.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StaticGetterOnlyTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StaticGetterOnlyTwinSync.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleA
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleA.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructInMiscNoTwinExampleB
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructInMiscNoTwinExampleB.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSync.dcoDecode(
        raw as List<dynamic>);
  }

  @protected
  StructWithImplBlockInMultiFile
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StructWithImplBlockInMultiFile.dcoDecode(raw as List<dynamic>);
  }

  @protected
  I32 dco_decode_RustOpaque_i32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return I32.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Set<String> dco_decode_Set_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_String(raw));
  }

  @protected
  Set<ApplicationMode> dco_decode_Set_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_application_mode(raw));
  }

  @protected
  Set<int> dco_decode_Set_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Set.from(dco_decode_list_prim_i_32_strict(raw));
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinNormal>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinRustAsync>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinSync>
      dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Map<int, ApplicationMode>>
      dco_decode_StreamSink_Map_u_8_application_mode_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Set<ApplicationMode>>
      dco_decode_StreamSink_Set_application_mode_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationMode> dco_decode_StreamSink_application_mode_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationModeArray2>
      dco_decode_StreamSink_application_mode_array_2_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationSettings>
      dco_decode_StreamSink_application_settings_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<EventTwinNormal> dco_decode_StreamSink_event_twin_normal_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<EventTwinRustAsync>
      dco_decode_StreamSink_event_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<int> dco_decode_StreamSink_i_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<List<ApplicationMode>>
      dco_decode_StreamSink_list_application_mode_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<List<ApplicationSettings>>
      dco_decode_StreamSink_list_application_settings_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Log2TwinNormal> dco_decode_StreamSink_log_2_twin_normal_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Log2TwinRustAsync>
      dco_decode_StreamSink_log_2_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Log2TwinSync> dco_decode_StreamSink_log_2_twin_sync_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogTwinNormal> dco_decode_StreamSink_log_twin_normal_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogTwinRustAsync>
      dco_decode_StreamSink_log_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MirrorStructTwinNormal>
      dco_decode_StreamSink_mirror_struct_twin_normal_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MirrorStructTwinRustAsync>
      dco_decode_StreamSink_mirror_struct_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MirrorStructTwinSync>
      dco_decode_StreamSink_mirror_struct_twin_sync_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MyStreamEntryTwinNormal>
      dco_decode_StreamSink_my_stream_entry_twin_normal_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<MyStreamEntryTwinRustAsync>
      dco_decode_StreamSink_my_stream_entry_twin_rust_async_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<ApplicationMode?>
      dco_decode_StreamSink_opt_box_autoadd_application_mode_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>
      dco_decode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<int> dco_decode_StreamSink_u_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<U8Array2> dco_decode_StreamSink_u_8_array_2_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  ATwinNormal dco_decode_a_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ATwinRustAsync dco_decode_a_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ATwinSync dco_decode_a_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ATwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  AbcTwinNormal dco_decode_abc_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AbcTwinNormal_A(
          dco_decode_box_autoadd_a_twin_normal(raw[1]),
        );
      case 1:
        return AbcTwinNormal_B(
          dco_decode_box_autoadd_b_twin_normal(raw[1]),
        );
      case 2:
        return AbcTwinNormal_C(
          dco_decode_box_autoadd_c_twin_normal(raw[1]),
        );
      case 3:
        return AbcTwinNormal_JustInt(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AbcTwinRustAsync dco_decode_abc_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AbcTwinRustAsync_A(
          dco_decode_box_autoadd_a_twin_rust_async(raw[1]),
        );
      case 1:
        return AbcTwinRustAsync_B(
          dco_decode_box_autoadd_b_twin_rust_async(raw[1]),
        );
      case 2:
        return AbcTwinRustAsync_C(
          dco_decode_box_autoadd_c_twin_rust_async(raw[1]),
        );
      case 3:
        return AbcTwinRustAsync_JustInt(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AbcTwinSync dco_decode_abc_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AbcTwinSync_A(
          dco_decode_box_autoadd_a_twin_sync(raw[1]),
        );
      case 1:
        return AbcTwinSync_B(
          dco_decode_box_autoadd_b_twin_sync(raw[1]),
        );
      case 2:
        return AbcTwinSync_C(
          dco_decode_box_autoadd_c_twin_sync(raw[1]),
        );
      case 3:
        return AbcTwinSync_JustInt(
          dco_decode_i_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AnotherMacroStructTwinNormal dco_decode_another_macro_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AnotherMacroStructTwinNormal(
      data: dco_decode_i_32(arr[0]),
      nonFinalData: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  AnotherTwinNormal dco_decode_another_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  AnotherTwinRustAsync dco_decode_another_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  AnotherTwinSync dco_decode_another_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AnotherTwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ApplicationEnv dco_decode_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ApplicationEnv(
      vars: dco_decode_list_application_env_var(arr[0]),
    );
  }

  @protected
  ApplicationEnvVar dco_decode_application_env_var(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ApplicationEnvVar(
      field0: dco_decode_String(arr[0]),
      field1: dco_decode_bool(arr[1]),
    );
  }

  @protected
  ApplicationMessage dco_decode_application_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ApplicationMessage_DisplayMessage(
          dco_decode_String(raw[1]),
        );
      case 1:
        return ApplicationMessage_RenderPixel(
          x: dco_decode_i_32(raw[1]),
          y: dco_decode_i_32(raw[2]),
        );
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ApplicationMode dco_decode_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApplicationMode.values[raw as int];
  }

  @protected
  ApplicationModeArray2 dco_decode_application_mode_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ApplicationModeArray2(
        (raw as List<dynamic>).map(dco_decode_application_mode).toList());
  }

  @protected
  ApplicationSettings dco_decode_application_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ApplicationSettings(
      name: dco_decode_String(arr[0]),
      version: dco_decode_String(arr[1]),
      mode: dco_decode_application_mode(arr[2]),
      env: dco_decode_box_application_env(arr[3]),
      envOptional: dco_decode_opt_box_autoadd_application_env(arr[4]),
    );
  }

  @protected
  AttributeTwinNormal dco_decode_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinNormal(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  AttributeTwinRustAsync dco_decode_attribute_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinRustAsync(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  AttributeTwinSync dco_decode_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AttributeTwinSync(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  BTwinNormal dco_decode_b_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinNormal(
      b: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  BTwinRustAsync dco_decode_b_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinRustAsync(
      b: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  BTwinSync dco_decode_b_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BTwinSync(
      b: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  BasicGeneralEnumTwinNormal dco_decode_basic_general_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BasicGeneralEnumTwinNormal_Apple(
          field: dco_decode_String(raw[1]),
        );
      case 1:
        return BasicGeneralEnumTwinNormal_Orange();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync dco_decode_basic_general_enum_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BasicGeneralEnumTwinRustAsync_Apple(
          field: dco_decode_String(raw[1]),
        );
      case 1:
        return BasicGeneralEnumTwinRustAsync_Orange();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BasicGeneralEnumTwinSync dco_decode_basic_general_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BasicGeneralEnumTwinSync_Apple(
          field: dco_decode_String(raw[1]),
        );
      case 1:
        return BasicGeneralEnumTwinSync_Orange();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal dco_decode_basic_primitive_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BasicPrimitiveEnumTwinNormal.values[raw as int];
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      dco_decode_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BasicPrimitiveEnumTwinRustAsync.values[raw as int];
  }

  @protected
  BasicPrimitiveEnumTwinSync dco_decode_basic_primitive_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BasicPrimitiveEnumTwinSync.values[raw as int];
  }

  @protected
  BasicStructTwinNormal dco_decode_basic_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BasicStructTwinNormal(
      apple: dco_decode_opt_String(arr[0]),
      orange: dco_decode_opt_box_autoadd_i_32(arr[1]),
    );
  }

  @protected
  BasicStructTwinRustAsync dco_decode_basic_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BasicStructTwinRustAsync(
      apple: dco_decode_opt_String(arr[0]),
      orange: dco_decode_opt_box_autoadd_i_32(arr[1]),
    );
  }

  @protected
  BasicStructTwinSync dco_decode_basic_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BasicStructTwinSync(
      apple: dco_decode_opt_String(arr[0]),
      orange: dco_decode_opt_box_autoadd_i_32(arr[1]),
    );
  }

  @protected
  BenchmarkBinaryTreeTwinNormal dco_decode_benchmark_binary_tree_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBinaryTreeTwinNormal(
      name: dco_decode_String(arr[0]),
      left: dco_decode_opt_box_benchmark_binary_tree_twin_normal(arr[1]),
      right: dco_decode_opt_box_benchmark_binary_tree_twin_normal(arr[2]),
    );
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      dco_decode_benchmark_binary_tree_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBinaryTreeTwinRustAsync(
      name: dco_decode_String(arr[0]),
      left: dco_decode_opt_box_benchmark_binary_tree_twin_rust_async(arr[1]),
      right: dco_decode_opt_box_benchmark_binary_tree_twin_rust_async(arr[2]),
    );
  }

  @protected
  BenchmarkBinaryTreeTwinSync dco_decode_benchmark_binary_tree_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBinaryTreeTwinSync(
      name: dco_decode_String(arr[0]),
      left: dco_decode_opt_box_benchmark_binary_tree_twin_sync(arr[1]),
      right: dco_decode_opt_box_benchmark_binary_tree_twin_sync(arr[2]),
    );
  }

  @protected
  BenchmarkBlobTwinNormal dco_decode_benchmark_blob_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBlobTwinNormal(
      first: dco_decode_list_prim_u_8_strict(arr[0]),
      second: dco_decode_list_prim_u_8_strict(arr[1]),
      third: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  BenchmarkBlobTwinRustAsync dco_decode_benchmark_blob_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBlobTwinRustAsync(
      first: dco_decode_list_prim_u_8_strict(arr[0]),
      second: dco_decode_list_prim_u_8_strict(arr[1]),
      third: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  BenchmarkBlobTwinSync dco_decode_benchmark_blob_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BenchmarkBlobTwinSync(
      first: dco_decode_list_prim_u_8_strict(arr[0]),
      second: dco_decode_list_prim_u_8_strict(arr[1]),
      third: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  BigBuffersTwinNormal dco_decode_big_buffers_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinNormal(
      int64: dco_decode_list_prim_i_64_strict(arr[0]),
      uint64: dco_decode_list_prim_u_64_strict(arr[1]),
    );
  }

  @protected
  BigBuffersTwinRustAsync dco_decode_big_buffers_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinRustAsync(
      int64: dco_decode_list_prim_i_64_strict(arr[0]),
      uint64: dco_decode_list_prim_u_64_strict(arr[1]),
    );
  }

  @protected
  BigBuffersTwinSync dco_decode_big_buffers_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BigBuffersTwinSync(
      int64: dco_decode_list_prim_i_64_strict(arr[0]),
      uint64: dco_decode_list_prim_u_64_strict(arr[1]),
    );
  }

  @protected
  BlobTwinNormal dco_decode_blob_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinNormal(
      field0: dco_decode_u_8_array_1600(arr[0]),
    );
  }

  @protected
  BlobTwinRustAsync dco_decode_blob_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinRustAsync(
      field0: dco_decode_u_8_array_1600(arr[0]),
    );
  }

  @protected
  BlobTwinSync dco_decode_blob_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BlobTwinSync(
      field0: dco_decode_u_8_array_1600(arr[0]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ApplicationEnv dco_decode_box_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_env(raw);
  }

  @protected
  NonCloneSimpleTwinNormal
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        raw);
  }

  @protected
  NonCloneSimpleTwinRustAsync
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        raw);
  }

  @protected
  NonCloneSimpleTwinSync
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        raw);
  }

  @protected
  Duration dco_decode_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Duration(raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Naive(raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  Object dco_decode_box_autoadd_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_DartOpaque(raw);
  }

  @protected
  HideDataAnotherTwinNormal
      dco_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataAnotherTwinNormal(raw);
  }

  @protected
  HideDataTwinNormal dco_decode_box_autoadd_RustOpaque_HideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataTwinNormal(raw);
  }

  @protected
  HideDataTwinRustAsync dco_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataTwinRustAsync(raw);
  }

  @protected
  HideDataTwinSync dco_decode_box_autoadd_RustOpaque_HideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_HideDataTwinSync(raw);
  }

  @protected
  ATwinNormal dco_decode_box_autoadd_a_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_a_twin_normal(raw);
  }

  @protected
  ATwinRustAsync dco_decode_box_autoadd_a_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_a_twin_rust_async(raw);
  }

  @protected
  ATwinSync dco_decode_box_autoadd_a_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_a_twin_sync(raw);
  }

  @protected
  AbcTwinNormal dco_decode_box_autoadd_abc_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_abc_twin_normal(raw);
  }

  @protected
  AbcTwinRustAsync dco_decode_box_autoadd_abc_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_abc_twin_rust_async(raw);
  }

  @protected
  AbcTwinSync dco_decode_box_autoadd_abc_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_abc_twin_sync(raw);
  }

  @protected
  ApplicationEnv dco_decode_box_autoadd_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_env(raw);
  }

  @protected
  ApplicationMode dco_decode_box_autoadd_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_mode(raw);
  }

  @protected
  ApplicationSettings dco_decode_box_autoadd_application_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_application_settings(raw);
  }

  @protected
  AttributeTwinNormal dco_decode_box_autoadd_attribute_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attribute_twin_normal(raw);
  }

  @protected
  AttributeTwinRustAsync dco_decode_box_autoadd_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attribute_twin_rust_async(raw);
  }

  @protected
  AttributeTwinSync dco_decode_box_autoadd_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_attribute_twin_sync(raw);
  }

  @protected
  BTwinNormal dco_decode_box_autoadd_b_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_b_twin_normal(raw);
  }

  @protected
  BTwinRustAsync dco_decode_box_autoadd_b_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_b_twin_rust_async(raw);
  }

  @protected
  BTwinSync dco_decode_box_autoadd_b_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_b_twin_sync(raw);
  }

  @protected
  BasicGeneralEnumTwinNormal
      dco_decode_box_autoadd_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_general_enum_twin_normal(raw);
  }

  @protected
  BasicGeneralEnumTwinRustAsync
      dco_decode_box_autoadd_basic_general_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_general_enum_twin_rust_async(raw);
  }

  @protected
  BasicGeneralEnumTwinSync dco_decode_box_autoadd_basic_general_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_general_enum_twin_sync(raw);
  }

  @protected
  BasicPrimitiveEnumTwinNormal
      dco_decode_box_autoadd_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_primitive_enum_twin_normal(raw);
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      dco_decode_box_autoadd_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_primitive_enum_twin_rust_async(raw);
  }

  @protected
  BasicPrimitiveEnumTwinSync
      dco_decode_box_autoadd_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_primitive_enum_twin_sync(raw);
  }

  @protected
  BasicStructTwinNormal dco_decode_box_autoadd_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_struct_twin_normal(raw);
  }

  @protected
  BasicStructTwinRustAsync dco_decode_box_autoadd_basic_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_struct_twin_rust_async(raw);
  }

  @protected
  BasicStructTwinSync dco_decode_box_autoadd_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_basic_struct_twin_sync(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      dco_decode_box_autoadd_benchmark_binary_tree_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_normal(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      dco_decode_box_autoadd_benchmark_binary_tree_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_rust_async(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinSync
      dco_decode_box_autoadd_benchmark_binary_tree_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_sync(raw);
  }

  @protected
  BenchmarkBlobTwinNormal dco_decode_box_autoadd_benchmark_blob_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_blob_twin_normal(raw);
  }

  @protected
  BenchmarkBlobTwinRustAsync
      dco_decode_box_autoadd_benchmark_blob_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_blob_twin_rust_async(raw);
  }

  @protected
  BenchmarkBlobTwinSync dco_decode_box_autoadd_benchmark_blob_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_blob_twin_sync(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CTwinNormal dco_decode_box_autoadd_c_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_c_twin_normal(raw);
  }

  @protected
  CTwinRustAsync dco_decode_box_autoadd_c_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_c_twin_rust_async(raw);
  }

  @protected
  CTwinSync dco_decode_box_autoadd_c_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_c_twin_sync(raw);
  }

  @protected
  ConcatenateWithTwinNormal dco_decode_box_autoadd_concatenate_with_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_concatenate_with_twin_normal(raw);
  }

  @protected
  ConcatenateWithTwinRustAsync
      dco_decode_box_autoadd_concatenate_with_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_concatenate_with_twin_rust_async(raw);
  }

  @protected
  ConcatenateWithTwinSync dco_decode_box_autoadd_concatenate_with_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_concatenate_with_twin_sync(raw);
  }

  @protected
  CustomNestedError2TwinNormal
      dco_decode_box_autoadd_custom_nested_error_2_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_2_twin_normal(raw);
  }

  @protected
  CustomNestedError2TwinRustAsync
      dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_2_twin_rust_async(raw);
  }

  @protected
  CustomNestedError2TwinSync
      dco_decode_box_autoadd_custom_nested_error_2_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_2_twin_sync(raw);
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      dco_decode_box_autoadd_custom_nested_error_inner_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_inner_twin_normal(raw);
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_inner_twin_rust_async(raw);
  }

  @protected
  CustomNestedErrorInnerTwinSync
      dco_decode_box_autoadd_custom_nested_error_inner_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_inner_twin_sync(raw);
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      dco_decode_box_autoadd_custom_nested_error_outer_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_outer_twin_normal(raw);
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      dco_decode_box_autoadd_custom_nested_error_outer_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_outer_twin_rust_async(raw);
  }

  @protected
  CustomNestedErrorOuterTwinSync
      dco_decode_box_autoadd_custom_nested_error_outer_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_nested_error_outer_twin_sync(raw);
  }

  @protected
  CustomStructErrorTwinNormal
      dco_decode_box_autoadd_custom_struct_error_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_error_twin_normal(raw);
  }

  @protected
  CustomStructErrorTwinRustAsync
      dco_decode_box_autoadd_custom_struct_error_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_error_twin_rust_async(raw);
  }

  @protected
  CustomStructErrorTwinSync
      dco_decode_box_autoadd_custom_struct_error_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_error_twin_sync(raw);
  }

  @protected
  CustomStructTwinNormal dco_decode_box_autoadd_custom_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_twin_normal(raw);
  }

  @protected
  CustomStructTwinRustAsync
      dco_decode_box_autoadd_custom_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_twin_rust_async(raw);
  }

  @protected
  CustomStructTwinSync dco_decode_box_autoadd_custom_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_custom_struct_twin_sync(raw);
  }

  @protected
  CustomizedTwinNormal dco_decode_box_autoadd_customized_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_customized_twin_normal(raw);
  }

  @protected
  CustomizedTwinRustAsync dco_decode_box_autoadd_customized_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_customized_twin_rust_async(raw);
  }

  @protected
  CustomizedTwinSync dco_decode_box_autoadd_customized_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_customized_twin_sync(raw);
  }

  @protected
  DartOpaqueNestedTwinNormal
      dco_decode_box_autoadd_dart_opaque_nested_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_opaque_nested_twin_normal(raw);
  }

  @protected
  DartOpaqueNestedTwinRustAsync
      dco_decode_box_autoadd_dart_opaque_nested_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_opaque_nested_twin_rust_async(raw);
  }

  @protected
  DartOpaqueNestedTwinSync dco_decode_box_autoadd_dart_opaque_nested_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_dart_opaque_nested_twin_sync(raw);
  }

  @protected
  ElementTwinNormal dco_decode_box_autoadd_element_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_element_twin_normal(raw);
  }

  @protected
  ElementTwinRustAsync dco_decode_box_autoadd_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_element_twin_rust_async(raw);
  }

  @protected
  ElementTwinSync dco_decode_box_autoadd_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_element_twin_sync(raw);
  }

  @protected
  EmptyTwinNormal dco_decode_box_autoadd_empty_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_empty_twin_normal(raw);
  }

  @protected
  EmptyTwinRustAsync dco_decode_box_autoadd_empty_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_empty_twin_rust_async(raw);
  }

  @protected
  EmptyTwinSync dco_decode_box_autoadd_empty_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_empty_twin_sync(raw);
  }

  @protected
  EnumDartOpaqueTwinNormal dco_decode_box_autoadd_enum_dart_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_dart_opaque_twin_normal(raw);
  }

  @protected
  EnumDartOpaqueTwinRustAsync
      dco_decode_box_autoadd_enum_dart_opaque_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_dart_opaque_twin_rust_async(raw);
  }

  @protected
  EnumDartOpaqueTwinSync dco_decode_box_autoadd_enum_dart_opaque_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_dart_opaque_twin_sync(raw);
  }

  @protected
  EnumOpaqueTwinNormal dco_decode_box_autoadd_enum_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_opaque_twin_normal(raw);
  }

  @protected
  EnumOpaqueTwinRustAsync dco_decode_box_autoadd_enum_opaque_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_opaque_twin_rust_async(raw);
  }

  @protected
  EnumOpaqueTwinSync dco_decode_box_autoadd_enum_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_opaque_twin_sync(raw);
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      dco_decode_box_autoadd_enum_with_good_and_opaque_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_good_and_opaque_twin_normal(raw);
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      dco_decode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_good_and_opaque_twin_rust_async(raw);
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync
      dco_decode_box_autoadd_enum_with_good_and_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_good_and_opaque_twin_sync(raw);
  }

  @protected
  EnumWithItemMixedTwinNormal
      dco_decode_box_autoadd_enum_with_item_mixed_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_mixed_twin_normal(raw);
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      dco_decode_box_autoadd_enum_with_item_mixed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_mixed_twin_rust_async(raw);
  }

  @protected
  EnumWithItemMixedTwinSync
      dco_decode_box_autoadd_enum_with_item_mixed_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_mixed_twin_sync(raw);
  }

  @protected
  EnumWithItemStructTwinNormal
      dco_decode_box_autoadd_enum_with_item_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_struct_twin_normal(raw);
  }

  @protected
  EnumWithItemStructTwinRustAsync
      dco_decode_box_autoadd_enum_with_item_struct_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_struct_twin_rust_async(raw);
  }

  @protected
  EnumWithItemStructTwinSync
      dco_decode_box_autoadd_enum_with_item_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_struct_twin_sync(raw);
  }

  @protected
  EnumWithItemTupleTwinNormal
      dco_decode_box_autoadd_enum_with_item_tuple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_tuple_twin_normal(raw);
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      dco_decode_box_autoadd_enum_with_item_tuple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_tuple_twin_rust_async(raw);
  }

  @protected
  EnumWithItemTupleTwinSync
      dco_decode_box_autoadd_enum_with_item_tuple_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_enum_with_item_tuple_twin_sync(raw);
  }

  @protected
  EventTwinNormal dco_decode_box_autoadd_event_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_event_twin_normal(raw);
  }

  @protected
  EventTwinRustAsync dco_decode_box_autoadd_event_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_event_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinNormal dco_decode_box_autoadd_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync
      dco_decode_box_autoadd_exotic_optionals_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync dco_decode_box_autoadd_exotic_optionals_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_sync(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FeatureChronoTwinNormal dco_decode_box_autoadd_feature_chrono_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_chrono_twin_normal(raw);
  }

  @protected
  FeatureChronoTwinRustAsync
      dco_decode_box_autoadd_feature_chrono_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_chrono_twin_rust_async(raw);
  }

  @protected
  FeatureChronoTwinSync dco_decode_box_autoadd_feature_chrono_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_chrono_twin_sync(raw);
  }

  @protected
  FeatureUuidTwinNormal dco_decode_box_autoadd_feature_uuid_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_uuid_twin_normal(raw);
  }

  @protected
  FeatureUuidTwinRustAsync dco_decode_box_autoadd_feature_uuid_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_uuid_twin_rust_async(raw);
  }

  @protected
  FeatureUuidTwinSync dco_decode_box_autoadd_feature_uuid_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feature_uuid_twin_sync(raw);
  }

  @protected
  FeedIdTwinNormal dco_decode_box_autoadd_feed_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_normal(raw);
  }

  @protected
  FeedIdTwinRustAsync dco_decode_box_autoadd_feed_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_rust_async(raw);
  }

  @protected
  FeedIdTwinSync dco_decode_box_autoadd_feed_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_sync(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KitchenSinkTwinNormal dco_decode_box_autoadd_kitchen_sink_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_normal(raw);
  }

  @protected
  KitchenSinkTwinRustAsync dco_decode_box_autoadd_kitchen_sink_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_rust_async(raw);
  }

  @protected
  KitchenSinkTwinSync dco_decode_box_autoadd_kitchen_sink_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_sync(raw);
  }

  @protected
  ListOfNestedRawStringMirrored
      dco_decode_box_autoadd_list_of_nested_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_list_of_nested_raw_string_mirrored(raw);
  }

  @protected
  MacroStruct dco_decode_box_autoadd_macro_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_macro_struct(raw);
  }

  @protected
  MeasureTwinNormal dco_decode_box_autoadd_measure_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_measure_twin_normal(raw);
  }

  @protected
  MeasureTwinRustAsync dco_decode_box_autoadd_measure_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_measure_twin_rust_async(raw);
  }

  @protected
  MeasureTwinSync dco_decode_box_autoadd_measure_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_measure_twin_sync(raw);
  }

  @protected
  MessageIdTwinNormal dco_decode_box_autoadd_message_id_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_id_twin_normal(raw);
  }

  @protected
  MessageIdTwinRustAsync dco_decode_box_autoadd_message_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_id_twin_rust_async(raw);
  }

  @protected
  MessageIdTwinSync dco_decode_box_autoadd_message_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_id_twin_sync(raw);
  }

  @protected
  MyCallableTwinNormal dco_decode_box_autoadd_my_callable_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_callable_twin_normal(raw);
  }

  @protected
  MyCallableTwinRustAsync dco_decode_box_autoadd_my_callable_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_callable_twin_rust_async(raw);
  }

  @protected
  MyCallableTwinSync dco_decode_box_autoadd_my_callable_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_callable_twin_sync(raw);
  }

  @protected
  MyNestedStructTwinNormal dco_decode_box_autoadd_my_nested_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_nested_struct_twin_normal(raw);
  }

  @protected
  MyNestedStructTwinRustAsync
      dco_decode_box_autoadd_my_nested_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_nested_struct_twin_rust_async(raw);
  }

  @protected
  MyNestedStructTwinSync dco_decode_box_autoadd_my_nested_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_nested_struct_twin_sync(raw);
  }

  @protected
  MySize dco_decode_box_autoadd_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_size(raw);
  }

  @protected
  MyStruct dco_decode_box_autoadd_my_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct(raw);
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      dco_decode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct_containing_stream_sink_twin_normal(raw);
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      dco_decode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_struct_containing_stream_sink_twin_rust_async(raw);
  }

  @protected
  MyTreeNodeTwinNormal dco_decode_box_autoadd_my_tree_node_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_tree_node_twin_normal(raw);
  }

  @protected
  MyTreeNodeTwinRustAsync dco_decode_box_autoadd_my_tree_node_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_tree_node_twin_rust_async(raw);
  }

  @protected
  MyTreeNodeTwinSync dco_decode_box_autoadd_my_tree_node_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_tree_node_twin_sync(raw);
  }

  @protected
  NestedRawStringMirrored dco_decode_box_autoadd_nested_raw_string_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_nested_raw_string_mirrored(raw);
  }

  @protected
  NewTypeIntTwinNormal dco_decode_box_autoadd_new_type_int_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_type_int_twin_normal(raw);
  }

  @protected
  NewTypeIntTwinRustAsync dco_decode_box_autoadd_new_type_int_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_type_int_twin_rust_async(raw);
  }

  @protected
  NewTypeIntTwinSync dco_decode_box_autoadd_new_type_int_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_new_type_int_twin_sync(raw);
  }

  @protected
  NoteTwinNormal dco_decode_box_autoadd_note_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note_twin_normal(raw);
  }

  @protected
  NoteTwinRustAsync dco_decode_box_autoadd_note_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note_twin_rust_async(raw);
  }

  @protected
  NoteTwinSync dco_decode_box_autoadd_note_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_note_twin_sync(raw);
  }

  @protected
  Numbers dco_decode_box_autoadd_numbers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_numbers(raw);
  }

  @protected
  OpaqueNestedTwinNormal dco_decode_box_autoadd_opaque_nested_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opaque_nested_twin_normal(raw);
  }

  @protected
  OpaqueNestedTwinRustAsync
      dco_decode_box_autoadd_opaque_nested_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opaque_nested_twin_rust_async(raw);
  }

  @protected
  OpaqueNestedTwinSync dco_decode_box_autoadd_opaque_nested_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opaque_nested_twin_sync(raw);
  }

  @protected
  OptVecsTwinNormal dco_decode_box_autoadd_opt_vecs_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opt_vecs_twin_normal(raw);
  }

  @protected
  OptVecsTwinRustAsync dco_decode_box_autoadd_opt_vecs_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opt_vecs_twin_rust_async(raw);
  }

  @protected
  OptVecsTwinSync dco_decode_box_autoadd_opt_vecs_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_opt_vecs_twin_sync(raw);
  }

  @protected
  RawStringMirrored dco_decode_box_autoadd_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_raw_string_mirrored(raw);
  }

  @protected
  (String, int) dco_decode_box_autoadd_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (String, int);
  }

  @protected
  Sequences dco_decode_box_autoadd_sequences(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sequences(raw);
  }

  @protected
  SimpleEnumTwinNormal dco_decode_box_autoadd_simple_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_enum_twin_normal(raw);
  }

  @protected
  SimpleEnumTwinRustAsync dco_decode_box_autoadd_simple_enum_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_enum_twin_rust_async(raw);
  }

  @protected
  SimpleEnumTwinSync dco_decode_box_autoadd_simple_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_enum_twin_sync(raw);
  }

  @protected
  SimpleStructForBorrowTwinNormal
      dco_decode_box_autoadd_simple_struct_for_borrow_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_for_borrow_twin_normal(raw);
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      dco_decode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_for_borrow_twin_rust_async(raw);
  }

  @protected
  SimpleStructForBorrowTwinSync
      dco_decode_box_autoadd_simple_struct_for_borrow_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_for_borrow_twin_sync(raw);
  }

  @protected
  SimpleStructTwinNormal dco_decode_box_autoadd_simple_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_twin_normal(raw);
  }

  @protected
  SimpleStructTwinRustAsync
      dco_decode_box_autoadd_simple_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_twin_rust_async(raw);
  }

  @protected
  SimpleStructTwinSync dco_decode_box_autoadd_simple_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_struct_twin_sync(raw);
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      dco_decode_box_autoadd_simple_translatable_external_struct_with_method(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_translatable_external_struct_with_method(raw);
  }

  @protected
  SomeStructTwinNormal dco_decode_box_autoadd_some_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_some_struct_twin_normal(raw);
  }

  @protected
  SomeStructTwinRustAsync dco_decode_box_autoadd_some_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_some_struct_twin_rust_async(raw);
  }

  @protected
  SomeStructTwinSync dco_decode_box_autoadd_some_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_some_struct_twin_sync(raw);
  }

  @protected
  StructInLowerLevel dco_decode_box_autoadd_struct_in_lower_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_in_lower_level(raw);
  }

  @protected
  StructWithCommentsTwinNormal
      dco_decode_box_autoadd_struct_with_comments_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_comments_twin_normal(raw);
  }

  @protected
  StructWithCommentsTwinRustAsync
      dco_decode_box_autoadd_struct_with_comments_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_comments_twin_rust_async(raw);
  }

  @protected
  StructWithCommentsTwinSync
      dco_decode_box_autoadd_struct_with_comments_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_comments_twin_sync(raw);
  }

  @protected
  StructWithEnumTwinNormal dco_decode_box_autoadd_struct_with_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_enum_twin_normal(raw);
  }

  @protected
  StructWithEnumTwinRustAsync
      dco_decode_box_autoadd_struct_with_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_enum_twin_rust_async(raw);
  }

  @protected
  StructWithEnumTwinSync dco_decode_box_autoadd_struct_with_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_enum_twin_sync(raw);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      dco_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_explicit_auto_opaque_field_twin_normal(raw);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
        raw);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      dco_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_explicit_auto_opaque_field_twin_sync(raw);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      dco_decode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_good_and_opaque_field_twin_normal(raw);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_good_and_opaque_field_twin_rust_async(raw);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      dco_decode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_good_and_opaque_field_twin_sync(raw);
  }

  @protected
  StructWithOneFieldTwinNormal
      dco_decode_box_autoadd_struct_with_one_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_one_field_twin_normal(raw);
  }

  @protected
  StructWithOneFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_one_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_one_field_twin_rust_async(raw);
  }

  @protected
  StructWithOneFieldTwinSync
      dco_decode_box_autoadd_struct_with_one_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_one_field_twin_sync(raw);
  }

  @protected
  StructWithTwoFieldTwinNormal
      dco_decode_box_autoadd_struct_with_two_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_two_field_twin_normal(raw);
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_two_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_two_field_twin_rust_async(raw);
  }

  @protected
  StructWithTwoFieldTwinSync
      dco_decode_box_autoadd_struct_with_two_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_two_field_twin_sync(raw);
  }

  @protected
  StructWithZeroFieldTwinNormal
      dco_decode_box_autoadd_struct_with_zero_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_zero_field_twin_normal(raw);
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      dco_decode_box_autoadd_struct_with_zero_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_zero_field_twin_rust_async(raw);
  }

  @protected
  StructWithZeroFieldTwinSync
      dco_decode_box_autoadd_struct_with_zero_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_struct_with_zero_field_twin_sync(raw);
  }

  @protected
  SumWithTwinNormal dco_decode_box_autoadd_sum_with_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sum_with_twin_normal(raw);
  }

  @protected
  SumWithTwinRustAsync dco_decode_box_autoadd_sum_with_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sum_with_twin_rust_async(raw);
  }

  @protected
  SumWithTwinSync dco_decode_box_autoadd_sum_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sum_with_twin_sync(raw);
  }

  @protected
  TestIdTwinNormal dco_decode_box_autoadd_test_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_test_id_twin_normal(raw);
  }

  @protected
  TestIdTwinRustAsync dco_decode_box_autoadd_test_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_test_id_twin_rust_async(raw);
  }

  @protected
  TestIdTwinSync dco_decode_box_autoadd_test_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_test_id_twin_sync(raw);
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      dco_decode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_translatable_struct_with_dart_code_twin_normal(raw);
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      dco_decode_box_autoadd_tuple_struct_with_one_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_one_field_twin_normal(raw);
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      dco_decode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_one_field_twin_rust_async(raw);
  }

  @protected
  TupleStructWithOneFieldTwinSync
      dco_decode_box_autoadd_tuple_struct_with_one_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_one_field_twin_sync(raw);
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      dco_decode_box_autoadd_tuple_struct_with_two_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_two_field_twin_normal(raw);
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      dco_decode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_two_field_twin_rust_async(raw);
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      dco_decode_box_autoadd_tuple_struct_with_two_field_twin_sync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tuple_struct_with_two_field_twin_sync(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UserIdTwinNormal dco_decode_box_autoadd_user_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user_id_twin_normal(raw);
  }

  @protected
  UserIdTwinRustAsync dco_decode_box_autoadd_user_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user_id_twin_rust_async(raw);
  }

  @protected
  UserIdTwinSync dco_decode_box_autoadd_user_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_user_id_twin_sync(raw);
  }

  @protected
  int dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  WeekdaysTwinNormal dco_decode_box_autoadd_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_normal(raw);
  }

  @protected
  WeekdaysTwinRustAsync dco_decode_box_autoadd_weekdays_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_rust_async(raw);
  }

  @protected
  WeekdaysTwinSync dco_decode_box_autoadd_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_sync(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      dco_decode_box_benchmark_binary_tree_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_normal(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      dco_decode_box_benchmark_binary_tree_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_rust_async(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinSync dco_decode_box_benchmark_binary_tree_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_benchmark_binary_tree_twin_sync(raw);
  }

  @protected
  BlobTwinNormal dco_decode_box_blob_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_blob_twin_normal(raw);
  }

  @protected
  BlobTwinRustAsync dco_decode_box_blob_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_blob_twin_rust_async(raw);
  }

  @protected
  BlobTwinSync dco_decode_box_blob_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_blob_twin_sync(raw);
  }

  @protected
  bool dco_decode_box_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DistanceTwinNormal dco_decode_box_distance_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_distance_twin_normal(raw);
  }

  @protected
  DistanceTwinRustAsync dco_decode_box_distance_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_distance_twin_rust_async(raw);
  }

  @protected
  DistanceTwinSync dco_decode_box_distance_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_distance_twin_sync(raw);
  }

  @protected
  ExoticOptionalsTwinNormal dco_decode_box_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync dco_decode_box_exotic_optionals_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync dco_decode_box_exotic_optionals_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exotic_optionals_twin_sync(raw);
  }

  @protected
  double dco_decode_box_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FeedIdTwinNormal dco_decode_box_feed_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_normal(raw);
  }

  @protected
  FeedIdTwinRustAsync dco_decode_box_feed_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_rust_async(raw);
  }

  @protected
  FeedIdTwinSync dco_decode_box_feed_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_feed_id_twin_sync(raw);
  }

  @protected
  int dco_decode_box_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  int dco_decode_box_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KitchenSinkTwinNormal dco_decode_box_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_normal(raw);
  }

  @protected
  KitchenSinkTwinRustAsync dco_decode_box_kitchen_sink_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_rust_async(raw);
  }

  @protected
  KitchenSinkTwinSync dco_decode_box_kitchen_sink_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_kitchen_sink_twin_sync(raw);
  }

  @protected
  MySize dco_decode_box_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_my_size(raw);
  }

  @protected
  SpeedTwinNormal dco_decode_box_speed_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_speed_twin_normal(raw);
  }

  @protected
  SpeedTwinRustAsync dco_decode_box_speed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_speed_twin_rust_async(raw);
  }

  @protected
  SpeedTwinSync dco_decode_box_speed_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_speed_twin_sync(raw);
  }

  @protected
  int dco_decode_box_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array1600 dco_decode_box_u_8_array_1600(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_8_array_1600(raw);
  }

  @protected
  U8Array8 dco_decode_box_u_8_array_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_8_array_8(raw);
  }

  @protected
  WeekdaysTwinNormal dco_decode_box_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_normal(raw);
  }

  @protected
  WeekdaysTwinRustAsync dco_decode_box_weekdays_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_rust_async(raw);
  }

  @protected
  WeekdaysTwinSync dco_decode_box_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_weekdays_twin_sync(raw);
  }

  @protected
  CTwinNormal dco_decode_c_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinNormal(
      c: dco_decode_bool(arr[0]),
    );
  }

  @protected
  CTwinRustAsync dco_decode_c_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinRustAsync(
      c: dco_decode_bool(arr[0]),
    );
  }

  @protected
  CTwinSync dco_decode_c_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CTwinSync(
      c: dco_decode_bool(arr[0]),
    );
  }

  @protected
  ConcatenateWithTwinNormal dco_decode_concatenate_with_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConcatenateWithTwinRustAsync dco_decode_concatenate_with_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConcatenateWithTwinSync dco_decode_concatenate_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConcatenateWithTwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConstructorTranslatableStructTwinNormal
      dco_decode_constructor_translatable_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConstructorTranslatableStructTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  ConstructorTranslatableSyncStructTwinNormal
      dco_decode_constructor_translatable_sync_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ConstructorTranslatableSyncStructTwinNormal.raw(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  ContainsMirroredSubStructTwinNormal
      dco_decode_contains_mirrored_sub_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinNormal(
      test: dco_decode_raw_string_mirrored(arr[0]),
      test2: dco_decode_another_twin_normal(arr[1]),
    );
  }

  @protected
  ContainsMirroredSubStructTwinRustAsync
      dco_decode_contains_mirrored_sub_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinRustAsync(
      test: dco_decode_raw_string_mirrored(arr[0]),
      test2: dco_decode_another_twin_rust_async(arr[1]),
    );
  }

  @protected
  ContainsMirroredSubStructTwinSync
      dco_decode_contains_mirrored_sub_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ContainsMirroredSubStructTwinSync(
      test: dco_decode_raw_string_mirrored(arr[0]),
      test2: dco_decode_another_twin_sync(arr[1]),
    );
  }

  @protected
  CustomEnumErrorTwinNormal dco_decode_custom_enum_error_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinNormal_One(
          message: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinNormal_Two(
          message: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomEnumErrorTwinRustAsync dco_decode_custom_enum_error_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinRustAsync_One(
          message: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinRustAsync_Two(
          message: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomEnumErrorTwinSync dco_decode_custom_enum_error_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomEnumErrorTwinSync_One(
          message: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomEnumErrorTwinSync_Two(
          message: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomErrorTwinNormal dco_decode_custom_error_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinNormal_Error0(
          e: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinNormal_Error1(
          e: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomErrorTwinRustAsync dco_decode_custom_error_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinRustAsync_Error0(
          e: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinRustAsync_Error1(
          e: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomErrorTwinSync dco_decode_custom_error_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomErrorTwinSync_Error0(
          e: dco_decode_String(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      case 1:
        return CustomErrorTwinSync_Error1(
          e: dco_decode_u_32(raw[1]),
          backtrace: dco_decode_Backtrace(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError1TwinNormal dco_decode_custom_nested_error_1_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinNormal_CustomNested1(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinNormal_ErrorNested(
          dco_decode_box_autoadd_custom_nested_error_2_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError1TwinRustAsync
      dco_decode_custom_nested_error_1_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinRustAsync_CustomNested1(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinRustAsync_ErrorNested(
          dco_decode_box_autoadd_custom_nested_error_2_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError1TwinSync dco_decode_custom_nested_error_1_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError1TwinSync_CustomNested1(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError1TwinSync_ErrorNested(
          dco_decode_box_autoadd_custom_nested_error_2_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError2TwinNormal dco_decode_custom_nested_error_2_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinNormal_CustomNested2(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinNormal_CustomNested2Number(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError2TwinRustAsync
      dco_decode_custom_nested_error_2_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinRustAsync_CustomNested2(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinRustAsync_CustomNested2Number(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedError2TwinSync dco_decode_custom_nested_error_2_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedError2TwinSync_CustomNested2(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedError2TwinSync_CustomNested2Number(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      dco_decode_custom_nested_error_inner_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinNormal_Three(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinNormal_Four(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      dco_decode_custom_nested_error_inner_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinRustAsync_Three(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinRustAsync_Four(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorInnerTwinSync dco_decode_custom_nested_error_inner_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorInnerTwinSync_Three(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorInnerTwinSync_Four(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      dco_decode_custom_nested_error_outer_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinNormal_One(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinNormal_Two(
          dco_decode_box_autoadd_custom_nested_error_inner_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      dco_decode_custom_nested_error_outer_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinRustAsync_One(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinRustAsync_Two(
          dco_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomNestedErrorOuterTwinSync dco_decode_custom_nested_error_outer_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return CustomNestedErrorOuterTwinSync_One(
          dco_decode_String(raw[1]),
        );
      case 1:
        return CustomNestedErrorOuterTwinSync_Two(
          dco_decode_box_autoadd_custom_nested_error_inner_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  CustomStructErrorAnotherTwinNormal
      dco_decode_custom_struct_error_another_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinNormal(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorAnotherTwinRustAsync
      dco_decode_custom_struct_error_another_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinRustAsync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorAnotherTwinSync
      dco_decode_custom_struct_error_another_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorAnotherTwinSync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorTwinNormal dco_decode_custom_struct_error_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinNormal(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorTwinRustAsync dco_decode_custom_struct_error_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinRustAsync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructErrorTwinSync dco_decode_custom_struct_error_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructErrorTwinSync(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructTwinNormal dco_decode_custom_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinNormal(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructTwinRustAsync dco_decode_custom_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinRustAsync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomStructTwinSync dco_decode_custom_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CustomStructTwinSync(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  CustomizedTwinNormal dco_decode_customized_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CustomizedTwinNormal(
      finalField: dco_decode_String(arr[0]),
      nonFinalField: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  CustomizedTwinRustAsync dco_decode_customized_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CustomizedTwinRustAsync(
      finalField: dco_decode_String(arr[0]),
      nonFinalField: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  CustomizedTwinSync dco_decode_customized_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CustomizedTwinSync(
      finalField: dco_decode_String(arr[0]),
      nonFinalField: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  DartOpaqueNestedTwinNormal dco_decode_dart_opaque_nested_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinNormal(
      first: dco_decode_DartOpaque(arr[0]),
      second: dco_decode_DartOpaque(arr[1]),
    );
  }

  @protected
  DartOpaqueNestedTwinRustAsync dco_decode_dart_opaque_nested_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinRustAsync(
      first: dco_decode_DartOpaque(arr[0]),
      second: dco_decode_DartOpaque(arr[1]),
    );
  }

  @protected
  DartOpaqueNestedTwinSync dco_decode_dart_opaque_nested_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DartOpaqueNestedTwinSync(
      first: dco_decode_DartOpaque(arr[0]),
      second: dco_decode_DartOpaque(arr[1]),
    );
  }

  @protected
  DemoStructForRustCallDartTwinNormal
      dco_decode_demo_struct_for_rust_call_dart_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DemoStructForRustCallDartTwinNormal(
      name: dco_decode_String(arr[0]),
    );
  }

  @protected
  DemoStructForRustCallDartTwinRustAsync
      dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DemoStructForRustCallDartTwinRustAsync(
      name: dco_decode_String(arr[0]),
    );
  }

  @protected
  DistanceTwinNormal dco_decode_distance_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DistanceTwinNormal_Unknown();
      case 1:
        return DistanceTwinNormal_Map(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DistanceTwinRustAsync dco_decode_distance_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DistanceTwinRustAsync_Unknown();
      case 1:
        return DistanceTwinRustAsync_Map(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DistanceTwinSync dco_decode_distance_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DistanceTwinSync_Unknown();
      case 1:
        return DistanceTwinSync_Map(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ElementTwinNormal dco_decode_element_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinNormal(
      tag: dco_decode_opt_String(arr[0]),
      text: dco_decode_opt_String(arr[1]),
      attributes: dco_decode_opt_list_attribute_twin_normal(arr[2]),
      children: dco_decode_opt_list_element_twin_normal(arr[3]),
    );
  }

  @protected
  ElementTwinRustAsync dco_decode_element_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinRustAsync(
      tag: dco_decode_opt_String(arr[0]),
      text: dco_decode_opt_String(arr[1]),
      attributes: dco_decode_opt_list_attribute_twin_rust_async(arr[2]),
      children: dco_decode_opt_list_element_twin_rust_async(arr[3]),
    );
  }

  @protected
  ElementTwinSync dco_decode_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ElementTwinSync(
      tag: dco_decode_opt_String(arr[0]),
      text: dco_decode_opt_String(arr[1]),
      attributes: dco_decode_opt_list_attribute_twin_sync(arr[2]),
      children: dco_decode_opt_list_element_twin_sync(arr[3]),
    );
  }

  @protected
  EmptyTwinNormal dco_decode_empty_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinNormal();
  }

  @protected
  EmptyTwinRustAsync dco_decode_empty_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinRustAsync();
  }

  @protected
  EmptyTwinSync dco_decode_empty_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return EmptyTwinSync();
  }

  @protected
  EnumDartOpaqueTwinNormal dco_decode_enum_dart_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinNormal_Primitive(
          dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinNormal_Opaque(
          dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumDartOpaqueTwinRustAsync dco_decode_enum_dart_opaque_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinRustAsync_Primitive(
          dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinRustAsync_Opaque(
          dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumDartOpaqueTwinSync dco_decode_enum_dart_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumDartOpaqueTwinSync_Primitive(
          dco_decode_i_32(raw[1]),
        );
      case 1:
        return EnumDartOpaqueTwinSync_Opaque(
          dco_decode_DartOpaque(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinNormal dco_decode_enum_opaque_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinNormal_Struct(
          dco_decode_RustOpaque_HideDataTwinNormal(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinNormal_Primitive(
          dco_decode_RustOpaque_i32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinNormal_TraitObj(
          dco_decode_RustOpaque_BoxdynDartDebugTwinNormal(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinNormal_Mutex(
          dco_decode_RustOpaque_MutexHideDataTwinNormal(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinNormal_RwLock(
          dco_decode_RustOpaque_RwLockHideDataTwinNormal(raw[1]),
        );
      case 5:
        return EnumOpaqueTwinNormal_Nothing();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinNormalArray5 dco_decode_enum_opaque_twin_normal_array_5(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumOpaqueTwinNormalArray5((raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_normal)
        .toList());
  }

  @protected
  EnumOpaqueTwinRustAsync dco_decode_enum_opaque_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinRustAsync_Struct(
          dco_decode_RustOpaque_HideDataTwinRustAsync(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinRustAsync_Primitive(
          dco_decode_RustOpaque_i32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinRustAsync_TraitObj(
          dco_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinRustAsync_Mutex(
          dco_decode_RustOpaque_MutexHideDataTwinRustAsync(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinRustAsync_RwLock(
          dco_decode_RustOpaque_RwLockHideDataTwinRustAsync(raw[1]),
        );
      case 5:
        return EnumOpaqueTwinRustAsync_Nothing();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinRustAsyncArray5 dco_decode_enum_opaque_twin_rust_async_array_5(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumOpaqueTwinRustAsyncArray5((raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_rust_async)
        .toList());
  }

  @protected
  EnumOpaqueTwinSync dco_decode_enum_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumOpaqueTwinSync_Struct(
          dco_decode_RustOpaque_HideDataTwinSync(raw[1]),
        );
      case 1:
        return EnumOpaqueTwinSync_Primitive(
          dco_decode_RustOpaque_i32(raw[1]),
        );
      case 2:
        return EnumOpaqueTwinSync_TraitObj(
          dco_decode_RustOpaque_BoxdynDartDebugTwinSync(raw[1]),
        );
      case 3:
        return EnumOpaqueTwinSync_Mutex(
          dco_decode_RustOpaque_MutexHideDataTwinSync(raw[1]),
        );
      case 4:
        return EnumOpaqueTwinSync_RwLock(
          dco_decode_RustOpaque_RwLockHideDataTwinSync(raw[1]),
        );
      case 5:
        return EnumOpaqueTwinSync_Nothing();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumOpaqueTwinSyncArray5 dco_decode_enum_opaque_twin_sync_array_5(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumOpaqueTwinSyncArray5(
        (raw as List<dynamic>).map(dco_decode_enum_opaque_twin_sync).toList());
  }

  @protected
  EnumSimpleTwinNormal dco_decode_enum_simple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumSimpleTwinNormal.values[raw as int];
  }

  @protected
  EnumSimpleTwinRustAsync dco_decode_enum_simple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumSimpleTwinRustAsync.values[raw as int];
  }

  @protected
  EnumSimpleTwinSync dco_decode_enum_simple_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumSimpleTwinSync.values[raw as int];
  }

  @protected
  EnumWithDiscriminantTwinNormal dco_decode_enum_with_discriminant_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithDiscriminantTwinNormal.values[raw as int];
  }

  @protected
  EnumWithDiscriminantTwinRustAsync
      dco_decode_enum_with_discriminant_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithDiscriminantTwinRustAsync.values[raw as int];
  }

  @protected
  EnumWithDiscriminantTwinSync dco_decode_enum_with_discriminant_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnumWithDiscriminantTwinSync.values[raw as int];
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      dco_decode_enum_with_good_and_opaque_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithGoodAndOpaqueTwinNormal_Good(
          dco_decode_String(raw[1]),
        );
      case 1:
        return EnumWithGoodAndOpaqueTwinNormal_Opaque(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      dco_decode_enum_with_good_and_opaque_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithGoodAndOpaqueTwinRustAsync_Good(
          dco_decode_String(raw[1]),
        );
      case 1:
        return EnumWithGoodAndOpaqueTwinRustAsync_Opaque(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync dco_decode_enum_with_good_and_opaque_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithGoodAndOpaqueTwinSync_Good(
          dco_decode_String(raw[1]),
        );
      case 1:
        return EnumWithGoodAndOpaqueTwinSync_Opaque(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemMixedTwinNormal dco_decode_enum_with_item_mixed_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinNormal_A();
      case 1:
        return EnumWithItemMixedTwinNormal_B(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinNormal_C(
          cField: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      dco_decode_enum_with_item_mixed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinRustAsync_A();
      case 1:
        return EnumWithItemMixedTwinRustAsync_B(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinRustAsync_C(
          cField: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemMixedTwinSync dco_decode_enum_with_item_mixed_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemMixedTwinSync_A();
      case 1:
        return EnumWithItemMixedTwinSync_B(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return EnumWithItemMixedTwinSync_C(
          cField: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemStructTwinNormal dco_decode_enum_with_item_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinNormal_A(
          aField: dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinNormal_B(
          bField: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemStructTwinRustAsync
      dco_decode_enum_with_item_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinRustAsync_A(
          aField: dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinRustAsync_B(
          bField: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemStructTwinSync dco_decode_enum_with_item_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemStructTwinSync_A(
          aField: dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemStructTwinSync_B(
          bField: dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemTupleTwinNormal dco_decode_enum_with_item_tuple_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinNormal_A(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinNormal_B(
          dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      dco_decode_enum_with_item_tuple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinRustAsync_A(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinRustAsync_B(
          dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EnumWithItemTupleTwinSync dco_decode_enum_with_item_tuple_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return EnumWithItemTupleTwinSync_A(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 1:
        return EnumWithItemTupleTwinSync_B(
          dco_decode_list_prim_i_32_strict(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  EventTwinNormal dco_decode_event_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinNormal(
      address: dco_decode_String(arr[0]),
      payload: dco_decode_String(arr[1]),
    );
  }

  @protected
  EventTwinRustAsync dco_decode_event_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EventTwinRustAsync(
      address: dco_decode_String(arr[0]),
      payload: dco_decode_String(arr[1]),
    );
  }

  @protected
  ExoticOptionalsTwinNormal dco_decode_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinNormal(
      int32: dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: dco_decode_opt_list_prim_u_8_strict(arr[4]),
      int8List: dco_decode_opt_list_prim_i_8_strict(arr[5]),
      uint8List: dco_decode_opt_list_prim_u_8_strict(arr[6]),
      int32List: dco_decode_opt_list_prim_i_32_strict(arr[7]),
      float32List: dco_decode_opt_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_opt_list_prim_f_64_strict(arr[9]),
      attributes: dco_decode_opt_list_attribute_twin_normal(arr[10]),
      attributesNullable:
          dco_decode_list_opt_box_autoadd_attribute_twin_normal(arr[11]),
      nullableAttributes:
          dco_decode_opt_list_opt_box_autoadd_attribute_twin_normal(arr[12]),
      newtypeint: dco_decode_opt_box_autoadd_new_type_int_twin_normal(arr[13]),
    );
  }

  @protected
  ExoticOptionalsTwinRustAsync dco_decode_exotic_optionals_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinRustAsync(
      int32: dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: dco_decode_opt_list_prim_u_8_strict(arr[4]),
      int8List: dco_decode_opt_list_prim_i_8_strict(arr[5]),
      uint8List: dco_decode_opt_list_prim_u_8_strict(arr[6]),
      int32List: dco_decode_opt_list_prim_i_32_strict(arr[7]),
      float32List: dco_decode_opt_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_opt_list_prim_f_64_strict(arr[9]),
      attributes: dco_decode_opt_list_attribute_twin_rust_async(arr[10]),
      attributesNullable:
          dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(arr[11]),
      nullableAttributes:
          dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
              arr[12]),
      newtypeint:
          dco_decode_opt_box_autoadd_new_type_int_twin_rust_async(arr[13]),
    );
  }

  @protected
  ExoticOptionalsTwinSync dco_decode_exotic_optionals_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 14)
      throw Exception('unexpected arr length: expect 14 but see ${arr.length}');
    return ExoticOptionalsTwinSync(
      int32: dco_decode_opt_box_autoadd_i_32(arr[0]),
      int64: dco_decode_opt_box_autoadd_i_64(arr[1]),
      float64: dco_decode_opt_box_autoadd_f_64(arr[2]),
      boolean: dco_decode_opt_box_autoadd_bool(arr[3]),
      zerocopy: dco_decode_opt_list_prim_u_8_strict(arr[4]),
      int8List: dco_decode_opt_list_prim_i_8_strict(arr[5]),
      uint8List: dco_decode_opt_list_prim_u_8_strict(arr[6]),
      int32List: dco_decode_opt_list_prim_i_32_strict(arr[7]),
      float32List: dco_decode_opt_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_opt_list_prim_f_64_strict(arr[9]),
      attributes: dco_decode_opt_list_attribute_twin_sync(arr[10]),
      attributesNullable:
          dco_decode_list_opt_box_autoadd_attribute_twin_sync(arr[11]),
      nullableAttributes:
          dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync(arr[12]),
      newtypeint: dco_decode_opt_box_autoadd_new_type_int_twin_sync(arr[13]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  F64Array16 dco_decode_f_64_array_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return F64Array16(dco_decode_list_prim_f_64_strict(raw));
  }

  @protected
  FeatureChronoTwinNormal dco_decode_feature_chrono_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FeatureChronoTwinNormal(
      utc: dco_decode_Chrono_Utc(arr[0]),
      local: dco_decode_Chrono_Local(arr[1]),
      duration: dco_decode_Chrono_Duration(arr[2]),
      naive: dco_decode_Chrono_Naive(arr[3]),
    );
  }

  @protected
  FeatureChronoTwinRustAsync dco_decode_feature_chrono_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FeatureChronoTwinRustAsync(
      utc: dco_decode_Chrono_Utc(arr[0]),
      local: dco_decode_Chrono_Local(arr[1]),
      duration: dco_decode_Chrono_Duration(arr[2]),
      naive: dco_decode_Chrono_Naive(arr[3]),
    );
  }

  @protected
  FeatureChronoTwinSync dco_decode_feature_chrono_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FeatureChronoTwinSync(
      utc: dco_decode_Chrono_Utc(arr[0]),
      local: dco_decode_Chrono_Local(arr[1]),
      duration: dco_decode_Chrono_Duration(arr[2]),
      naive: dco_decode_Chrono_Naive(arr[3]),
    );
  }

  @protected
  FeatureUuidTwinNormal dco_decode_feature_uuid_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinNormal(
      one: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  FeatureUuidTwinRustAsync dco_decode_feature_uuid_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinRustAsync(
      one: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  FeatureUuidTwinSync dco_decode_feature_uuid_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeatureUuidTwinSync(
      one: dco_decode_Uuid(arr[0]),
    );
  }

  @protected
  FeedIdTwinNormal dco_decode_feed_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinNormal(
      field0: dco_decode_u_8_array_8(arr[0]),
    );
  }

  @protected
  FeedIdTwinRustAsync dco_decode_feed_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinRustAsync(
      field0: dco_decode_u_8_array_8(arr[0]),
    );
  }

  @protected
  FeedIdTwinSync dco_decode_feed_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeedIdTwinSync(
      field0: dco_decode_u_8_array_8(arr[0]),
    );
  }

  @protected
  HashMapValue dco_decode_hash_map_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return HashMapValue(
      inner: dco_decode_String(arr[0]),
    );
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  I32Array2 dco_decode_i_32_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return I32Array2(dco_decode_list_prim_i_32_strict(raw));
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KitchenSinkTwinNormal dco_decode_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinNormal_Empty();
      case 1:
        return KitchenSinkTwinNormal_Primitives(
          int32: dco_decode_i_32(raw[1]),
          float64: dco_decode_f_64(raw[2]),
          boolean: dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinNormal_Nested(
          dco_decode_i_32(raw[1]),
          dco_decode_box_kitchen_sink_twin_normal(raw[2]),
        );
      case 3:
        return KitchenSinkTwinNormal_Optional(
          dco_decode_opt_box_autoadd_i_32(raw[1]),
          dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinNormal_Buffer(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 5:
        return KitchenSinkTwinNormal_Enums(
          dco_decode_weekdays_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  KitchenSinkTwinRustAsync dco_decode_kitchen_sink_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinRustAsync_Empty();
      case 1:
        return KitchenSinkTwinRustAsync_Primitives(
          int32: dco_decode_i_32(raw[1]),
          float64: dco_decode_f_64(raw[2]),
          boolean: dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinRustAsync_Nested(
          dco_decode_i_32(raw[1]),
          dco_decode_box_kitchen_sink_twin_rust_async(raw[2]),
        );
      case 3:
        return KitchenSinkTwinRustAsync_Optional(
          dco_decode_opt_box_autoadd_i_32(raw[1]),
          dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinRustAsync_Buffer(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 5:
        return KitchenSinkTwinRustAsync_Enums(
          dco_decode_weekdays_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  KitchenSinkTwinSync dco_decode_kitchen_sink_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return KitchenSinkTwinSync_Empty();
      case 1:
        return KitchenSinkTwinSync_Primitives(
          int32: dco_decode_i_32(raw[1]),
          float64: dco_decode_f_64(raw[2]),
          boolean: dco_decode_bool(raw[3]),
        );
      case 2:
        return KitchenSinkTwinSync_Nested(
          dco_decode_i_32(raw[1]),
          dco_decode_box_kitchen_sink_twin_sync(raw[2]),
        );
      case 3:
        return KitchenSinkTwinSync_Optional(
          dco_decode_opt_box_autoadd_i_32(raw[1]),
          dco_decode_opt_box_autoadd_i_32(raw[2]),
        );
      case 4:
        return KitchenSinkTwinSync_Buffer(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 5:
        return KitchenSinkTwinSync_Enums(
          dco_decode_weekdays_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<NonCloneSimpleTwinNormal>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal)
        .toList();
  }

  @protected
  List<NonCloneSimpleTwinRustAsync>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync)
        .toList();
  }

  @protected
  List<NonCloneSimpleTwinSync>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync)
        .toList();
  }

  @protected
  List<Duration> dco_decode_list_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Chrono_Duration).toList();
  }

  @protected
  List<DateTime> dco_decode_list_Chrono_Local(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Chrono_Local).toList();
  }

  @protected
  List<DateTime> dco_decode_list_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_Chrono_Naive).toList();
  }

  @protected
  List<Object> dco_decode_list_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_DartOpaque).toList();
  }

  @protected
  List<HideDataTwinNormal> dco_decode_list_RustOpaque_HideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinNormal)
        .toList();
  }

  @protected
  List<HideDataTwinRustAsync> dco_decode_list_RustOpaque_HideDataTwinRustAsync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinRustAsync)
        .toList();
  }

  @protected
  List<HideDataTwinSync> dco_decode_list_RustOpaque_HideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_RustOpaque_HideDataTwinSync)
        .toList();
  }

  @protected
  List<RustStreamSink<int>> dco_decode_list_StreamSink_i_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_StreamSink_i_32_Sse).toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<UuidValue> dco_decode_list_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    const kUuidSizeInBytes = 16;
    final bytes = dco_decode_list_prim_u_8_strict(raw);
    return List.generate(
      bytes.lengthInBytes ~/ kUuidSizeInBytes,
      (i) => UuidValue.fromByteList(
          Uint8List.view(bytes.buffer, i * kUuidSizeInBytes, kUuidSizeInBytes)),
      growable: false,
    );
  }

  @protected
  List<ApplicationEnvVar> dco_decode_list_application_env_var(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_application_env_var).toList();
  }

  @protected
  List<ApplicationMode> dco_decode_list_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_application_mode).toList();
  }

  @protected
  List<ApplicationSettings> dco_decode_list_application_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_application_settings).toList();
  }

  @protected
  List<AttributeTwinNormal> dco_decode_list_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_attribute_twin_normal)
        .toList();
  }

  @protected
  List<AttributeTwinRustAsync> dco_decode_list_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_attribute_twin_rust_async)
        .toList();
  }

  @protected
  List<AttributeTwinSync> dco_decode_list_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_attribute_twin_sync).toList();
  }

  @protected
  List<BasicGeneralEnumTwinNormal>
      dco_decode_list_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_general_enum_twin_normal)
        .toList();
  }

  @protected
  List<BasicGeneralEnumTwinRustAsync>
      dco_decode_list_basic_general_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_general_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<BasicGeneralEnumTwinSync> dco_decode_list_basic_general_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_general_enum_twin_sync)
        .toList();
  }

  @protected
  List<BasicPrimitiveEnumTwinNormal>
      dco_decode_list_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_primitive_enum_twin_normal)
        .toList();
  }

  @protected
  List<BasicPrimitiveEnumTwinRustAsync>
      dco_decode_list_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_primitive_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<BasicPrimitiveEnumTwinSync>
      dco_decode_list_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_primitive_enum_twin_sync)
        .toList();
  }

  @protected
  List<BasicStructTwinNormal> dco_decode_list_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_struct_twin_normal)
        .toList();
  }

  @protected
  List<BasicStructTwinRustAsync> dco_decode_list_basic_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_struct_twin_rust_async)
        .toList();
  }

  @protected
  List<BasicStructTwinSync> dco_decode_list_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_basic_struct_twin_sync)
        .toList();
  }

  @protected
  List<bool> dco_decode_list_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bool).toList();
  }

  @protected
  List<ElementTwinNormal> dco_decode_list_element_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_element_twin_normal).toList();
  }

  @protected
  List<ElementTwinRustAsync> dco_decode_list_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_element_twin_rust_async)
        .toList();
  }

  @protected
  List<ElementTwinSync> dco_decode_list_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_element_twin_sync).toList();
  }

  @protected
  List<EnumOpaqueTwinNormal> dco_decode_list_enum_opaque_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_normal)
        .toList();
  }

  @protected
  List<EnumOpaqueTwinRustAsync> dco_decode_list_enum_opaque_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_rust_async)
        .toList();
  }

  @protected
  List<EnumOpaqueTwinSync> dco_decode_list_enum_opaque_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_enum_opaque_twin_sync)
        .toList();
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<MyEnum> dco_decode_list_my_enum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_my_enum).toList();
  }

  @protected
  List<MySize> dco_decode_list_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_my_size).toList();
  }

  @protected
  List<MyTreeNodeTwinNormal> dco_decode_list_my_tree_node_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_my_tree_node_twin_normal)
        .toList();
  }

  @protected
  List<MyTreeNodeTwinRustAsync> dco_decode_list_my_tree_node_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_my_tree_node_twin_rust_async)
        .toList();
  }

  @protected
  List<MyTreeNodeTwinSync> dco_decode_list_my_tree_node_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_my_tree_node_twin_sync)
        .toList();
  }

  @protected
  List<NestedRawStringMirrored> dco_decode_list_nested_raw_string_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_nested_raw_string_mirrored)
        .toList();
  }

  @protected
  ListOfNestedRawStringMirrored dco_decode_list_of_nested_raw_string_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListOfNestedRawStringMirrored(
      raw: dco_decode_list_nested_raw_string_mirrored(arr[0]),
    );
  }

  @protected
  List<String?> dco_decode_list_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_opt_String).toList();
  }

  @protected
  List<AttributeTwinNormal?>
      dco_decode_list_opt_box_autoadd_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_attribute_twin_normal)
        .toList();
  }

  @protected
  List<AttributeTwinRustAsync?>
      dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_attribute_twin_rust_async)
        .toList();
  }

  @protected
  List<AttributeTwinSync?> dco_decode_list_opt_box_autoadd_attribute_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_attribute_twin_sync)
        .toList();
  }

  @protected
  List<int?> dco_decode_list_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_opt_box_autoadd_i_32).toList();
  }

  @protected
  List<WeekdaysTwinNormal?>
      dco_decode_list_opt_box_autoadd_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_weekdays_twin_normal)
        .toList();
  }

  @protected
  List<WeekdaysTwinRustAsync?>
      dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_weekdays_twin_rust_async)
        .toList();
  }

  @protected
  List<WeekdaysTwinSync?> dco_decode_list_opt_box_autoadd_weekdays_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_weekdays_twin_sync)
        .toList();
  }

  @protected
  List<Int32List?> dco_decode_list_opt_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_list_prim_i_32_strict)
        .toList();
  }

  @protected
  List<PointTwinNormal> dco_decode_list_point_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_point_twin_normal).toList();
  }

  @protected
  List<PointTwinRustAsync> dco_decode_list_point_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_point_twin_rust_async)
        .toList();
  }

  @protected
  List<PointTwinSync> dco_decode_list_point_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_point_twin_sync).toList();
  }

  @protected
  List<double> dco_decode_list_prim_f_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<double>;
  }

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float32List;
  }

  @protected
  List<double> dco_decode_list_prim_f_64_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<double>;
  }

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float64List;
  }

  @protected
  List<int> dco_decode_list_prim_i_16_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int16List dco_decode_list_prim_i_16_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int16List;
  }

  @protected
  List<int> dco_decode_list_prim_i_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int32List dco_decode_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int32List;
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Int64List.from(raw);
  }

  @protected
  List<int> dco_decode_list_prim_i_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int8List dco_decode_list_prim_i_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int8List;
  }

  @protected
  List<int> dco_decode_list_prim_u_16_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint16List dco_decode_list_prim_u_16_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint16List;
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Uint64List.from(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<RawStringEnumMirrored> dco_decode_list_raw_string_enum_mirrored(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_raw_string_enum_mirrored)
        .toList();
  }

  @protected
  List<RawStringMirrored> dco_decode_list_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_raw_string_mirrored).toList();
  }

  @protected
  List<(int, BasicGeneralEnumTwinNormal)>
      dco_decode_list_record_i_32_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_general_enum_twin_normal)
        .toList();
  }

  @protected
  List<(int, BasicGeneralEnumTwinRustAsync)>
      dco_decode_list_record_i_32_basic_general_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_general_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<(int, BasicGeneralEnumTwinSync)>
      dco_decode_list_record_i_32_basic_general_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_general_enum_twin_sync)
        .toList();
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinNormal)>
      dco_decode_list_record_i_32_basic_primitive_enum_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_primitive_enum_twin_normal)
        .toList();
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinRustAsync)>
      dco_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_primitive_enum_twin_rust_async)
        .toList();
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinSync)>
      dco_decode_list_record_i_32_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_primitive_enum_twin_sync)
        .toList();
  }

  @protected
  List<(int, BasicStructTwinNormal)>
      dco_decode_list_record_i_32_basic_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_struct_twin_normal)
        .toList();
  }

  @protected
  List<(int, BasicStructTwinRustAsync)>
      dco_decode_list_record_i_32_basic_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_struct_twin_rust_async)
        .toList();
  }

  @protected
  List<(int, BasicStructTwinSync)>
      dco_decode_list_record_i_32_basic_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_basic_struct_twin_sync)
        .toList();
  }

  @protected
  List<(int, bool)> dco_decode_list_record_i_32_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_bool).toList();
  }

  @protected
  List<(int, double)> dco_decode_list_record_i_32_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_f_32).toList();
  }

  @protected
  List<(int, double)> dco_decode_list_record_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_f_64).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_16).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_32).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_64).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_i_8).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_isize).toList();
  }

  @protected
  List<(int, Uint8List)> dco_decode_list_record_i_32_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_i_32_list_prim_u_8_strict)
        .toList();
  }

  @protected
  List<(int, String)> dco_decode_list_record_i_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_string).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_16).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_32).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_64).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_u_8).toList();
  }

  @protected
  List<(int, int)> dco_decode_list_record_i_32_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_i_32_usize).toList();
  }

  @protected
  List<(String, EnumSimpleTwinNormal)>
      dco_decode_list_record_string_enum_simple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_enum_simple_twin_normal)
        .toList();
  }

  @protected
  List<(String, EnumSimpleTwinRustAsync)>
      dco_decode_list_record_string_enum_simple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_enum_simple_twin_rust_async)
        .toList();
  }

  @protected
  List<(String, EnumSimpleTwinSync)>
      dco_decode_list_record_string_enum_simple_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_enum_simple_twin_sync)
        .toList();
  }

  @protected
  List<(String, HashMapValue)> dco_decode_list_record_string_hash_map_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_hash_map_value)
        .toList();
  }

  @protected
  List<(String, int)> dco_decode_list_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_i_32).toList();
  }

  @protected
  List<(String, KitchenSinkTwinNormal)>
      dco_decode_list_record_string_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_kitchen_sink_twin_normal)
        .toList();
  }

  @protected
  List<(String, KitchenSinkTwinRustAsync)>
      dco_decode_list_record_string_kitchen_sink_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_kitchen_sink_twin_rust_async)
        .toList();
  }

  @protected
  List<(String, KitchenSinkTwinSync)>
      dco_decode_list_record_string_kitchen_sink_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_kitchen_sink_twin_sync)
        .toList();
  }

  @protected
  List<(String, Uint8List)> dco_decode_list_record_string_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_list_prim_u_8_strict)
        .toList();
  }

  @protected
  List<(String, MySize)> dco_decode_list_record_string_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_my_size)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(int, ApplicationMode)> dco_decode_list_record_u_8_application_mode(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_8_application_mode)
        .toList();
  }

  @protected
  List<SimpleStructTwinNormal> dco_decode_list_simple_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_simple_struct_twin_normal)
        .toList();
  }

  @protected
  List<SimpleStructTwinRustAsync> dco_decode_list_simple_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_simple_struct_twin_rust_async)
        .toList();
  }

  @protected
  List<SimpleStructTwinSync> dco_decode_list_simple_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_simple_struct_twin_sync)
        .toList();
  }

  @protected
  List<SumWithTwinNormal> dco_decode_list_sum_with_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sum_with_twin_normal).toList();
  }

  @protected
  List<SumWithTwinRustAsync> dco_decode_list_sum_with_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_sum_with_twin_rust_async)
        .toList();
  }

  @protected
  List<SumWithTwinSync> dco_decode_list_sum_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sum_with_twin_sync).toList();
  }

  @protected
  List<TestIdTwinNormal> dco_decode_list_test_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_test_id_twin_normal).toList();
  }

  @protected
  List<TestIdTwinRustAsync> dco_decode_list_test_id_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_test_id_twin_rust_async)
        .toList();
  }

  @protected
  List<TestIdTwinSync> dco_decode_list_test_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_test_id_twin_sync).toList();
  }

  @protected
  List<WeekdaysTwinNormal> dco_decode_list_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_weekdays_twin_normal).toList();
  }

  @protected
  List<WeekdaysTwinRustAsync> dco_decode_list_weekdays_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_weekdays_twin_rust_async)
        .toList();
  }

  @protected
  List<WeekdaysTwinSync> dco_decode_list_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_weekdays_twin_sync).toList();
  }

  @protected
  Log2TwinNormal dco_decode_log_2_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinNormal(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  Log2TwinRustAsync dco_decode_log_2_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinRustAsync(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  Log2TwinSync dco_decode_log_2_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Log2TwinSync(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  LogTwinNormal dco_decode_log_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinNormal(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  LogTwinRustAsync dco_decode_log_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogTwinRustAsync(
      key: dco_decode_u_32(arr[0]),
      value: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  MacroStruct dco_decode_macro_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MacroStruct(
      data: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  MeasureTwinNormal dco_decode_measure_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MeasureTwinNormal_Speed(
          dco_decode_box_speed_twin_normal(raw[1]),
        );
      case 1:
        return MeasureTwinNormal_Distance(
          dco_decode_box_distance_twin_normal(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MeasureTwinRustAsync dco_decode_measure_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MeasureTwinRustAsync_Speed(
          dco_decode_box_speed_twin_rust_async(raw[1]),
        );
      case 1:
        return MeasureTwinRustAsync_Distance(
          dco_decode_box_distance_twin_rust_async(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MeasureTwinSync dco_decode_measure_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MeasureTwinSync_Speed(
          dco_decode_box_speed_twin_sync(raw[1]),
        );
      case 1:
        return MeasureTwinSync_Distance(
          dco_decode_box_distance_twin_sync(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  MessageIdTwinNormal dco_decode_message_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinNormal(
      field0: dco_decode_u_8_array_32(arr[0]),
    );
  }

  @protected
  MessageIdTwinRustAsync dco_decode_message_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinRustAsync(
      field0: dco_decode_u_8_array_32(arr[0]),
    );
  }

  @protected
  MessageIdTwinSync dco_decode_message_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageIdTwinSync(
      field0: dco_decode_u_8_array_32(arr[0]),
    );
  }

  @protected
  MirrorStructTwinNormal dco_decode_mirror_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinNormal(
      a: dco_decode_application_settings(arr[0]),
      b: dco_decode_my_struct(arr[1]),
      c: dco_decode_list_my_enum(arr[2]),
      d: dco_decode_list_application_settings(arr[3]),
    );
  }

  @protected
  MirrorStructTwinRustAsync dco_decode_mirror_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinRustAsync(
      a: dco_decode_application_settings(arr[0]),
      b: dco_decode_my_struct(arr[1]),
      c: dco_decode_list_my_enum(arr[2]),
      d: dco_decode_list_application_settings(arr[3]),
    );
  }

  @protected
  MirrorStructTwinSync dco_decode_mirror_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MirrorStructTwinSync(
      a: dco_decode_application_settings(arr[0]),
      b: dco_decode_my_struct(arr[1]),
      c: dco_decode_list_my_enum(arr[2]),
      d: dco_decode_list_application_settings(arr[3]),
    );
  }

  @protected
  MoreThanJustOneRawStringStructTwinNormal
      dco_decode_more_than_just_one_raw_string_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinNormal(
      regular: dco_decode_String(arr[0]),
      type: dco_decode_String(arr[1]),
      async: dco_decode_bool(arr[2]),
      another: dco_decode_String(arr[3]),
    );
  }

  @protected
  MoreThanJustOneRawStringStructTwinRustAsync
      dco_decode_more_than_just_one_raw_string_struct_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinRustAsync(
      regular: dco_decode_String(arr[0]),
      type: dco_decode_String(arr[1]),
      async: dco_decode_bool(arr[2]),
      another: dco_decode_String(arr[3]),
    );
  }

  @protected
  MoreThanJustOneRawStringStructTwinSync
      dco_decode_more_than_just_one_raw_string_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MoreThanJustOneRawStringStructTwinSync(
      regular: dco_decode_String(arr[0]),
      type: dco_decode_String(arr[1]),
      async: dco_decode_bool(arr[2]),
      another: dco_decode_String(arr[3]),
    );
  }

  @protected
  MyCallableTwinNormal dco_decode_my_callable_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyCallableTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyCallableTwinRustAsync dco_decode_my_callable_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyCallableTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyCallableTwinSync dco_decode_my_callable_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyCallableTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyEnum dco_decode_my_enum(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MyEnum.values[raw as int];
  }

  @protected
  MyNestedStructTwinNormal dco_decode_my_nested_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinNormal(
      treeNode: dco_decode_my_tree_node_twin_normal(arr[0]),
      weekday: dco_decode_weekdays_twin_normal(arr[1]),
    );
  }

  @protected
  MyNestedStructTwinRustAsync dco_decode_my_nested_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinRustAsync(
      treeNode: dco_decode_my_tree_node_twin_rust_async(arr[0]),
      weekday: dco_decode_weekdays_twin_rust_async(arr[1]),
    );
  }

  @protected
  MyNestedStructTwinSync dco_decode_my_nested_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyNestedStructTwinSync(
      treeNode: dco_decode_my_tree_node_twin_sync(arr[0]),
      weekday: dco_decode_weekdays_twin_sync(arr[1]),
    );
  }

  @protected
  MySize dco_decode_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MySize(
      width: dco_decode_i_32(arr[0]),
      height: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  MyStreamEntryTwinNormal dco_decode_my_stream_entry_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinNormal(
      hello: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyStreamEntryTwinRustAsync dco_decode_my_stream_entry_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStreamEntryTwinRustAsync(
      hello: dco_decode_String(arr[0]),
    );
  }

  @protected
  MyStruct dco_decode_my_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MyStruct(
      content: dco_decode_bool(arr[0]),
    );
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      dco_decode_my_struct_containing_stream_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyStructContainingStreamSinkTwinNormal(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_StreamSink_i_32_Sse(arr[1]),
    );
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      dco_decode_my_struct_containing_stream_sink_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MyStructContainingStreamSinkTwinRustAsync(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_StreamSink_i_32_Sse(arr[1]),
    );
  }

  @protected
  MyTreeNodeTwinNormal dco_decode_my_tree_node_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinNormal(
      valueI32: dco_decode_i_32(arr[0]),
      valueVecU8: dco_decode_list_prim_u_8_strict(arr[1]),
      valueBoolean: dco_decode_bool(arr[2]),
      children: dco_decode_list_my_tree_node_twin_normal(arr[3]),
    );
  }

  @protected
  MyTreeNodeTwinRustAsync dco_decode_my_tree_node_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinRustAsync(
      valueI32: dco_decode_i_32(arr[0]),
      valueVecU8: dco_decode_list_prim_u_8_strict(arr[1]),
      valueBoolean: dco_decode_bool(arr[2]),
      children: dco_decode_list_my_tree_node_twin_rust_async(arr[3]),
    );
  }

  @protected
  MyTreeNodeTwinSync dco_decode_my_tree_node_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MyTreeNodeTwinSync(
      valueI32: dco_decode_i_32(arr[0]),
      valueVecU8: dco_decode_list_prim_u_8_strict(arr[1]),
      valueBoolean: dco_decode_bool(arr[2]),
      children: dco_decode_list_my_tree_node_twin_sync(arr[3]),
    );
  }

  @protected
  NestedRawStringMirrored dco_decode_nested_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NestedRawStringMirrored(
      raw: dco_decode_raw_string_mirrored(arr[0]),
    );
  }

  @protected
  NewSimpleStruct dco_decode_new_simple_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewSimpleStruct(
      field: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  NewTypeIntTwinNormal dco_decode_new_type_int_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinNormal(
      field0: dco_decode_i_64(arr[0]),
    );
  }

  @protected
  NewTypeIntTwinRustAsync dco_decode_new_type_int_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinRustAsync(
      field0: dco_decode_i_64(arr[0]),
    );
  }

  @protected
  NewTypeIntTwinSync dco_decode_new_type_int_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return NewTypeIntTwinSync(
      field0: dco_decode_i_64(arr[0]),
    );
  }

  @protected
  NoteTwinNormal dco_decode_note_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NoteTwinNormal(
      day: dco_decode_box_weekdays_twin_normal(arr[0]),
      body: dco_decode_String(arr[1]),
    );
  }

  @protected
  NoteTwinRustAsync dco_decode_note_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NoteTwinRustAsync(
      day: dco_decode_box_weekdays_twin_rust_async(arr[0]),
      body: dco_decode_String(arr[1]),
    );
  }

  @protected
  NoteTwinSync dco_decode_note_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return NoteTwinSync(
      day: dco_decode_box_weekdays_twin_sync(arr[0]),
      body: dco_decode_String(arr[1]),
    );
  }

  @protected
  Numbers dco_decode_numbers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Numbers(
      field0: dco_decode_list_prim_i_32_strict(arr[0]),
    );
  }

  @protected
  OldSimpleStruct dco_decode_old_simple_struct(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OldSimpleStruct(
      field: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  OpaqueNestedTwinNormal dco_decode_opaque_nested_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinNormal(
      first: dco_decode_RustOpaque_HideDataTwinNormal(arr[0]),
      second: dco_decode_RustOpaque_HideDataTwinNormal(arr[1]),
    );
  }

  @protected
  OpaqueNestedTwinRustAsync dco_decode_opaque_nested_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinRustAsync(
      first: dco_decode_RustOpaque_HideDataTwinRustAsync(arr[0]),
      second: dco_decode_RustOpaque_HideDataTwinRustAsync(arr[1]),
    );
  }

  @protected
  OpaqueNestedTwinSync dco_decode_opaque_nested_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpaqueNestedTwinSync(
      first: dco_decode_RustOpaque_HideDataTwinSync(arr[0]),
      second: dco_decode_RustOpaque_HideDataTwinSync(arr[1]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  NonCloneSimpleTwinNormal?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            raw);
  }

  @protected
  NonCloneSimpleTwinRustAsync?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            raw);
  }

  @protected
  NonCloneSimpleTwinSync?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            raw);
  }

  @protected
  Duration? dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Naive(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  Object? dco_decode_opt_box_autoadd_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_DartOpaque(raw);
  }

  @protected
  HideDataAnotherTwinNormal?
      dco_decode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(raw);
  }

  @protected
  HideDataTwinNormal? dco_decode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataTwinNormal(raw);
  }

  @protected
  HideDataTwinRustAsync?
      dco_decode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(raw);
  }

  @protected
  HideDataTwinSync? dco_decode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_RustOpaque_HideDataTwinSync(raw);
  }

  @protected
  ApplicationEnv? dco_decode_opt_box_autoadd_application_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_application_env(raw);
  }

  @protected
  ApplicationMode? dco_decode_opt_box_autoadd_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_application_mode(raw);
  }

  @protected
  AttributeTwinNormal? dco_decode_opt_box_autoadd_attribute_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_attribute_twin_normal(raw);
  }

  @protected
  AttributeTwinRustAsync? dco_decode_opt_box_autoadd_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_attribute_twin_rust_async(raw);
  }

  @protected
  AttributeTwinSync? dco_decode_opt_box_autoadd_attribute_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_attribute_twin_sync(raw);
  }

  @protected
  BasicGeneralEnumTwinNormal?
      dco_decode_opt_box_autoadd_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_general_enum_twin_normal(raw);
  }

  @protected
  BasicGeneralEnumTwinRustAsync?
      dco_decode_opt_box_autoadd_basic_general_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_general_enum_twin_rust_async(raw);
  }

  @protected
  BasicGeneralEnumTwinSync?
      dco_decode_opt_box_autoadd_basic_general_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_general_enum_twin_sync(raw);
  }

  @protected
  BasicPrimitiveEnumTwinNormal?
      dco_decode_opt_box_autoadd_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_primitive_enum_twin_normal(raw);
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync?
      dco_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_primitive_enum_twin_rust_async(raw);
  }

  @protected
  BasicPrimitiveEnumTwinSync?
      dco_decode_opt_box_autoadd_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_primitive_enum_twin_sync(raw);
  }

  @protected
  BasicStructTwinNormal? dco_decode_opt_box_autoadd_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_struct_twin_normal(raw);
  }

  @protected
  BasicStructTwinRustAsync?
      dco_decode_opt_box_autoadd_basic_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_struct_twin_rust_async(raw);
  }

  @protected
  BasicStructTwinSync? dco_decode_opt_box_autoadd_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_basic_struct_twin_sync(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  ElementTwinNormal? dco_decode_opt_box_autoadd_element_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_element_twin_normal(raw);
  }

  @protected
  ElementTwinRustAsync? dco_decode_opt_box_autoadd_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_element_twin_rust_async(raw);
  }

  @protected
  ElementTwinSync? dco_decode_opt_box_autoadd_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_element_twin_sync(raw);
  }

  @protected
  ExoticOptionalsTwinNormal?
      dco_decode_opt_box_autoadd_exotic_optionals_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      dco_decode_opt_box_autoadd_exotic_optionals_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync?
      dco_decode_opt_box_autoadd_exotic_optionals_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_exotic_optionals_twin_sync(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_16(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_8(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_isize(raw);
  }

  @protected
  MeasureTwinNormal? dco_decode_opt_box_autoadd_measure_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_measure_twin_normal(raw);
  }

  @protected
  MeasureTwinRustAsync? dco_decode_opt_box_autoadd_measure_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_measure_twin_rust_async(raw);
  }

  @protected
  MeasureTwinSync? dco_decode_opt_box_autoadd_measure_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_measure_twin_sync(raw);
  }

  @protected
  NewTypeIntTwinNormal? dco_decode_opt_box_autoadd_new_type_int_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_new_type_int_twin_normal(raw);
  }

  @protected
  NewTypeIntTwinRustAsync?
      dco_decode_opt_box_autoadd_new_type_int_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_new_type_int_twin_rust_async(raw);
  }

  @protected
  NewTypeIntTwinSync? dco_decode_opt_box_autoadd_new_type_int_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_new_type_int_twin_sync(raw);
  }

  @protected
  (String, int)? dco_decode_opt_box_autoadd_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_record_string_i_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_16(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  WeekdaysTwinNormal? dco_decode_opt_box_autoadd_weekdays_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_weekdays_twin_normal(raw);
  }

  @protected
  WeekdaysTwinRustAsync? dco_decode_opt_box_autoadd_weekdays_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_weekdays_twin_rust_async(raw);
  }

  @protected
  WeekdaysTwinSync? dco_decode_opt_box_autoadd_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_weekdays_twin_sync(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal?
      dco_decode_opt_box_benchmark_binary_tree_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_benchmark_binary_tree_twin_normal(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync?
      dco_decode_opt_box_benchmark_binary_tree_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_benchmark_binary_tree_twin_rust_async(raw);
  }

  @protected
  BenchmarkBinaryTreeTwinSync?
      dco_decode_opt_box_benchmark_binary_tree_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_benchmark_binary_tree_twin_sync(raw);
  }

  @protected
  bool? dco_decode_opt_box_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_bool(raw);
  }

  @protected
  ExoticOptionalsTwinNormal? dco_decode_opt_box_exotic_optionals_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_exotic_optionals_twin_normal(raw);
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      dco_decode_opt_box_exotic_optionals_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_exotic_optionals_twin_rust_async(raw);
  }

  @protected
  ExoticOptionalsTwinSync? dco_decode_opt_box_exotic_optionals_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_exotic_optionals_twin_sync(raw);
  }

  @protected
  double? dco_decode_opt_box_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_i_32(raw);
  }

  @protected
  int? dco_decode_opt_box_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_i_64(raw);
  }

  @protected
  int? dco_decode_opt_box_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_i_8(raw);
  }

  @protected
  int? dco_decode_opt_box_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_u_8(raw);
  }

  @protected
  List<AttributeTwinNormal>? dco_decode_opt_list_attribute_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_attribute_twin_normal(raw);
  }

  @protected
  List<AttributeTwinRustAsync>? dco_decode_opt_list_attribute_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_attribute_twin_rust_async(raw);
  }

  @protected
  List<AttributeTwinSync>? dco_decode_opt_list_attribute_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_attribute_twin_sync(raw);
  }

  @protected
  List<ElementTwinNormal>? dco_decode_opt_list_element_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_element_twin_normal(raw);
  }

  @protected
  List<ElementTwinRustAsync>? dco_decode_opt_list_element_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_element_twin_rust_async(raw);
  }

  @protected
  List<ElementTwinSync>? dco_decode_opt_list_element_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_element_twin_sync(raw);
  }

  @protected
  List<AttributeTwinNormal?>?
      dco_decode_opt_list_opt_box_autoadd_attribute_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_opt_box_autoadd_attribute_twin_normal(raw);
  }

  @protected
  List<AttributeTwinRustAsync?>?
      dco_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_opt_box_autoadd_attribute_twin_rust_async(raw);
  }

  @protected
  List<AttributeTwinSync?>?
      dco_decode_opt_list_opt_box_autoadd_attribute_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_list_opt_box_autoadd_attribute_twin_sync(raw);
  }

  @protected
  Float32List? dco_decode_opt_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_f_32_strict(raw);
  }

  @protected
  Float64List? dco_decode_opt_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_f_64_strict(raw);
  }

  @protected
  Int32List? dco_decode_opt_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_i_32_strict(raw);
  }

  @protected
  Int8List? dco_decode_opt_list_prim_i_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_i_8_strict(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  OptVecsTwinNormal dco_decode_opt_vecs_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinNormal(
      i32: dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: dco_decode_list_opt_box_autoadd_weekdays_twin_normal(arr[1]),
      strings: dco_decode_list_opt_String(arr[2]),
      buffers: dco_decode_list_opt_list_prim_i_32_strict(arr[3]),
    );
  }

  @protected
  OptVecsTwinRustAsync dco_decode_opt_vecs_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinRustAsync(
      i32: dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: dco_decode_list_opt_box_autoadd_weekdays_twin_rust_async(arr[1]),
      strings: dco_decode_list_opt_String(arr[2]),
      buffers: dco_decode_list_opt_list_prim_i_32_strict(arr[3]),
    );
  }

  @protected
  OptVecsTwinSync dco_decode_opt_vecs_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return OptVecsTwinSync(
      i32: dco_decode_list_opt_box_autoadd_i_32(arr[0]),
      enums: dco_decode_list_opt_box_autoadd_weekdays_twin_sync(arr[1]),
      strings: dco_decode_list_opt_String(arr[2]),
      buffers: dco_decode_list_opt_list_prim_i_32_strict(arr[3]),
    );
  }

  @protected
  PointTwinNormal dco_decode_point_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinNormal(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  PointTwinNormalArray2 dco_decode_point_twin_normal_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointTwinNormalArray2(
        (raw as List<dynamic>).map(dco_decode_point_twin_normal).toList());
  }

  @protected
  PointTwinRustAsync dco_decode_point_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinRustAsync(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  PointTwinRustAsyncArray2 dco_decode_point_twin_rust_async_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointTwinRustAsyncArray2(
        (raw as List<dynamic>).map(dco_decode_point_twin_rust_async).toList());
  }

  @protected
  PointTwinSync dco_decode_point_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PointTwinSync(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  PointTwinSyncArray2 dco_decode_point_twin_sync_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointTwinSyncArray2(
        (raw as List<dynamic>).map(dco_decode_point_twin_sync).toList());
  }

  @protected
  RawStringEnumMirrored dco_decode_raw_string_enum_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RawStringEnumMirrored_Raw(
          dco_decode_box_autoadd_raw_string_mirrored(raw[1]),
        );
      case 1:
        return RawStringEnumMirrored_Nested(
          dco_decode_box_autoadd_nested_raw_string_mirrored(raw[1]),
        );
      case 2:
        return RawStringEnumMirrored_ListOfNested(
          dco_decode_box_autoadd_list_of_nested_raw_string_mirrored(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  RawStringItemStructTwinNormal dco_decode_raw_string_item_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinNormal(
      type: dco_decode_String(arr[0]),
    );
  }

  @protected
  RawStringItemStructTwinRustAsync
      dco_decode_raw_string_item_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinRustAsync(
      type: dco_decode_String(arr[0]),
    );
  }

  @protected
  RawStringItemStructTwinSync dco_decode_raw_string_item_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringItemStructTwinSync(
      type: dco_decode_String(arr[0]),
    );
  }

  @protected
  RawStringMirrored dco_decode_raw_string_mirrored(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RawStringMirrored(
      value: dco_decode_String(arr[0]),
    );
  }

  @protected
  (ApplicationSettings, RawStringEnumMirrored)
      dco_decode_record_application_settings_raw_string_enum_mirrored(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_application_settings(arr[0]),
      dco_decode_raw_string_enum_mirrored(arr[1]),
    );
  }

  @protected
  (
    OpaqueOneTwinNormal,
    OpaqueTwoTwinNormal
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          arr[1]),
    );
  }

  @protected
  (
    OpaqueOneTwinRustAsync,
    OpaqueTwoTwinRustAsync
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          arr[1]),
    );
  }

  @protected
  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          arr[1]),
    );
  }

  @protected
  (int, BasicGeneralEnumTwinNormal)
      dco_decode_record_i_32_basic_general_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_general_enum_twin_normal(arr[1]),
    );
  }

  @protected
  (int, BasicGeneralEnumTwinRustAsync)
      dco_decode_record_i_32_basic_general_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_general_enum_twin_rust_async(arr[1]),
    );
  }

  @protected
  (int, BasicGeneralEnumTwinSync)
      dco_decode_record_i_32_basic_general_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_general_enum_twin_sync(arr[1]),
    );
  }

  @protected
  (int, BasicPrimitiveEnumTwinNormal)
      dco_decode_record_i_32_basic_primitive_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_primitive_enum_twin_normal(arr[1]),
    );
  }

  @protected
  (int, BasicPrimitiveEnumTwinRustAsync)
      dco_decode_record_i_32_basic_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_primitive_enum_twin_rust_async(arr[1]),
    );
  }

  @protected
  (int, BasicPrimitiveEnumTwinSync)
      dco_decode_record_i_32_basic_primitive_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_primitive_enum_twin_sync(arr[1]),
    );
  }

  @protected
  (int, BasicStructTwinNormal) dco_decode_record_i_32_basic_struct_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_struct_twin_normal(arr[1]),
    );
  }

  @protected
  (int, BasicStructTwinRustAsync)
      dco_decode_record_i_32_basic_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_struct_twin_rust_async(arr[1]),
    );
  }

  @protected
  (int, BasicStructTwinSync) dco_decode_record_i_32_basic_struct_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_basic_struct_twin_sync(arr[1]),
    );
  }

  @protected
  (int, bool) dco_decode_record_i_32_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_bool(arr[1]),
    );
  }

  @protected
  (int, double) dco_decode_record_i_32_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_f_32(arr[1]),
    );
  }

  @protected
  (int, double) dco_decode_record_i_32_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_f_64(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_16(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_32(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_64(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_8(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_isize(arr[1]),
    );
  }

  @protected
  (int, Uint8List) dco_decode_record_i_32_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (int, String) dco_decode_record_i_32_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_16(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_32(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_64(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_u_8(arr[1]),
    );
  }

  @protected
  (int, int) dco_decode_record_i_32_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_usize(arr[1]),
    );
  }

  @protected
  (String, EnumSimpleTwinNormal)
      dco_decode_record_string_enum_simple_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_enum_simple_twin_normal(arr[1]),
    );
  }

  @protected
  (String, EnumSimpleTwinRustAsync)
      dco_decode_record_string_enum_simple_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_enum_simple_twin_rust_async(arr[1]),
    );
  }

  @protected
  (String, EnumSimpleTwinSync) dco_decode_record_string_enum_simple_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_enum_simple_twin_sync(arr[1]),
    );
  }

  @protected
  (String, HashMapValue) dco_decode_record_string_hash_map_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_hash_map_value(arr[1]),
    );
  }

  @protected
  (String, int) dco_decode_record_string_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_i_32(arr[1]),
    );
  }

  @protected
  (String, KitchenSinkTwinNormal)
      dco_decode_record_string_kitchen_sink_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_kitchen_sink_twin_normal(arr[1]),
    );
  }

  @protected
  (String, KitchenSinkTwinRustAsync)
      dco_decode_record_string_kitchen_sink_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_kitchen_sink_twin_rust_async(arr[1]),
    );
  }

  @protected
  (String, KitchenSinkTwinSync) dco_decode_record_string_kitchen_sink_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_kitchen_sink_twin_sync(arr[1]),
    );
  }

  @protected
  (String, Uint8List) dco_decode_record_string_list_prim_u_8_strict(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  (String, MySize) dco_decode_record_string_my_size(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_my_size(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (int, ApplicationMode) dco_decode_record_u_8_application_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_8(arr[0]),
      dco_decode_application_mode(arr[1]),
    );
  }

  @protected
  Sequences dco_decode_sequences(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Sequences(
      field0: dco_decode_list_prim_i_32_strict(arr[0]),
    );
  }

  @protected
  SimpleEnumTwinNormal dco_decode_simple_enum_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimpleEnumTwinNormal_First();
      case 1:
        return SimpleEnumTwinNormal_Second(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SimpleEnumTwinRustAsync dco_decode_simple_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimpleEnumTwinRustAsync_First();
      case 1:
        return SimpleEnumTwinRustAsync_Second(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SimpleEnumTwinSync dco_decode_simple_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SimpleEnumTwinSync_First();
      case 1:
        return SimpleEnumTwinSync_Second(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SimplePrimitiveEnumTwinNormal dco_decode_simple_primitive_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimplePrimitiveEnumTwinNormal.values[raw as int];
  }

  @protected
  SimplePrimitiveEnumTwinRustAsync
      dco_decode_simple_primitive_enum_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimplePrimitiveEnumTwinRustAsync.values[raw as int];
  }

  @protected
  SimplePrimitiveEnumTwinSync dco_decode_simple_primitive_enum_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SimplePrimitiveEnumTwinSync.values[raw as int];
  }

  @protected
  SimpleStructForBorrowTwinNormal
      dco_decode_simple_struct_for_borrow_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructForBorrowTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      dco_decode_simple_struct_for_borrow_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructForBorrowTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructForBorrowTwinSync dco_decode_simple_struct_for_borrow_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructForBorrowTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructTwinNormal dco_decode_simple_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructTwinRustAsync dco_decode_simple_struct_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleStructTwinSync dco_decode_simple_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleStructTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      dco_decode_simple_translatable_external_struct_with_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SimpleTranslatableExternalStructWithMethod(
      a: dco_decode_String(arr[0]),
    );
  }

  @protected
  SomeStructTwinNormal dco_decode_some_struct_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinNormal(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SomeStructTwinRustAsync dco_decode_some_struct_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinRustAsync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SomeStructTwinSync dco_decode_some_struct_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SomeStructTwinSync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SpeedTwinNormal dco_decode_speed_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SpeedTwinNormal_Unknown();
      case 1:
        return SpeedTwinNormal_GPS(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SpeedTwinRustAsync dco_decode_speed_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SpeedTwinRustAsync_Unknown();
      case 1:
        return SpeedTwinRustAsync_GPS(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SpeedTwinSync dco_decode_speed_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SpeedTwinSync_Unknown();
      case 1:
        return SpeedTwinSync_GPS(
          dco_decode_f_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  StaticOnlyTwinNormal dco_decode_static_only_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StaticOnlyTwinNormal(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  StaticOnlyTwinRustAsync dco_decode_static_only_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StaticOnlyTwinRustAsync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  StaticOnlyTwinSync dco_decode_static_only_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StaticOnlyTwinSync(
      one: dco_decode_String(arr[0]),
    );
  }

  @protected
  StructInLowerLevel dco_decode_struct_in_lower_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructInLowerLevel(
      inner: dco_decode_struct_in_upper_level(arr[0]),
    );
  }

  @protected
  StructInUpperLevel dco_decode_struct_in_upper_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructInUpperLevel(
      upper: dco_decode_usize(arr[0]),
    );
  }

  @protected
  StructWithCommentsTwinNormal dco_decode_struct_with_comments_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithCommentsTwinNormal(
      fieldWithComments: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithCommentsTwinRustAsync
      dco_decode_struct_with_comments_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithCommentsTwinRustAsync(
      fieldWithComments: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithCommentsTwinSync dco_decode_struct_with_comments_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithCommentsTwinSync(
      fieldWithComments: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithEnumTwinNormal dco_decode_struct_with_enum_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinNormal(
      abc1: dco_decode_abc_twin_normal(arr[0]),
      abc2: dco_decode_abc_twin_normal(arr[1]),
    );
  }

  @protected
  StructWithEnumTwinRustAsync dco_decode_struct_with_enum_twin_rust_async(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinRustAsync(
      abc1: dco_decode_abc_twin_rust_async(arr[0]),
      abc2: dco_decode_abc_twin_rust_async(arr[1]),
    );
  }

  @protected
  StructWithEnumTwinSync dco_decode_struct_with_enum_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithEnumTwinSync(
      abc1: dco_decode_abc_twin_sync(arr[0]),
      abc2: dco_decode_abc_twin_sync(arr[1]),
    );
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      dco_decode_struct_with_explicit_auto_opaque_field_twin_normal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithExplicitAutoOpaqueFieldTwinNormal(
      autoOpaque:
          dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              arr[0]),
      normal: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      dco_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithExplicitAutoOpaqueFieldTwinRustAsync(
      autoOpaque:
          dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              arr[0]),
      normal: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      dco_decode_struct_with_explicit_auto_opaque_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithExplicitAutoOpaqueFieldTwinSync(
      autoOpaque:
          dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              arr[0]),
      normal: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      dco_decode_struct_with_good_and_opaque_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StructWithGoodAndOpaqueFieldTwinNormal(
      good: dco_decode_String(arr[0]),
      opaque:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              arr[1]),
      optionOpaque:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              arr[2]),
    );
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      dco_decode_struct_with_good_and_opaque_field_twin_rust_async(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StructWithGoodAndOpaqueFieldTwinRustAsync(
      good: dco_decode_String(arr[0]),
      opaque:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              arr[1]),
      optionOpaque:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              arr[2]),
    );
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      dco_decode_struct_with_good_and_opaque_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StructWithGoodAndOpaqueFieldTwinSync(
      good: dco_decode_String(arr[0]),
      opaque:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              arr[1]),
      optionOpaque:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              arr[2]),
    );
  }

  @protected
  StructWithHashMap dco_decode_struct_with_hash_map(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithHashMap(
      map: dco_decode_Map_String_hash_map_value(arr[0]),
    );
  }

  @protected
  StructWithOneFieldTwinNormal dco_decode_struct_with_one_field_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinNormal(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithOneFieldTwinRustAsync
      dco_decode_struct_with_one_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinRustAsync(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithOneFieldTwinSync dco_decode_struct_with_one_field_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StructWithOneFieldTwinSync(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  StructWithTwoFieldTwinNormal dco_decode_struct_with_two_field_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinNormal(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      dco_decode_struct_with_two_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinRustAsync(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithTwoFieldTwinSync dco_decode_struct_with_two_field_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StructWithTwoFieldTwinSync(
      a: dco_decode_i_32(arr[0]),
      b: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  StructWithZeroFieldTwinNormal dco_decode_struct_with_zero_field_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinNormal();
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      dco_decode_struct_with_zero_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinRustAsync();
  }

  @protected
  StructWithZeroFieldTwinSync dco_decode_struct_with_zero_field_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return StructWithZeroFieldTwinSync();
  }

  @protected
  SumWithTwinNormal dco_decode_sum_with_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinNormal(
      x: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SumWithTwinNormalArray3 dco_decode_sum_with_twin_normal_array_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SumWithTwinNormalArray3(
        (raw as List<dynamic>).map(dco_decode_sum_with_twin_normal).toList());
  }

  @protected
  SumWithTwinRustAsync dco_decode_sum_with_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinRustAsync(
      x: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SumWithTwinRustAsyncArray3 dco_decode_sum_with_twin_rust_async_array_3(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SumWithTwinRustAsyncArray3((raw as List<dynamic>)
        .map(dco_decode_sum_with_twin_rust_async)
        .toList());
  }

  @protected
  SumWithTwinSync dco_decode_sum_with_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SumWithTwinSync(
      x: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  SumWithTwinSyncArray3 dco_decode_sum_with_twin_sync_array_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SumWithTwinSyncArray3(
        (raw as List<dynamic>).map(dco_decode_sum_with_twin_sync).toList());
  }

  @protected
  TestChronoTwinNormal dco_decode_test_chrono_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinNormal(
      dt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  @protected
  TestChronoTwinRustAsync dco_decode_test_chrono_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinRustAsync(
      dt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  @protected
  TestChronoTwinSync dco_decode_test_chrono_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TestChronoTwinSync(
      dt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[0]),
      dt2: dco_decode_opt_box_autoadd_Chrono_Naive(arr[1]),
      du: dco_decode_opt_box_autoadd_Chrono_Duration(arr[2]),
    );
  }

  @protected
  TestIdTwinNormal dco_decode_test_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinNormal(
      field0: dco_decode_i_32_array_2(arr[0]),
    );
  }

  @protected
  TestIdTwinNormalArray2 dco_decode_test_id_twin_normal_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinNormalArray2(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_normal).toList());
  }

  @protected
  TestIdTwinNormalArray4 dco_decode_test_id_twin_normal_array_4(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinNormalArray4(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_normal).toList());
  }

  @protected
  TestIdTwinRustAsync dco_decode_test_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinRustAsync(
      field0: dco_decode_i_32_array_2(arr[0]),
    );
  }

  @protected
  TestIdTwinRustAsyncArray2 dco_decode_test_id_twin_rust_async_array_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinRustAsyncArray2((raw as List<dynamic>)
        .map(dco_decode_test_id_twin_rust_async)
        .toList());
  }

  @protected
  TestIdTwinRustAsyncArray4 dco_decode_test_id_twin_rust_async_array_4(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinRustAsyncArray4((raw as List<dynamic>)
        .map(dco_decode_test_id_twin_rust_async)
        .toList());
  }

  @protected
  TestIdTwinSync dco_decode_test_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TestIdTwinSync(
      field0: dco_decode_i_32_array_2(arr[0]),
    );
  }

  @protected
  TestIdTwinSyncArray2 dco_decode_test_id_twin_sync_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinSyncArray2(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_sync).toList());
  }

  @protected
  TestIdTwinSyncArray4 dco_decode_test_id_twin_sync_array_4(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestIdTwinSyncArray4(
        (raw as List<dynamic>).map(dco_decode_test_id_twin_sync).toList());
  }

  @protected
  TestModelTwinNormal dco_decode_test_model_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinNormal(
      id: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
      aliasEnum: dco_decode_my_enum(arr[2]),
      aliasStruct: dco_decode_my_struct(arr[3]),
    );
  }

  @protected
  TestModelTwinRustAsync dco_decode_test_model_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinRustAsync(
      id: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
      aliasEnum: dco_decode_my_enum(arr[2]),
      aliasStruct: dco_decode_my_struct(arr[3]),
    );
  }

  @protected
  TestModelTwinSync dco_decode_test_model_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TestModelTwinSync(
      id: dco_decode_u_64(arr[0]),
      name: dco_decode_String(arr[1]),
      aliasEnum: dco_decode_my_enum(arr[2]),
      aliasStruct: dco_decode_my_struct(arr[3]),
    );
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      dco_decode_translatable_struct_with_dart_code_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TranslatableStructWithDartCodeTwinNormal(
      a: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      dco_decode_tuple_struct_with_one_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinNormal(
      field0: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      dco_decode_tuple_struct_with_one_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinRustAsync(
      field0: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithOneFieldTwinSync
      dco_decode_tuple_struct_with_one_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TupleStructWithOneFieldTwinSync(
      field0: dco_decode_i_32(arr[0]),
    );
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      dco_decode_tuple_struct_with_two_field_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinNormal(
      field0: dco_decode_i_32(arr[0]),
      field1: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      dco_decode_tuple_struct_with_two_field_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinRustAsync(
      field0: dco_decode_i_32(arr[0]),
      field1: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      dco_decode_tuple_struct_with_two_field_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TupleStructWithTwoFieldTwinSync(
      field0: dco_decode_i_32(arr[0]),
      field1: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array1600 dco_decode_u_8_array_1600(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array1600(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array2 dco_decode_u_8_array_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array2(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array5 dco_decode_u_8_array_5(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array5(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array8 dco_decode_u_8_array_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array8(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UserIdTwinNormal dco_decode_user_id_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinNormal(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  UserIdTwinRustAsync dco_decode_user_id_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinRustAsync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  UserIdTwinSync dco_decode_user_id_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserIdTwinSync(
      value: dco_decode_u_32(arr[0]),
    );
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  VecOfPrimitivePackTwinNormal dco_decode_vec_of_primitive_pack_twin_normal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinNormal(
      int8List: dco_decode_list_prim_i_8_strict(arr[0]),
      uint8List: dco_decode_list_prim_u_8_strict(arr[1]),
      int16List: dco_decode_list_prim_i_16_strict(arr[2]),
      uint16List: dco_decode_list_prim_u_16_strict(arr[3]),
      uint32List: dco_decode_list_prim_u_32_strict(arr[4]),
      int32List: dco_decode_list_prim_i_32_strict(arr[5]),
      uint64List: dco_decode_list_prim_u_64_strict(arr[6]),
      int64List: dco_decode_list_prim_i_64_strict(arr[7]),
      float32List: dco_decode_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_list_prim_f_64_strict(arr[9]),
      boolList: dco_decode_list_bool(arr[10]),
    );
  }

  @protected
  VecOfPrimitivePackTwinRustAsync
      dco_decode_vec_of_primitive_pack_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinRustAsync(
      int8List: dco_decode_list_prim_i_8_strict(arr[0]),
      uint8List: dco_decode_list_prim_u_8_strict(arr[1]),
      int16List: dco_decode_list_prim_i_16_strict(arr[2]),
      uint16List: dco_decode_list_prim_u_16_strict(arr[3]),
      uint32List: dco_decode_list_prim_u_32_strict(arr[4]),
      int32List: dco_decode_list_prim_i_32_strict(arr[5]),
      uint64List: dco_decode_list_prim_u_64_strict(arr[6]),
      int64List: dco_decode_list_prim_i_64_strict(arr[7]),
      float32List: dco_decode_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_list_prim_f_64_strict(arr[9]),
      boolList: dco_decode_list_bool(arr[10]),
    );
  }

  @protected
  VecOfPrimitivePackTwinSync dco_decode_vec_of_primitive_pack_twin_sync(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return VecOfPrimitivePackTwinSync(
      int8List: dco_decode_list_prim_i_8_strict(arr[0]),
      uint8List: dco_decode_list_prim_u_8_strict(arr[1]),
      int16List: dco_decode_list_prim_i_16_strict(arr[2]),
      uint16List: dco_decode_list_prim_u_16_strict(arr[3]),
      uint32List: dco_decode_list_prim_u_32_strict(arr[4]),
      int32List: dco_decode_list_prim_i_32_strict(arr[5]),
      uint64List: dco_decode_list_prim_u_64_strict(arr[6]),
      int64List: dco_decode_list_prim_i_64_strict(arr[7]),
      float32List: dco_decode_list_prim_f_32_strict(arr[8]),
      float64List: dco_decode_list_prim_f_64_strict(arr[9]),
      boolList: dco_decode_list_bool(arr[10]),
    );
  }

  @protected
  WeekdaysTwinNormal dco_decode_weekdays_twin_normal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeekdaysTwinNormal.values[raw as int];
  }

  @protected
  WeekdaysTwinRustAsync dco_decode_weekdays_twin_rust_async(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeekdaysTwinRustAsync.values[raw as int];
  }

  @protected
  WeekdaysTwinSync dco_decode_weekdays_twin_sync(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WeekdaysTwinSync.values[raw as int];
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BoxFnStringString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxFnStringString.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethod.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleA.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleB.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInMultiFile.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethod.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleA.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleB.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInMultiFile.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_Backtrace(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return inner;
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner);
  }

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner, isUtc: false);
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner, isUtc: true);
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner, isUtc: true);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ObjectArray1 sse_decode_DartOpaque_array_1(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_DartOpaque(deserializer);
    return ObjectArray1(inner);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinNormal>
      sse_decode_Map_String_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_enum_simple_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinRustAsync>
      sse_decode_Map_String_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_enum_simple_twin_rust_async(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinSync> sse_decode_Map_String_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_enum_simple_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, HashMapValue> sse_decode_Map_String_hash_map_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_hash_map_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinNormal>
      sse_decode_Map_String_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_kitchen_sink_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinRustAsync>
      sse_decode_Map_String_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_kitchen_sink_twin_rust_async(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinSync> sse_decode_Map_String_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_kitchen_sink_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, Uint8List> sse_decode_Map_String_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, MySize> sse_decode_Map_String_my_size(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_my_size(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, String> sse_decode_Map_i_32_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinNormal>
      sse_decode_Map_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_general_enum_twin_normal(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinRustAsync>
      sse_decode_Map_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_general_enum_twin_rust_async(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinSync>
      sse_decode_Map_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_general_enum_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinNormal>
      sse_decode_Map_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_primitive_enum_twin_normal(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinRustAsync>
      sse_decode_Map_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinSync>
      sse_decode_Map_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_basic_primitive_enum_twin_sync(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinNormal> sse_decode_Map_i_32_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinRustAsync>
      sse_decode_Map_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_rust_async(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinSync> sse_decode_Map_i_32_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, bool> sse_decode_Map_i_32_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_bool(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> sse_decode_Map_i_32_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_f_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> sse_decode_Map_i_32_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_f_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_16(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_i_8(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_isize(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint8List> sse_decode_Map_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_16(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_u_8(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_i_32_usize(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, ApplicationMode> sse_decode_Map_u_8_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_8_application_mode(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  BoxDartDebugTwinNormal sse_decode_RustOpaque_BoxdynDartDebugTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxDartDebugTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinRustAsync sse_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxDartDebugTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinSync sse_decode_RustOpaque_BoxdynDartDebugTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxDartDebugTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinNormal sse_decode_RustOpaque_FrbOpaqueReturnTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueReturnTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinRustAsync
      sse_decode_RustOpaque_FrbOpaqueReturnTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueReturnTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinSync sse_decode_RustOpaque_FrbOpaqueReturnTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueReturnTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueSyncReturnTwinNormal
      sse_decode_RustOpaque_FrbOpaqueSyncReturnTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FrbOpaqueSyncReturnTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataAnotherTwinNormal sse_decode_RustOpaque_HideDataAnotherTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataAnotherTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinNormal sse_decode_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinNormalArray2 sse_decode_RustOpaque_HideDataTwinNormal_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_RustOpaque_HideDataTwinNormal(deserializer);
    return HideDataTwinNormalArray2(inner);
  }

  @protected
  HideDataTwinRustAsync sse_decode_RustOpaque_HideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinRustAsyncArray2
      sse_decode_RustOpaque_HideDataTwinRustAsync_array_2(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_RustOpaque_HideDataTwinRustAsync(deserializer);
    return HideDataTwinRustAsyncArray2(inner);
  }

  @protected
  HideDataTwinSync sse_decode_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HideDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinSyncArray2 sse_decode_RustOpaque_HideDataTwinSync_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_RustOpaque_HideDataTwinSync(deserializer);
    return HideDataTwinSyncArray2(inner);
  }

  @protected
  MutexHideDataTwinNormal sse_decode_RustOpaque_MutexHideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexHideDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinRustAsync sse_decode_RustOpaque_MutexHideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexHideDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinSync sse_decode_RustOpaque_MutexHideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexHideDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinNormal sse_decode_RustOpaque_NonCloneDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinRustAsync sse_decode_RustOpaque_NonCloneDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinSync sse_decode_RustOpaque_NonCloneDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinNormal sse_decode_RustOpaque_RwLockHideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockHideDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinRustAsync sse_decode_RustOpaque_RwLockHideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockHideDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinSync sse_decode_RustOpaque_RwLockHideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RwLockHideDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxFnStringString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxFnStringString.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxMyTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueStructTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueStructTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ConstructorOpaqueSyncStructTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConstructorOpaqueSyncStructTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DroppableTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DroppableTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueWithoutOptionTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnumWithGoodAndOpaqueWithoutOptionTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleEnumTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleEnumTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueOneTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueStructWithDartCodeTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueStructWithDartCodeTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OpaqueTwoTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SimpleOpaqueExternalStructWithMethod
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SimpleOpaqueExternalStructWithMethod.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StaticGetterOnlyTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StaticGetterOnlyTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleA.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructInMiscNoTwinExampleB.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithGoodAndOpaqueFieldWithoutOptionTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithImplBlockInMultiFile.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  I32 sse_decode_RustOpaque_i32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return I32.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<String> sse_decode_Set_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<ApplicationMode> sse_decode_Set_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_application_mode(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<int> sse_decode_Set_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return Set.from(inner);
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinNormal>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinRustAsync>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<NonCloneSimpleTwinSync>
      sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Map<int, ApplicationMode>>
      sse_decode_StreamSink_Map_u_8_application_mode_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Set<ApplicationMode>>
      sse_decode_StreamSink_Set_application_mode_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationMode> sse_decode_StreamSink_application_mode_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationModeArray2>
      sse_decode_StreamSink_application_mode_array_2_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationSettings>
      sse_decode_StreamSink_application_settings_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<EventTwinNormal> sse_decode_StreamSink_event_twin_normal_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<EventTwinRustAsync>
      sse_decode_StreamSink_event_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<int> sse_decode_StreamSink_i_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<List<ApplicationMode>>
      sse_decode_StreamSink_list_application_mode_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<List<ApplicationSettings>>
      sse_decode_StreamSink_list_application_settings_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Log2TwinNormal> sse_decode_StreamSink_log_2_twin_normal_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Log2TwinRustAsync>
      sse_decode_StreamSink_log_2_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Log2TwinSync> sse_decode_StreamSink_log_2_twin_sync_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogTwinNormal> sse_decode_StreamSink_log_twin_normal_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogTwinRustAsync>
      sse_decode_StreamSink_log_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MirrorStructTwinNormal>
      sse_decode_StreamSink_mirror_struct_twin_normal_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MirrorStructTwinRustAsync>
      sse_decode_StreamSink_mirror_struct_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MirrorStructTwinSync>
      sse_decode_StreamSink_mirror_struct_twin_sync_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MyStreamEntryTwinNormal>
      sse_decode_StreamSink_my_stream_entry_twin_normal_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<MyStreamEntryTwinRustAsync>
      sse_decode_StreamSink_my_stream_entry_twin_rust_async_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<ApplicationMode?>
      sse_decode_StreamSink_opt_box_autoadd_application_mode_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)>
      sse_decode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<int> sse_decode_StreamSink_u_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<U8Array2> sse_decode_StreamSink_u_8_array_2_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  ATwinNormal sse_decode_a_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ATwinNormal(a: var_a);
  }

  @protected
  ATwinRustAsync sse_decode_a_twin_rust_async(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ATwinRustAsync(a: var_a);
  }

  @protected
  ATwinSync sse_decode_a_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ATwinSync(a: var_a);
  }

  @protected
  AbcTwinNormal sse_decode_abc_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_normal(deserializer);
        return AbcTwinNormal_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_normal(deserializer);
        return AbcTwinNormal_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_normal(deserializer);
        return AbcTwinNormal_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinNormal_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AbcTwinRustAsync sse_decode_abc_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_rust_async(deserializer);
        return AbcTwinRustAsync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_rust_async(deserializer);
        return AbcTwinRustAsync_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_rust_async(deserializer);
        return AbcTwinRustAsync_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinRustAsync_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AbcTwinSync sse_decode_abc_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_sync(deserializer);
        return AbcTwinSync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_sync(deserializer);
        return AbcTwinSync_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_sync(deserializer);
        return AbcTwinSync_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinSync_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AnotherMacroStructTwinNormal sse_decode_another_macro_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_i_32(deserializer);
    var var_nonFinalData = sse_decode_i_32(deserializer);
    return AnotherMacroStructTwinNormal(
        data: var_data, nonFinalData: var_nonFinalData);
  }

  @protected
  AnotherTwinNormal sse_decode_another_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinNormal(a: var_a);
  }

  @protected
  AnotherTwinRustAsync sse_decode_another_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinRustAsync(a: var_a);
  }

  @protected
  AnotherTwinSync sse_decode_another_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinSync(a: var_a);
  }

  @protected
  ApplicationEnv sse_decode_application_env(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_vars = sse_decode_list_application_env_var(deserializer);
    return ApplicationEnv(vars: var_vars);
  }

  @protected
  ApplicationEnvVar sse_decode_application_env_var(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return ApplicationEnvVar(field0: var_field0, field1: var_field1);
  }

  @protected
  ApplicationMessage sse_decode_application_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return ApplicationMessage_DisplayMessage(var_field0);
      case 1:
        var var_x = sse_decode_i_32(deserializer);
        var var_y = sse_decode_i_32(deserializer);
        return ApplicationMessage_RenderPixel(x: var_x, y: var_y);
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApplicationMode sse_decode_application_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ApplicationMode.values[inner];
  }

  @protected
  ApplicationModeArray2 sse_decode_application_mode_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_application_mode(deserializer);
    return ApplicationModeArray2(inner);
  }

  @protected
  ApplicationSettings sse_decode_application_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_mode = sse_decode_application_mode(deserializer);
    var var_env = sse_decode_box_application_env(deserializer);
    var var_envOptional =
        sse_decode_opt_box_autoadd_application_env(deserializer);
    return ApplicationSettings(
        name: var_name,
        version: var_version,
        mode: var_mode,
        env: var_env,
        envOptional: var_envOptional);
  }

  @protected
  AttributeTwinNormal sse_decode_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinNormal(key: var_key, value: var_value);
  }

  @protected
  AttributeTwinRustAsync sse_decode_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  AttributeTwinSync sse_decode_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinSync(key: var_key, value: var_value);
  }

  @protected
  BTwinNormal sse_decode_b_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_b = sse_decode_i_32(deserializer);
    return BTwinNormal(b: var_b);
  }

  @protected
  BTwinRustAsync sse_decode_b_twin_rust_async(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_b = sse_decode_i_32(deserializer);
    return BTwinRustAsync(b: var_b);
  }

  @protected
  BTwinSync sse_decode_b_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_b = sse_decode_i_32(deserializer);
    return BTwinSync(b: var_b);
  }

  @protected
  BasicGeneralEnumTwinNormal sse_decode_basic_general_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinNormal_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinNormal_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync sse_decode_basic_general_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinRustAsync_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinRustAsync_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicGeneralEnumTwinSync sse_decode_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinSync_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinSync_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal sse_decode_basic_primitive_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinNormal.values[inner];
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      sse_decode_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinRustAsync.values[inner];
  }

  @protected
  BasicPrimitiveEnumTwinSync sse_decode_basic_primitive_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinSync.values[inner];
  }

  @protected
  BasicStructTwinNormal sse_decode_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinNormal(apple: var_apple, orange: var_orange);
  }

  @protected
  BasicStructTwinRustAsync sse_decode_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinRustAsync(apple: var_apple, orange: var_orange);
  }

  @protected
  BasicStructTwinSync sse_decode_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinSync(apple: var_apple, orange: var_orange);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal sse_decode_benchmark_binary_tree_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_normal(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_normal(deserializer);
    return BenchmarkBinaryTreeTwinNormal(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(deserializer);
    return BenchmarkBinaryTreeTwinRustAsync(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBinaryTreeTwinSync sse_decode_benchmark_binary_tree_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_sync(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_sync(deserializer);
    return BenchmarkBinaryTreeTwinSync(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBlobTwinNormal sse_decode_benchmark_blob_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinNormal(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BenchmarkBlobTwinRustAsync sse_decode_benchmark_blob_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinRustAsync(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BenchmarkBlobTwinSync sse_decode_benchmark_blob_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinSync(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BigBuffersTwinNormal sse_decode_big_buffers_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinNormal(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BigBuffersTwinRustAsync sse_decode_big_buffers_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinRustAsync(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BigBuffersTwinSync sse_decode_big_buffers_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinSync(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BlobTwinNormal sse_decode_blob_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinNormal(field0: var_field0);
  }

  @protected
  BlobTwinRustAsync sse_decode_blob_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinRustAsync(field0: var_field0);
  }

  @protected
  BlobTwinSync sse_decode_blob_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinSync(field0: var_field0);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ApplicationEnv sse_decode_box_application_env(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_env(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        deserializer));
  }

  @protected
  Duration sse_decode_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Duration(deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Naive(deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  Object sse_decode_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_DartOpaque(deserializer));
  }

  @protected
  HideDataAnotherTwinNormal
      sse_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataAnotherTwinNormal(deserializer));
  }

  @protected
  HideDataTwinNormal sse_decode_box_autoadd_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataTwinNormal(deserializer));
  }

  @protected
  HideDataTwinRustAsync sse_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer));
  }

  @protected
  HideDataTwinSync sse_decode_box_autoadd_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_RustOpaque_HideDataTwinSync(deserializer));
  }

  @protected
  ATwinNormal sse_decode_box_autoadd_a_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_a_twin_normal(deserializer));
  }

  @protected
  ATwinRustAsync sse_decode_box_autoadd_a_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_a_twin_rust_async(deserializer));
  }

  @protected
  ATwinSync sse_decode_box_autoadd_a_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_a_twin_sync(deserializer));
  }

  @protected
  AbcTwinNormal sse_decode_box_autoadd_abc_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_abc_twin_normal(deserializer));
  }

  @protected
  AbcTwinRustAsync sse_decode_box_autoadd_abc_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_abc_twin_rust_async(deserializer));
  }

  @protected
  AbcTwinSync sse_decode_box_autoadd_abc_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_abc_twin_sync(deserializer));
  }

  @protected
  ApplicationEnv sse_decode_box_autoadd_application_env(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_env(deserializer));
  }

  @protected
  ApplicationMode sse_decode_box_autoadd_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_mode(deserializer));
  }

  @protected
  ApplicationSettings sse_decode_box_autoadd_application_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_application_settings(deserializer));
  }

  @protected
  AttributeTwinNormal sse_decode_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attribute_twin_normal(deserializer));
  }

  @protected
  AttributeTwinRustAsync sse_decode_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attribute_twin_rust_async(deserializer));
  }

  @protected
  AttributeTwinSync sse_decode_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_attribute_twin_sync(deserializer));
  }

  @protected
  BTwinNormal sse_decode_box_autoadd_b_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_b_twin_normal(deserializer));
  }

  @protected
  BTwinRustAsync sse_decode_box_autoadd_b_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_b_twin_rust_async(deserializer));
  }

  @protected
  BTwinSync sse_decode_box_autoadd_b_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_b_twin_sync(deserializer));
  }

  @protected
  BasicGeneralEnumTwinNormal
      sse_decode_box_autoadd_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_general_enum_twin_normal(deserializer));
  }

  @protected
  BasicGeneralEnumTwinRustAsync
      sse_decode_box_autoadd_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_general_enum_twin_rust_async(deserializer));
  }

  @protected
  BasicGeneralEnumTwinSync sse_decode_box_autoadd_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_general_enum_twin_sync(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinNormal
      sse_decode_box_autoadd_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_primitive_enum_twin_normal(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      sse_decode_box_autoadd_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_primitive_enum_twin_rust_async(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinSync
      sse_decode_box_autoadd_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_primitive_enum_twin_sync(deserializer));
  }

  @protected
  BasicStructTwinNormal sse_decode_box_autoadd_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_struct_twin_normal(deserializer));
  }

  @protected
  BasicStructTwinRustAsync sse_decode_box_autoadd_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_struct_twin_rust_async(deserializer));
  }

  @protected
  BasicStructTwinSync sse_decode_box_autoadd_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_basic_struct_twin_sync(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      sse_decode_box_autoadd_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_normal(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_box_autoadd_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinSync
      sse_decode_box_autoadd_benchmark_binary_tree_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_sync(deserializer));
  }

  @protected
  BenchmarkBlobTwinNormal sse_decode_box_autoadd_benchmark_blob_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_blob_twin_normal(deserializer));
  }

  @protected
  BenchmarkBlobTwinRustAsync
      sse_decode_box_autoadd_benchmark_blob_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_blob_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBlobTwinSync sse_decode_box_autoadd_benchmark_blob_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_blob_twin_sync(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CTwinNormal sse_decode_box_autoadd_c_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_c_twin_normal(deserializer));
  }

  @protected
  CTwinRustAsync sse_decode_box_autoadd_c_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_c_twin_rust_async(deserializer));
  }

  @protected
  CTwinSync sse_decode_box_autoadd_c_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_c_twin_sync(deserializer));
  }

  @protected
  ConcatenateWithTwinNormal sse_decode_box_autoadd_concatenate_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_concatenate_with_twin_normal(deserializer));
  }

  @protected
  ConcatenateWithTwinRustAsync
      sse_decode_box_autoadd_concatenate_with_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_concatenate_with_twin_rust_async(deserializer));
  }

  @protected
  ConcatenateWithTwinSync sse_decode_box_autoadd_concatenate_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_concatenate_with_twin_sync(deserializer));
  }

  @protected
  CustomNestedError2TwinNormal
      sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_2_twin_normal(deserializer));
  }

  @protected
  CustomNestedError2TwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_2_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedError2TwinSync
      sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_2_twin_sync(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_inner_twin_normal(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_inner_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinSync
      sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_inner_twin_sync(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      sse_decode_box_autoadd_custom_nested_error_outer_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_outer_twin_normal(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_outer_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_outer_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinSync
      sse_decode_box_autoadd_custom_nested_error_outer_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_nested_error_outer_twin_sync(deserializer));
  }

  @protected
  CustomStructErrorTwinNormal
      sse_decode_box_autoadd_custom_struct_error_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_error_twin_normal(deserializer));
  }

  @protected
  CustomStructErrorTwinRustAsync
      sse_decode_box_autoadd_custom_struct_error_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_error_twin_rust_async(deserializer));
  }

  @protected
  CustomStructErrorTwinSync
      sse_decode_box_autoadd_custom_struct_error_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_error_twin_sync(deserializer));
  }

  @protected
  CustomStructTwinNormal sse_decode_box_autoadd_custom_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_twin_normal(deserializer));
  }

  @protected
  CustomStructTwinRustAsync
      sse_decode_box_autoadd_custom_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_twin_rust_async(deserializer));
  }

  @protected
  CustomStructTwinSync sse_decode_box_autoadd_custom_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_custom_struct_twin_sync(deserializer));
  }

  @protected
  CustomizedTwinNormal sse_decode_box_autoadd_customized_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_customized_twin_normal(deserializer));
  }

  @protected
  CustomizedTwinRustAsync sse_decode_box_autoadd_customized_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_customized_twin_rust_async(deserializer));
  }

  @protected
  CustomizedTwinSync sse_decode_box_autoadd_customized_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_customized_twin_sync(deserializer));
  }

  @protected
  DartOpaqueNestedTwinNormal
      sse_decode_box_autoadd_dart_opaque_nested_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_opaque_nested_twin_normal(deserializer));
  }

  @protected
  DartOpaqueNestedTwinRustAsync
      sse_decode_box_autoadd_dart_opaque_nested_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_opaque_nested_twin_rust_async(deserializer));
  }

  @protected
  DartOpaqueNestedTwinSync sse_decode_box_autoadd_dart_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_dart_opaque_nested_twin_sync(deserializer));
  }

  @protected
  ElementTwinNormal sse_decode_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_element_twin_normal(deserializer));
  }

  @protected
  ElementTwinRustAsync sse_decode_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_element_twin_rust_async(deserializer));
  }

  @protected
  ElementTwinSync sse_decode_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_element_twin_sync(deserializer));
  }

  @protected
  EmptyTwinNormal sse_decode_box_autoadd_empty_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_empty_twin_normal(deserializer));
  }

  @protected
  EmptyTwinRustAsync sse_decode_box_autoadd_empty_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_empty_twin_rust_async(deserializer));
  }

  @protected
  EmptyTwinSync sse_decode_box_autoadd_empty_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_empty_twin_sync(deserializer));
  }

  @protected
  EnumDartOpaqueTwinNormal sse_decode_box_autoadd_enum_dart_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_dart_opaque_twin_normal(deserializer));
  }

  @protected
  EnumDartOpaqueTwinRustAsync
      sse_decode_box_autoadd_enum_dart_opaque_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_dart_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumDartOpaqueTwinSync sse_decode_box_autoadd_enum_dart_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_dart_opaque_twin_sync(deserializer));
  }

  @protected
  EnumOpaqueTwinNormal sse_decode_box_autoadd_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_opaque_twin_normal(deserializer));
  }

  @protected
  EnumOpaqueTwinRustAsync sse_decode_box_autoadd_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumOpaqueTwinSync sse_decode_box_autoadd_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_opaque_twin_sync(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      sse_decode_box_autoadd_enum_with_good_and_opaque_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_good_and_opaque_twin_normal(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      sse_decode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_good_and_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync
      sse_decode_box_autoadd_enum_with_good_and_opaque_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_good_and_opaque_twin_sync(deserializer));
  }

  @protected
  EnumWithItemMixedTwinNormal
      sse_decode_box_autoadd_enum_with_item_mixed_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_mixed_twin_normal(deserializer));
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_mixed_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_mixed_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemMixedTwinSync
      sse_decode_box_autoadd_enum_with_item_mixed_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_mixed_twin_sync(deserializer));
  }

  @protected
  EnumWithItemStructTwinNormal
      sse_decode_box_autoadd_enum_with_item_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_struct_twin_normal(deserializer));
  }

  @protected
  EnumWithItemStructTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_struct_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemStructTwinSync
      sse_decode_box_autoadd_enum_with_item_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_struct_twin_sync(deserializer));
  }

  @protected
  EnumWithItemTupleTwinNormal
      sse_decode_box_autoadd_enum_with_item_tuple_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_tuple_twin_normal(deserializer));
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_tuple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_tuple_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemTupleTwinSync
      sse_decode_box_autoadd_enum_with_item_tuple_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_enum_with_item_tuple_twin_sync(deserializer));
  }

  @protected
  EventTwinNormal sse_decode_box_autoadd_event_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_event_twin_normal(deserializer));
  }

  @protected
  EventTwinRustAsync sse_decode_box_autoadd_event_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_event_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_box_autoadd_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_normal(deserializer));
  }

  @protected
  ExoticOptionalsTwinRustAsync
      sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_box_autoadd_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_sync(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_32(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FeatureChronoTwinNormal sse_decode_box_autoadd_feature_chrono_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_chrono_twin_normal(deserializer));
  }

  @protected
  FeatureChronoTwinRustAsync
      sse_decode_box_autoadd_feature_chrono_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_chrono_twin_rust_async(deserializer));
  }

  @protected
  FeatureChronoTwinSync sse_decode_box_autoadd_feature_chrono_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_chrono_twin_sync(deserializer));
  }

  @protected
  FeatureUuidTwinNormal sse_decode_box_autoadd_feature_uuid_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_uuid_twin_normal(deserializer));
  }

  @protected
  FeatureUuidTwinRustAsync sse_decode_box_autoadd_feature_uuid_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_uuid_twin_rust_async(deserializer));
  }

  @protected
  FeatureUuidTwinSync sse_decode_box_autoadd_feature_uuid_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feature_uuid_twin_sync(deserializer));
  }

  @protected
  FeedIdTwinNormal sse_decode_box_autoadd_feed_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_normal(deserializer));
  }

  @protected
  FeedIdTwinRustAsync sse_decode_box_autoadd_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_rust_async(deserializer));
  }

  @protected
  FeedIdTwinSync sse_decode_box_autoadd_feed_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_8(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_isize(deserializer));
  }

  @protected
  KitchenSinkTwinNormal sse_decode_box_autoadd_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_normal(deserializer));
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_box_autoadd_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_rust_async(deserializer));
  }

  @protected
  KitchenSinkTwinSync sse_decode_box_autoadd_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_sync(deserializer));
  }

  @protected
  ListOfNestedRawStringMirrored
      sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_list_of_nested_raw_string_mirrored(deserializer));
  }

  @protected
  MacroStruct sse_decode_box_autoadd_macro_struct(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_macro_struct(deserializer));
  }

  @protected
  MeasureTwinNormal sse_decode_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_measure_twin_normal(deserializer));
  }

  @protected
  MeasureTwinRustAsync sse_decode_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_measure_twin_rust_async(deserializer));
  }

  @protected
  MeasureTwinSync sse_decode_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_measure_twin_sync(deserializer));
  }

  @protected
  MessageIdTwinNormal sse_decode_box_autoadd_message_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_id_twin_normal(deserializer));
  }

  @protected
  MessageIdTwinRustAsync sse_decode_box_autoadd_message_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_id_twin_rust_async(deserializer));
  }

  @protected
  MessageIdTwinSync sse_decode_box_autoadd_message_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_id_twin_sync(deserializer));
  }

  @protected
  MyCallableTwinNormal sse_decode_box_autoadd_my_callable_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_callable_twin_normal(deserializer));
  }

  @protected
  MyCallableTwinRustAsync sse_decode_box_autoadd_my_callable_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_callable_twin_rust_async(deserializer));
  }

  @protected
  MyCallableTwinSync sse_decode_box_autoadd_my_callable_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_callable_twin_sync(deserializer));
  }

  @protected
  MyNestedStructTwinNormal sse_decode_box_autoadd_my_nested_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_nested_struct_twin_normal(deserializer));
  }

  @protected
  MyNestedStructTwinRustAsync
      sse_decode_box_autoadd_my_nested_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_nested_struct_twin_rust_async(deserializer));
  }

  @protected
  MyNestedStructTwinSync sse_decode_box_autoadd_my_nested_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_nested_struct_twin_sync(deserializer));
  }

  @protected
  MySize sse_decode_box_autoadd_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_size(deserializer));
  }

  @protected
  MyStruct sse_decode_box_autoadd_my_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct(deserializer));
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      sse_decode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct_containing_stream_sink_twin_normal(
        deserializer));
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      sse_decode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_struct_containing_stream_sink_twin_rust_async(
        deserializer));
  }

  @protected
  MyTreeNodeTwinNormal sse_decode_box_autoadd_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_tree_node_twin_normal(deserializer));
  }

  @protected
  MyTreeNodeTwinRustAsync sse_decode_box_autoadd_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_tree_node_twin_rust_async(deserializer));
  }

  @protected
  MyTreeNodeTwinSync sse_decode_box_autoadd_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_tree_node_twin_sync(deserializer));
  }

  @protected
  NestedRawStringMirrored sse_decode_box_autoadd_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_nested_raw_string_mirrored(deserializer));
  }

  @protected
  NewTypeIntTwinNormal sse_decode_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_type_int_twin_normal(deserializer));
  }

  @protected
  NewTypeIntTwinRustAsync sse_decode_box_autoadd_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_type_int_twin_rust_async(deserializer));
  }

  @protected
  NewTypeIntTwinSync sse_decode_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_new_type_int_twin_sync(deserializer));
  }

  @protected
  NoteTwinNormal sse_decode_box_autoadd_note_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note_twin_normal(deserializer));
  }

  @protected
  NoteTwinRustAsync sse_decode_box_autoadd_note_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note_twin_rust_async(deserializer));
  }

  @protected
  NoteTwinSync sse_decode_box_autoadd_note_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_note_twin_sync(deserializer));
  }

  @protected
  Numbers sse_decode_box_autoadd_numbers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_numbers(deserializer));
  }

  @protected
  OpaqueNestedTwinNormal sse_decode_box_autoadd_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opaque_nested_twin_normal(deserializer));
  }

  @protected
  OpaqueNestedTwinRustAsync
      sse_decode_box_autoadd_opaque_nested_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opaque_nested_twin_rust_async(deserializer));
  }

  @protected
  OpaqueNestedTwinSync sse_decode_box_autoadd_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opaque_nested_twin_sync(deserializer));
  }

  @protected
  OptVecsTwinNormal sse_decode_box_autoadd_opt_vecs_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opt_vecs_twin_normal(deserializer));
  }

  @protected
  OptVecsTwinRustAsync sse_decode_box_autoadd_opt_vecs_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opt_vecs_twin_rust_async(deserializer));
  }

  @protected
  OptVecsTwinSync sse_decode_box_autoadd_opt_vecs_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_opt_vecs_twin_sync(deserializer));
  }

  @protected
  RawStringMirrored sse_decode_box_autoadd_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_raw_string_mirrored(deserializer));
  }

  @protected
  (String, int) sse_decode_box_autoadd_record_string_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_string_i_32(deserializer));
  }

  @protected
  Sequences sse_decode_box_autoadd_sequences(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sequences(deserializer));
  }

  @protected
  SimpleEnumTwinNormal sse_decode_box_autoadd_simple_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_enum_twin_normal(deserializer));
  }

  @protected
  SimpleEnumTwinRustAsync sse_decode_box_autoadd_simple_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_enum_twin_rust_async(deserializer));
  }

  @protected
  SimpleEnumTwinSync sse_decode_box_autoadd_simple_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_enum_twin_sync(deserializer));
  }

  @protected
  SimpleStructForBorrowTwinNormal
      sse_decode_box_autoadd_simple_struct_for_borrow_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_for_borrow_twin_normal(deserializer));
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      sse_decode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_for_borrow_twin_rust_async(deserializer));
  }

  @protected
  SimpleStructForBorrowTwinSync
      sse_decode_box_autoadd_simple_struct_for_borrow_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_for_borrow_twin_sync(deserializer));
  }

  @protected
  SimpleStructTwinNormal sse_decode_box_autoadd_simple_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_twin_normal(deserializer));
  }

  @protected
  SimpleStructTwinRustAsync
      sse_decode_box_autoadd_simple_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_twin_rust_async(deserializer));
  }

  @protected
  SimpleStructTwinSync sse_decode_box_autoadd_simple_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_struct_twin_sync(deserializer));
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      sse_decode_box_autoadd_simple_translatable_external_struct_with_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_translatable_external_struct_with_method(
        deserializer));
  }

  @protected
  SomeStructTwinNormal sse_decode_box_autoadd_some_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_some_struct_twin_normal(deserializer));
  }

  @protected
  SomeStructTwinRustAsync sse_decode_box_autoadd_some_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_some_struct_twin_rust_async(deserializer));
  }

  @protected
  SomeStructTwinSync sse_decode_box_autoadd_some_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_some_struct_twin_sync(deserializer));
  }

  @protected
  StructInLowerLevel sse_decode_box_autoadd_struct_in_lower_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_in_lower_level(deserializer));
  }

  @protected
  StructWithCommentsTwinNormal
      sse_decode_box_autoadd_struct_with_comments_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_comments_twin_normal(deserializer));
  }

  @protected
  StructWithCommentsTwinRustAsync
      sse_decode_box_autoadd_struct_with_comments_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_comments_twin_rust_async(deserializer));
  }

  @protected
  StructWithCommentsTwinSync
      sse_decode_box_autoadd_struct_with_comments_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_comments_twin_sync(deserializer));
  }

  @protected
  StructWithEnumTwinNormal sse_decode_box_autoadd_struct_with_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_enum_twin_normal(deserializer));
  }

  @protected
  StructWithEnumTwinRustAsync
      sse_decode_box_autoadd_struct_with_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_enum_twin_rust_async(deserializer));
  }

  @protected
  StructWithEnumTwinSync sse_decode_box_autoadd_struct_with_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_enum_twin_sync(deserializer));
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      sse_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_explicit_auto_opaque_field_twin_normal(
        deserializer));
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
        deserializer));
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      sse_decode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_explicit_auto_opaque_field_twin_sync(
        deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_good_and_opaque_field_twin_normal(
        deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_good_and_opaque_field_twin_rust_async(
        deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_good_and_opaque_field_twin_sync(
        deserializer));
  }

  @protected
  StructWithOneFieldTwinNormal
      sse_decode_box_autoadd_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_one_field_twin_normal(deserializer));
  }

  @protected
  StructWithOneFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_one_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithOneFieldTwinSync
      sse_decode_box_autoadd_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_one_field_twin_sync(deserializer));
  }

  @protected
  StructWithTwoFieldTwinNormal
      sse_decode_box_autoadd_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_two_field_twin_normal(deserializer));
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_two_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithTwoFieldTwinSync
      sse_decode_box_autoadd_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_two_field_twin_sync(deserializer));
  }

  @protected
  StructWithZeroFieldTwinNormal
      sse_decode_box_autoadd_struct_with_zero_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_zero_field_twin_normal(deserializer));
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_zero_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_zero_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithZeroFieldTwinSync
      sse_decode_box_autoadd_struct_with_zero_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_struct_with_zero_field_twin_sync(deserializer));
  }

  @protected
  SumWithTwinNormal sse_decode_box_autoadd_sum_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sum_with_twin_normal(deserializer));
  }

  @protected
  SumWithTwinRustAsync sse_decode_box_autoadd_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sum_with_twin_rust_async(deserializer));
  }

  @protected
  SumWithTwinSync sse_decode_box_autoadd_sum_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sum_with_twin_sync(deserializer));
  }

  @protected
  TestIdTwinNormal sse_decode_box_autoadd_test_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_test_id_twin_normal(deserializer));
  }

  @protected
  TestIdTwinRustAsync sse_decode_box_autoadd_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_test_id_twin_rust_async(deserializer));
  }

  @protected
  TestIdTwinSync sse_decode_box_autoadd_test_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_test_id_twin_sync(deserializer));
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      sse_decode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_translatable_struct_with_dart_code_twin_normal(
        deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_one_field_twin_normal(deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_one_field_twin_rust_async(
        deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinSync
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_one_field_twin_sync(deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_two_field_twin_normal(deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_two_field_twin_rust_async(
        deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tuple_struct_with_two_field_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  UserIdTwinNormal sse_decode_box_autoadd_user_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user_id_twin_normal(deserializer));
  }

  @protected
  UserIdTwinRustAsync sse_decode_box_autoadd_user_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user_id_twin_rust_async(deserializer));
  }

  @protected
  UserIdTwinSync sse_decode_box_autoadd_user_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_user_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  WeekdaysTwinNormal sse_decode_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_normal(deserializer));
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_rust_async(deserializer));
  }

  @protected
  WeekdaysTwinSync sse_decode_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_sync(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      sse_decode_box_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_normal(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_box_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinSync sse_decode_box_benchmark_binary_tree_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_benchmark_binary_tree_twin_sync(deserializer));
  }

  @protected
  BlobTwinNormal sse_decode_box_blob_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_blob_twin_normal(deserializer));
  }

  @protected
  BlobTwinRustAsync sse_decode_box_blob_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_blob_twin_rust_async(deserializer));
  }

  @protected
  BlobTwinSync sse_decode_box_blob_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_blob_twin_sync(deserializer));
  }

  @protected
  bool sse_decode_box_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  DistanceTwinNormal sse_decode_box_distance_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_distance_twin_normal(deserializer));
  }

  @protected
  DistanceTwinRustAsync sse_decode_box_distance_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_distance_twin_rust_async(deserializer));
  }

  @protected
  DistanceTwinSync sse_decode_box_distance_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_distance_twin_sync(deserializer));
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_box_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_normal(deserializer));
  }

  @protected
  ExoticOptionalsTwinRustAsync sse_decode_box_exotic_optionals_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_box_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exotic_optionals_twin_sync(deserializer));
  }

  @protected
  double sse_decode_box_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FeedIdTwinNormal sse_decode_box_feed_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_normal(deserializer));
  }

  @protected
  FeedIdTwinRustAsync sse_decode_box_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_rust_async(deserializer));
  }

  @protected
  FeedIdTwinSync sse_decode_box_feed_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_feed_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_box_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  int sse_decode_box_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_8(deserializer));
  }

  @protected
  KitchenSinkTwinNormal sse_decode_box_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_normal(deserializer));
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_box_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_rust_async(deserializer));
  }

  @protected
  KitchenSinkTwinSync sse_decode_box_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_kitchen_sink_twin_sync(deserializer));
  }

  @protected
  MySize sse_decode_box_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_my_size(deserializer));
  }

  @protected
  SpeedTwinNormal sse_decode_box_speed_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_speed_twin_normal(deserializer));
  }

  @protected
  SpeedTwinRustAsync sse_decode_box_speed_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_speed_twin_rust_async(deserializer));
  }

  @protected
  SpeedTwinSync sse_decode_box_speed_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_speed_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  U8Array1600 sse_decode_box_u_8_array_1600(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8_array_1600(deserializer));
  }

  @protected
  U8Array8 sse_decode_box_u_8_array_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8_array_8(deserializer));
  }

  @protected
  WeekdaysTwinNormal sse_decode_box_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_normal(deserializer));
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_box_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_rust_async(deserializer));
  }

  @protected
  WeekdaysTwinSync sse_decode_box_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_weekdays_twin_sync(deserializer));
  }

  @protected
  CTwinNormal sse_decode_c_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_c = sse_decode_bool(deserializer);
    return CTwinNormal(c: var_c);
  }

  @protected
  CTwinRustAsync sse_decode_c_twin_rust_async(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_c = sse_decode_bool(deserializer);
    return CTwinRustAsync(c: var_c);
  }

  @protected
  CTwinSync sse_decode_c_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_c = sse_decode_bool(deserializer);
    return CTwinSync(c: var_c);
  }

  @protected
  ConcatenateWithTwinNormal sse_decode_concatenate_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinNormal(a: var_a);
  }

  @protected
  ConcatenateWithTwinRustAsync sse_decode_concatenate_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinRustAsync(a: var_a);
  }

  @protected
  ConcatenateWithTwinSync sse_decode_concatenate_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinSync(a: var_a);
  }

  @protected
  ConstructorTranslatableStructTwinNormal
      sse_decode_constructor_translatable_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return ConstructorTranslatableStructTwinNormal(one: var_one);
  }

  @protected
  ConstructorTranslatableSyncStructTwinNormal
      sse_decode_constructor_translatable_sync_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return ConstructorTranslatableSyncStructTwinNormal.raw(one: var_one);
  }

  @protected
  ContainsMirroredSubStructTwinNormal
      sse_decode_contains_mirrored_sub_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_normal(deserializer);
    return ContainsMirroredSubStructTwinNormal(
        test: var_test, test2: var_test2);
  }

  @protected
  ContainsMirroredSubStructTwinRustAsync
      sse_decode_contains_mirrored_sub_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_rust_async(deserializer);
    return ContainsMirroredSubStructTwinRustAsync(
        test: var_test, test2: var_test2);
  }

  @protected
  ContainsMirroredSubStructTwinSync
      sse_decode_contains_mirrored_sub_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_sync(deserializer);
    return ContainsMirroredSubStructTwinSync(test: var_test, test2: var_test2);
  }

  @protected
  CustomEnumErrorTwinNormal sse_decode_custom_enum_error_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomEnumErrorTwinRustAsync sse_decode_custom_enum_error_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomEnumErrorTwinSync sse_decode_custom_enum_error_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinNormal sse_decode_custom_error_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error0(e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error1(e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinRustAsync sse_decode_custom_error_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error0(
            e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error1(
            e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinSync sse_decode_custom_error_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error0(e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error1(e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinNormal sse_decode_custom_nested_error_1_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinNormal_CustomNested1(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
                deserializer);
        return CustomNestedError1TwinNormal_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinRustAsync
      sse_decode_custom_nested_error_1_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinRustAsync_CustomNested1(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
                deserializer);
        return CustomNestedError1TwinRustAsync_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinSync sse_decode_custom_nested_error_1_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinSync_CustomNested1(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
            deserializer);
        return CustomNestedError1TwinSync_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinNormal sse_decode_custom_nested_error_2_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinRustAsync
      sse_decode_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinSync sse_decode_custom_nested_error_2_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinSync_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinSync_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      sse_decode_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinNormal_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinNormal_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      sse_decode_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinSync sse_decode_custom_nested_error_inner_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinSync_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinSync_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      sse_decode_custom_nested_error_outer_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinNormal_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
                deserializer);
        return CustomNestedErrorOuterTwinNormal_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      sse_decode_custom_nested_error_outer_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinRustAsync_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
                deserializer);
        return CustomNestedErrorOuterTwinRustAsync_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinSync sse_decode_custom_nested_error_outer_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinSync_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
                deserializer);
        return CustomNestedErrorOuterTwinSync_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomStructErrorAnotherTwinNormal
      sse_decode_custom_struct_error_another_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinNormal(message: var_message);
  }

  @protected
  CustomStructErrorAnotherTwinRustAsync
      sse_decode_custom_struct_error_another_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinRustAsync(message: var_message);
  }

  @protected
  CustomStructErrorAnotherTwinSync
      sse_decode_custom_struct_error_another_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinSync(message: var_message);
  }

  @protected
  CustomStructErrorTwinNormal sse_decode_custom_struct_error_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinNormal(a: var_a);
  }

  @protected
  CustomStructErrorTwinRustAsync sse_decode_custom_struct_error_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinRustAsync(a: var_a);
  }

  @protected
  CustomStructErrorTwinSync sse_decode_custom_struct_error_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinSync(a: var_a);
  }

  @protected
  CustomStructTwinNormal sse_decode_custom_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinNormal(message: var_message);
  }

  @protected
  CustomStructTwinRustAsync sse_decode_custom_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinRustAsync(message: var_message);
  }

  @protected
  CustomStructTwinSync sse_decode_custom_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinSync(message: var_message);
  }

  @protected
  CustomizedTwinNormal sse_decode_customized_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinNormal(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  CustomizedTwinRustAsync sse_decode_customized_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinRustAsync(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  CustomizedTwinSync sse_decode_customized_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinSync(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  DartOpaqueNestedTwinNormal sse_decode_dart_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinNormal(first: var_first, second: var_second);
  }

  @protected
  DartOpaqueNestedTwinRustAsync sse_decode_dart_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinRustAsync(first: var_first, second: var_second);
  }

  @protected
  DartOpaqueNestedTwinSync sse_decode_dart_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinSync(first: var_first, second: var_second);
  }

  @protected
  DemoStructForRustCallDartTwinNormal
      sse_decode_demo_struct_for_rust_call_dart_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    return DemoStructForRustCallDartTwinNormal(name: var_name);
  }

  @protected
  DemoStructForRustCallDartTwinRustAsync
      sse_decode_demo_struct_for_rust_call_dart_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    return DemoStructForRustCallDartTwinRustAsync(name: var_name);
  }

  @protected
  DistanceTwinNormal sse_decode_distance_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinNormal_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinNormal_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DistanceTwinRustAsync sse_decode_distance_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinRustAsync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinRustAsync_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DistanceTwinSync sse_decode_distance_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinSync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinSync_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ElementTwinNormal sse_decode_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_normal(deserializer);
    var var_children = sse_decode_opt_list_element_twin_normal(deserializer);
    return ElementTwinNormal(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  ElementTwinRustAsync sse_decode_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var var_children =
        sse_decode_opt_list_element_twin_rust_async(deserializer);
    return ElementTwinRustAsync(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  ElementTwinSync sse_decode_element_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes = sse_decode_opt_list_attribute_twin_sync(deserializer);
    var var_children = sse_decode_opt_list_element_twin_sync(deserializer);
    return ElementTwinSync(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  EmptyTwinNormal sse_decode_empty_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmptyTwinNormal();
  }

  @protected
  EmptyTwinRustAsync sse_decode_empty_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmptyTwinRustAsync();
  }

  @protected
  EmptyTwinSync sse_decode_empty_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EmptyTwinSync();
  }

  @protected
  EnumDartOpaqueTwinNormal sse_decode_enum_dart_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinNormal_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinNormal_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumDartOpaqueTwinRustAsync sse_decode_enum_dart_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinRustAsync_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinRustAsync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumDartOpaqueTwinSync sse_decode_enum_dart_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinSync_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinSync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinNormal sse_decode_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_RustOpaque_HideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i32(deserializer);
        return EnumOpaqueTwinNormal_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_BoxdynDartDebugTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_RwLock(var_field0);
      case 5:
        return EnumOpaqueTwinNormal_Nothing();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinNormalArray5 sse_decode_enum_opaque_twin_normal_array_5(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_enum_opaque_twin_normal(deserializer);
    return EnumOpaqueTwinNormalArray5(inner);
  }

  @protected
  EnumOpaqueTwinRustAsync sse_decode_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i32(deserializer);
        return EnumOpaqueTwinRustAsync_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_BoxdynDartDebugTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_RwLock(var_field0);
      case 5:
        return EnumOpaqueTwinRustAsync_Nothing();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinRustAsyncArray5 sse_decode_enum_opaque_twin_rust_async_array_5(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_enum_opaque_twin_rust_async(deserializer);
    return EnumOpaqueTwinRustAsyncArray5(inner);
  }

  @protected
  EnumOpaqueTwinSync sse_decode_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_RustOpaque_HideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i32(deserializer);
        return EnumOpaqueTwinSync_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_BoxdynDartDebugTwinSync(deserializer);
        return EnumOpaqueTwinSync_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_RwLock(var_field0);
      case 5:
        return EnumOpaqueTwinSync_Nothing();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinSyncArray5 sse_decode_enum_opaque_twin_sync_array_5(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_enum_opaque_twin_sync(deserializer);
    return EnumOpaqueTwinSyncArray5(inner);
  }

  @protected
  EnumSimpleTwinNormal sse_decode_enum_simple_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinNormal.values[inner];
  }

  @protected
  EnumSimpleTwinRustAsync sse_decode_enum_simple_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinRustAsync.values[inner];
  }

  @protected
  EnumSimpleTwinSync sse_decode_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinSync.values[inner];
  }

  @protected
  EnumWithDiscriminantTwinNormal sse_decode_enum_with_discriminant_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumWithDiscriminantTwinNormal.values[inner];
  }

  @protected
  EnumWithDiscriminantTwinRustAsync
      sse_decode_enum_with_discriminant_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumWithDiscriminantTwinRustAsync.values[inner];
  }

  @protected
  EnumWithDiscriminantTwinSync sse_decode_enum_with_discriminant_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnumWithDiscriminantTwinSync.values[inner];
  }

  @protected
  EnumWithGoodAndOpaqueTwinNormal
      sse_decode_enum_with_good_and_opaque_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return EnumWithGoodAndOpaqueTwinNormal_Good(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
                deserializer);
        return EnumWithGoodAndOpaqueTwinNormal_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinRustAsync
      sse_decode_enum_with_good_and_opaque_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return EnumWithGoodAndOpaqueTwinRustAsync_Good(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
                deserializer);
        return EnumWithGoodAndOpaqueTwinRustAsync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithGoodAndOpaqueTwinSync sse_decode_enum_with_good_and_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return EnumWithGoodAndOpaqueTwinSync_Good(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
                deserializer);
        return EnumWithGoodAndOpaqueTwinSync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinNormal sse_decode_enum_with_item_mixed_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinNormal_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinNormal_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinNormal_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      sse_decode_enum_with_item_mixed_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinRustAsync_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinRustAsync_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinRustAsync_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinSync sse_decode_enum_with_item_mixed_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinSync_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinSync_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinSync_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinNormal sse_decode_enum_with_item_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinNormal_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinNormal_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinRustAsync
      sse_decode_enum_with_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinRustAsync_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinRustAsync_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinSync sse_decode_enum_with_item_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinSync_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinSync_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinNormal sse_decode_enum_with_item_tuple_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinNormal_A(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemTupleTwinNormal_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      sse_decode_enum_with_item_tuple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinRustAsync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemTupleTwinRustAsync_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinSync sse_decode_enum_with_item_tuple_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinSync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemTupleTwinSync_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EventTwinNormal sse_decode_event_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_payload = sse_decode_String(deserializer);
    return EventTwinNormal(address: var_address, payload: var_payload);
  }

  @protected
  EventTwinRustAsync sse_decode_event_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_payload = sse_decode_String(deserializer);
    return EventTwinRustAsync(address: var_address, payload: var_payload);
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_normal(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_normal(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_normal(deserializer);
    return ExoticOptionalsTwinNormal(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  ExoticOptionalsTwinRustAsync sse_decode_exotic_optionals_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
            deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(deserializer);
    return ExoticOptionalsTwinRustAsync(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes = sse_decode_opt_list_attribute_twin_sync(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_sync(deserializer);
    return ExoticOptionalsTwinSync(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  F64Array16 sse_decode_f_64_array_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_f_64_strict(deserializer);
    return F64Array16(inner);
  }

  @protected
  FeatureChronoTwinNormal sse_decode_feature_chrono_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_utc = sse_decode_Chrono_Utc(deserializer);
    var var_local = sse_decode_Chrono_Local(deserializer);
    var var_duration = sse_decode_Chrono_Duration(deserializer);
    var var_naive = sse_decode_Chrono_Naive(deserializer);
    return FeatureChronoTwinNormal(
        utc: var_utc,
        local: var_local,
        duration: var_duration,
        naive: var_naive);
  }

  @protected
  FeatureChronoTwinRustAsync sse_decode_feature_chrono_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_utc = sse_decode_Chrono_Utc(deserializer);
    var var_local = sse_decode_Chrono_Local(deserializer);
    var var_duration = sse_decode_Chrono_Duration(deserializer);
    var var_naive = sse_decode_Chrono_Naive(deserializer);
    return FeatureChronoTwinRustAsync(
        utc: var_utc,
        local: var_local,
        duration: var_duration,
        naive: var_naive);
  }

  @protected
  FeatureChronoTwinSync sse_decode_feature_chrono_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_utc = sse_decode_Chrono_Utc(deserializer);
    var var_local = sse_decode_Chrono_Local(deserializer);
    var var_duration = sse_decode_Chrono_Duration(deserializer);
    var var_naive = sse_decode_Chrono_Naive(deserializer);
    return FeatureChronoTwinSync(
        utc: var_utc,
        local: var_local,
        duration: var_duration,
        naive: var_naive);
  }

  @protected
  FeatureUuidTwinNormal sse_decode_feature_uuid_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_Uuid(deserializer);
    return FeatureUuidTwinNormal(one: var_one);
  }

  @protected
  FeatureUuidTwinRustAsync sse_decode_feature_uuid_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_Uuid(deserializer);
    return FeatureUuidTwinRustAsync(one: var_one);
  }

  @protected
  FeatureUuidTwinSync sse_decode_feature_uuid_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_Uuid(deserializer);
    return FeatureUuidTwinSync(one: var_one);
  }

  @protected
  FeedIdTwinNormal sse_decode_feed_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinNormal(field0: var_field0);
  }

  @protected
  FeedIdTwinRustAsync sse_decode_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinRustAsync(field0: var_field0);
  }

  @protected
  FeedIdTwinSync sse_decode_feed_id_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinSync(field0: var_field0);
  }

  @protected
  HashMapValue sse_decode_hash_map_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_String(deserializer);
    return HashMapValue(inner: var_inner);
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  I32Array2 sse_decode_i_32_array_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return I32Array2(inner);
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  int sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  KitchenSinkTwinNormal sse_decode_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinNormal_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinNormal_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 = sse_decode_box_kitchen_sink_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinNormal_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinNormal_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinRustAsync_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinRustAsync_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 =
            sse_decode_box_kitchen_sink_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinRustAsync_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinRustAsync_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KitchenSinkTwinSync sse_decode_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinSync_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinSync_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 = sse_decode_box_kitchen_sink_twin_sync(deserializer);
        return KitchenSinkTwinSync_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinSync_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinSync_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_sync(deserializer);
        return KitchenSinkTwinSync_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<NonCloneSimpleTwinNormal>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NonCloneSimpleTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<NonCloneSimpleTwinRustAsync>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NonCloneSimpleTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<NonCloneSimpleTwinSync>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NonCloneSimpleTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<Duration> sse_decode_list_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Duration>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Chrono_Duration(deserializer));
    }
    return ans_;
  }

  @protected
  List<DateTime> sse_decode_list_Chrono_Local(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DateTime>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Chrono_Local(deserializer));
    }
    return ans_;
  }

  @protected
  List<DateTime> sse_decode_list_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DateTime>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Chrono_Naive(deserializer));
    }
    return ans_;
  }

  @protected
  List<Object> sse_decode_list_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Object>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_DartOpaque(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinNormal> sse_decode_list_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_HideDataTwinNormal(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinRustAsync> sse_decode_list_RustOpaque_HideDataTwinRustAsync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinSync> sse_decode_list_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_HideDataTwinSync(deserializer));
    }
    return ans_;
  }

  @protected
  List<RustStreamSink<int>> sse_decode_list_StreamSink_i_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RustStreamSink<int>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_StreamSink_i_32_Sse(deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<UuidValue> sse_decode_list_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UuidValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Uuid(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationEnvVar> sse_decode_list_application_env_var(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationEnvVar>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_env_var(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationMode> sse_decode_list_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationMode>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_mode(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationSettings> sse_decode_list_application_settings(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationSettings>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_settings(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinNormal> sse_decode_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinRustAsync> sse_decode_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinSync> sse_decode_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinNormal>
      sse_decode_list_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinRustAsync>
      sse_decode_list_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinSync> sse_decode_list_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinNormal>
      sse_decode_list_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinRustAsync>
      sse_decode_list_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinSync>
      sse_decode_list_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinNormal> sse_decode_list_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinRustAsync> sse_decode_list_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinSync> sse_decode_list_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<bool> sse_decode_list_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <bool>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinNormal> sse_decode_list_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinRustAsync> sse_decode_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinSync> sse_decode_list_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinNormal> sse_decode_list_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinRustAsync> sse_decode_list_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinSync> sse_decode_list_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyEnum> sse_decode_list_my_enum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyEnum>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_enum(deserializer));
    }
    return ans_;
  }

  @protected
  List<MySize> sse_decode_list_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MySize>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_size(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinNormal> sse_decode_list_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinRustAsync> sse_decode_list_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinSync> sse_decode_list_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<NestedRawStringMirrored> sse_decode_list_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NestedRawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_nested_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  ListOfNestedRawStringMirrored sse_decode_list_of_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_raw = sse_decode_list_nested_raw_string_mirrored(deserializer);
    return ListOfNestedRawStringMirrored(raw: var_raw);
  }

  @protected
  List<String?> sse_decode_list_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinNormal?>
      sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinRustAsync?>
      sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_opt_box_autoadd_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinSync?> sse_decode_list_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<int?> sse_decode_list_opt_box_autoadd_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <int?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinNormal?>
      sse_decode_list_opt_box_autoadd_weekdays_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinRustAsync?>
      sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_opt_box_autoadd_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinSync?> sse_decode_list_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<Int32List?> sse_decode_list_opt_list_prim_i_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Int32List?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_list_prim_i_32_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinNormal> sse_decode_list_point_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinRustAsync> sse_decode_list_point_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinSync> sse_decode_list_point_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<double> sse_decode_list_prim_f_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  List<double> sse_decode_list_prim_f_64_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_16_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  Int16List sse_decode_list_prim_i_16_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Int32List sse_decode_list_prim_i_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt8List(len_);
  }

  @protected
  Int8List sse_decode_list_prim_i_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt8List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_16_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  Uint16List sse_decode_list_prim_u_16_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<RawStringEnumMirrored> sse_decode_list_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RawStringEnumMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_raw_string_enum_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  List<RawStringMirrored> sse_decode_list_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinNormal)>
      sse_decode_list_record_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_general_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinRustAsync)>
      sse_decode_list_record_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_general_enum_twin_rust_async(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinSync)>
      sse_decode_list_record_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_general_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinNormal)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_primitive_enum_twin_normal(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinRustAsync)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_primitive_enum_twin_rust_async(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinSync)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_primitive_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinNormal)>
      sse_decode_list_record_i_32_basic_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinRustAsync)>
      sse_decode_list_record_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinSync)>
      sse_decode_list_record_i_32_basic_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, bool)> sse_decode_list_record_i_32_bool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, bool)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, double)> sse_decode_list_record_i_32_f_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_f_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, double)> sse_decode_list_record_i_32_f_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_f_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_16(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_16(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_isize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_isize(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, Uint8List)> sse_decode_list_record_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, String)> sse_decode_list_record_i_32_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_16(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_16(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_64(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_8(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_usize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_usize(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinNormal)>
      sse_decode_list_record_string_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_enum_simple_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinRustAsync)>
      sse_decode_list_record_string_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_enum_simple_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinSync)>
      sse_decode_list_record_string_enum_simple_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_enum_simple_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, HashMapValue)> sse_decode_list_record_string_hash_map_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, HashMapValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_hash_map_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, int)> sse_decode_list_record_string_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinNormal)>
      sse_decode_list_record_string_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_kitchen_sink_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinRustAsync)>
      sse_decode_list_record_string_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_kitchen_sink_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinSync)>
      sse_decode_list_record_string_kitchen_sink_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_kitchen_sink_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, Uint8List)> sse_decode_list_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, MySize)> sse_decode_list_record_string_my_size(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, MySize)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_my_size(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, ApplicationMode)> sse_decode_list_record_u_8_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, ApplicationMode)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_8_application_mode(deserializer));
    }
    return ans_;
  }

  @protected
  List<SimpleStructTwinNormal> sse_decode_list_simple_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SimpleStructTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_simple_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<SimpleStructTwinRustAsync> sse_decode_list_simple_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SimpleStructTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_simple_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<SimpleStructTwinSync> sse_decode_list_simple_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SimpleStructTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_simple_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinNormal> sse_decode_list_sum_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinRustAsync> sse_decode_list_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinSync> sse_decode_list_sum_with_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinNormal> sse_decode_list_test_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinRustAsync> sse_decode_list_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinSync> sse_decode_list_test_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinNormal> sse_decode_list_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinRustAsync> sse_decode_list_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinSync> sse_decode_list_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  Log2TwinNormal sse_decode_log_2_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinNormal(key: var_key, value: var_value);
  }

  @protected
  Log2TwinRustAsync sse_decode_log_2_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  Log2TwinSync sse_decode_log_2_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinSync(key: var_key, value: var_value);
  }

  @protected
  LogTwinNormal sse_decode_log_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_32(deserializer);
    return LogTwinNormal(key: var_key, value: var_value);
  }

  @protected
  LogTwinRustAsync sse_decode_log_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_32(deserializer);
    return LogTwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  MacroStruct sse_decode_macro_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_i_32(deserializer);
    return MacroStruct(data: var_data);
  }

  @protected
  MeasureTwinNormal sse_decode_measure_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_normal(deserializer);
        return MeasureTwinNormal_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_normal(deserializer);
        return MeasureTwinNormal_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MeasureTwinRustAsync sse_decode_measure_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MeasureTwinSync sse_decode_measure_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_sync(deserializer);
        return MeasureTwinSync_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_sync(deserializer);
        return MeasureTwinSync_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MessageIdTwinNormal sse_decode_message_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinNormal(field0: var_field0);
  }

  @protected
  MessageIdTwinRustAsync sse_decode_message_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinRustAsync(field0: var_field0);
  }

  @protected
  MessageIdTwinSync sse_decode_message_id_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinSync(field0: var_field0);
  }

  @protected
  MirrorStructTwinNormal sse_decode_mirror_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinNormal(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MirrorStructTwinRustAsync sse_decode_mirror_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinRustAsync(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MirrorStructTwinSync sse_decode_mirror_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinSync(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MoreThanJustOneRawStringStructTwinNormal
      sse_decode_more_than_just_one_raw_string_struct_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinNormal(
        regular: var_regular,
        type: var_type,
        async: var_async,
        another: var_another);
  }

  @protected
  MoreThanJustOneRawStringStructTwinRustAsync
      sse_decode_more_than_just_one_raw_string_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinRustAsync(
        regular: var_regular,
        type: var_type,
        async: var_async,
        another: var_another);
  }

  @protected
  MoreThanJustOneRawStringStructTwinSync
      sse_decode_more_than_just_one_raw_string_struct_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinSync(
        regular: var_regular,
        type: var_type,
        async: var_async,
        another: var_another);
  }

  @protected
  MyCallableTwinNormal sse_decode_my_callable_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return MyCallableTwinNormal(one: var_one);
  }

  @protected
  MyCallableTwinRustAsync sse_decode_my_callable_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return MyCallableTwinRustAsync(one: var_one);
  }

  @protected
  MyCallableTwinSync sse_decode_my_callable_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return MyCallableTwinSync(one: var_one);
  }

  @protected
  MyEnum sse_decode_my_enum(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MyEnum.values[inner];
  }

  @protected
  MyNestedStructTwinNormal sse_decode_my_nested_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_treeNode = sse_decode_my_tree_node_twin_normal(deserializer);
    var var_weekday = sse_decode_weekdays_twin_normal(deserializer);
    return MyNestedStructTwinNormal(
        treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MyNestedStructTwinRustAsync sse_decode_my_nested_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_treeNode = sse_decode_my_tree_node_twin_rust_async(deserializer);
    var var_weekday = sse_decode_weekdays_twin_rust_async(deserializer);
    return MyNestedStructTwinRustAsync(
        treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MyNestedStructTwinSync sse_decode_my_nested_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_treeNode = sse_decode_my_tree_node_twin_sync(deserializer);
    var var_weekday = sse_decode_weekdays_twin_sync(deserializer);
    return MyNestedStructTwinSync(treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MySize sse_decode_my_size(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_width = sse_decode_i_32(deserializer);
    var var_height = sse_decode_i_32(deserializer);
    return MySize(width: var_width, height: var_height);
  }

  @protected
  MyStreamEntryTwinNormal sse_decode_my_stream_entry_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hello = sse_decode_String(deserializer);
    return MyStreamEntryTwinNormal(hello: var_hello);
  }

  @protected
  MyStreamEntryTwinRustAsync sse_decode_my_stream_entry_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hello = sse_decode_String(deserializer);
    return MyStreamEntryTwinRustAsync(hello: var_hello);
  }

  @protected
  MyStruct sse_decode_my_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_content = sse_decode_bool(deserializer);
    return MyStruct(content: var_content);
  }

  @protected
  MyStructContainingStreamSinkTwinNormal
      sse_decode_my_struct_containing_stream_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_StreamSink_i_32_Sse(deserializer);
    return MyStructContainingStreamSinkTwinNormal(a: var_a, b: var_b);
  }

  @protected
  MyStructContainingStreamSinkTwinRustAsync
      sse_decode_my_struct_containing_stream_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_StreamSink_i_32_Sse(deserializer);
    return MyStructContainingStreamSinkTwinRustAsync(a: var_a, b: var_b);
  }

  @protected
  MyTreeNodeTwinNormal sse_decode_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children = sse_decode_list_my_tree_node_twin_normal(deserializer);
    return MyTreeNodeTwinNormal(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  MyTreeNodeTwinRustAsync sse_decode_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children =
        sse_decode_list_my_tree_node_twin_rust_async(deserializer);
    return MyTreeNodeTwinRustAsync(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  MyTreeNodeTwinSync sse_decode_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children = sse_decode_list_my_tree_node_twin_sync(deserializer);
    return MyTreeNodeTwinSync(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  NestedRawStringMirrored sse_decode_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_raw = sse_decode_raw_string_mirrored(deserializer);
    return NestedRawStringMirrored(raw: var_raw);
  }

  @protected
  NewSimpleStruct sse_decode_new_simple_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field = sse_decode_i_32(deserializer);
    return NewSimpleStruct(field: var_field);
  }

  @protected
  NewTypeIntTwinNormal sse_decode_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinNormal(field0: var_field0);
  }

  @protected
  NewTypeIntTwinRustAsync sse_decode_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinRustAsync(field0: var_field0);
  }

  @protected
  NewTypeIntTwinSync sse_decode_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinSync(field0: var_field0);
  }

  @protected
  NoteTwinNormal sse_decode_note_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_box_weekdays_twin_normal(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinNormal(day: var_day, body: var_body);
  }

  @protected
  NoteTwinRustAsync sse_decode_note_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_box_weekdays_twin_rust_async(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinRustAsync(day: var_day, body: var_body);
  }

  @protected
  NoteTwinSync sse_decode_note_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_box_weekdays_twin_sync(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinSync(day: var_day, body: var_body);
  }

  @protected
  Numbers sse_decode_numbers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
    return Numbers(field0: var_field0);
  }

  @protected
  OldSimpleStruct sse_decode_old_simple_struct(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field = sse_decode_i_32(deserializer);
    return OldSimpleStruct(field: var_field);
  }

  @protected
  OpaqueNestedTwinNormal sse_decode_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_RustOpaque_HideDataTwinNormal(deserializer);
    var var_second = sse_decode_RustOpaque_HideDataTwinNormal(deserializer);
    return OpaqueNestedTwinNormal(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinRustAsync sse_decode_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer);
    var var_second = sse_decode_RustOpaque_HideDataTwinRustAsync(deserializer);
    return OpaqueNestedTwinRustAsync(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinSync sse_decode_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_first = sse_decode_RustOpaque_HideDataTwinSync(deserializer);
    var var_second = sse_decode_RustOpaque_HideDataTwinSync(deserializer);
    return OpaqueNestedTwinSync(first: var_first, second: var_second);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NonCloneSimpleTwinNormal?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NonCloneSimpleTwinRustAsync?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NonCloneSimpleTwinSync?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Duration? sse_decode_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Duration(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Naive(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Object? sse_decode_opt_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_DartOpaque(deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataAnotherTwinNormal?
      sse_decode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinNormal? sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataTwinNormal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinRustAsync?
      sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinSync? sse_decode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_HideDataTwinSync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApplicationEnv? sse_decode_opt_box_autoadd_application_env(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_application_env(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApplicationMode? sse_decode_opt_box_autoadd_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_application_mode(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinNormal? sse_decode_opt_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinRustAsync? sse_decode_opt_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinSync? sse_decode_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinNormal?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinSync?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinSync?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinNormal? sse_decode_opt_box_autoadd_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinSync? sse_decode_opt_box_autoadd_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinNormal? sse_decode_opt_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinRustAsync? sse_decode_opt_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinSync? sse_decode_opt_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinNormal?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinSync?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_isize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinNormal? sse_decode_opt_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinRustAsync? sse_decode_opt_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinSync? sse_decode_opt_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinNormal? sse_decode_opt_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinRustAsync?
      sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinSync? sse_decode_opt_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, int)? sse_decode_opt_box_autoadd_record_string_i_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_string_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinNormal? sse_decode_opt_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinRustAsync? sse_decode_opt_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinSync? sse_decode_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinNormal?
      sse_decode_opt_box_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync?
      sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinSync?
      sse_decode_opt_box_benchmark_binary_tree_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinNormal? sse_decode_opt_box_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      sse_decode_opt_box_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinSync? sse_decode_opt_box_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinNormal>? sse_decode_opt_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinRustAsync>? sse_decode_opt_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinSync>? sse_decode_opt_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinNormal>? sse_decode_opt_list_element_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinRustAsync>? sse_decode_opt_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinSync>? sse_decode_opt_list_element_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinNormal?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinRustAsync?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinSync?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Float32List? sse_decode_opt_list_prim_f_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_f_32_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Float64List? sse_decode_opt_list_prim_f_64_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_f_64_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Int32List? sse_decode_opt_list_prim_i_32_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_i_32_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Int8List? sse_decode_opt_list_prim_i_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_i_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OptVecsTwinNormal sse_decode_opt_vecs_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_normal(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinNormal(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  OptVecsTwinRustAsync sse_decode_opt_vecs_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinRustAsync(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  OptVecsTwinSync sse_decode_opt_vecs_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_sync(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinSync(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  PointTwinNormal sse_decode_point_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinNormal(x: var_x, y: var_y);
  }

  @protected
  PointTwinNormalArray2 sse_decode_point_twin_normal_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_point_twin_normal(deserializer);
    return PointTwinNormalArray2(inner);
  }

  @protected
  PointTwinRustAsync sse_decode_point_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinRustAsync(x: var_x, y: var_y);
  }

  @protected
  PointTwinRustAsyncArray2 sse_decode_point_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_point_twin_rust_async(deserializer);
    return PointTwinRustAsyncArray2(inner);
  }

  @protected
  PointTwinSync sse_decode_point_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinSync(x: var_x, y: var_y);
  }

  @protected
  PointTwinSyncArray2 sse_decode_point_twin_sync_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_point_twin_sync(deserializer);
    return PointTwinSyncArray2(inner);
  }

  @protected
  RawStringEnumMirrored sse_decode_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Raw(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_nested_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Nested(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
                deserializer);
        return RawStringEnumMirrored_ListOfNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RawStringItemStructTwinNormal sse_decode_raw_string_item_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinNormal(type: var_type);
  }

  @protected
  RawStringItemStructTwinRustAsync
      sse_decode_raw_string_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinRustAsync(type: var_type);
  }

  @protected
  RawStringItemStructTwinSync sse_decode_raw_string_item_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinSync(type: var_type);
  }

  @protected
  RawStringMirrored sse_decode_raw_string_mirrored(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_String(deserializer);
    return RawStringMirrored(value: var_value);
  }

  @protected
  (ApplicationSettings, RawStringEnumMirrored)
      sse_decode_record_application_settings_raw_string_enum_mirrored(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_application_settings(deserializer);
    var var_field1 = sse_decode_raw_string_enum_mirrored(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    OpaqueOneTwinNormal,
    OpaqueTwoTwinNormal
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    OpaqueOneTwinRustAsync,
    OpaqueTwoTwinRustAsync
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    OpaqueOneTwinSync,
    OpaqueTwoTwinSync
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinNormal)
      sse_decode_record_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_general_enum_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinRustAsync)
      sse_decode_record_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 =
        sse_decode_basic_general_enum_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinSync)
      sse_decode_record_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_general_enum_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinNormal)
      sse_decode_record_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_primitive_enum_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinRustAsync)
      sse_decode_record_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 =
        sse_decode_basic_primitive_enum_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinSync)
      sse_decode_record_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_primitive_enum_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinNormal) sse_decode_record_i_32_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinRustAsync)
      sse_decode_record_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinSync) sse_decode_record_i_32_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, bool) sse_decode_record_i_32_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, double) sse_decode_record_i_32_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, double) sse_decode_record_i_32_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_16(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_isize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, Uint8List) sse_decode_record_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, String) sse_decode_record_i_32_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_16(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinNormal)
      sse_decode_record_string_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinRustAsync)
      sse_decode_record_string_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinSync) sse_decode_record_string_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, HashMapValue) sse_decode_record_string_hash_map_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_hash_map_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, int) sse_decode_record_string_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinNormal)
      sse_decode_record_string_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinRustAsync)
      sse_decode_record_string_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinSync) sse_decode_record_string_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, Uint8List) sse_decode_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, MySize) sse_decode_record_string_my_size(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_my_size(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, ApplicationMode) sse_decode_record_u_8_application_mode(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8(deserializer);
    var var_field1 = sse_decode_application_mode(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Sequences sse_decode_sequences(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
    return Sequences(field0: var_field0);
  }

  @protected
  SimpleEnumTwinNormal sse_decode_simple_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SimpleEnumTwinNormal_First();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SimpleEnumTwinNormal_Second(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SimpleEnumTwinRustAsync sse_decode_simple_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SimpleEnumTwinRustAsync_First();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SimpleEnumTwinRustAsync_Second(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SimpleEnumTwinSync sse_decode_simple_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SimpleEnumTwinSync_First();
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SimpleEnumTwinSync_Second(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SimplePrimitiveEnumTwinNormal sse_decode_simple_primitive_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SimplePrimitiveEnumTwinNormal.values[inner];
  }

  @protected
  SimplePrimitiveEnumTwinRustAsync
      sse_decode_simple_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SimplePrimitiveEnumTwinRustAsync.values[inner];
  }

  @protected
  SimplePrimitiveEnumTwinSync sse_decode_simple_primitive_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SimplePrimitiveEnumTwinSync.values[inner];
  }

  @protected
  SimpleStructForBorrowTwinNormal
      sse_decode_simple_struct_for_borrow_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructForBorrowTwinNormal(one: var_one);
  }

  @protected
  SimpleStructForBorrowTwinRustAsync
      sse_decode_simple_struct_for_borrow_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructForBorrowTwinRustAsync(one: var_one);
  }

  @protected
  SimpleStructForBorrowTwinSync sse_decode_simple_struct_for_borrow_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructForBorrowTwinSync(one: var_one);
  }

  @protected
  SimpleStructTwinNormal sse_decode_simple_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructTwinNormal(one: var_one);
  }

  @protected
  SimpleStructTwinRustAsync sse_decode_simple_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructTwinRustAsync(one: var_one);
  }

  @protected
  SimpleStructTwinSync sse_decode_simple_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return SimpleStructTwinSync(one: var_one);
  }

  @protected
  SimpleTranslatableExternalStructWithMethod
      sse_decode_simple_translatable_external_struct_with_method(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_String(deserializer);
    return SimpleTranslatableExternalStructWithMethod(a: var_a);
  }

  @protected
  SomeStructTwinNormal sse_decode_some_struct_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinNormal(value: var_value);
  }

  @protected
  SomeStructTwinRustAsync sse_decode_some_struct_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinRustAsync(value: var_value);
  }

  @protected
  SomeStructTwinSync sse_decode_some_struct_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinSync(value: var_value);
  }

  @protected
  SpeedTwinNormal sse_decode_speed_twin_normal(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinNormal_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinNormal_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SpeedTwinRustAsync sse_decode_speed_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinRustAsync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinRustAsync_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SpeedTwinSync sse_decode_speed_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinSync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinSync_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  StaticOnlyTwinNormal sse_decode_static_only_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return StaticOnlyTwinNormal(one: var_one);
  }

  @protected
  StaticOnlyTwinRustAsync sse_decode_static_only_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return StaticOnlyTwinRustAsync(one: var_one);
  }

  @protected
  StaticOnlyTwinSync sse_decode_static_only_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_one = sse_decode_String(deserializer);
    return StaticOnlyTwinSync(one: var_one);
  }

  @protected
  StructInLowerLevel sse_decode_struct_in_lower_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_struct_in_upper_level(deserializer);
    return StructInLowerLevel(inner: var_inner);
  }

  @protected
  StructInUpperLevel sse_decode_struct_in_upper_level(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_upper = sse_decode_usize(deserializer);
    return StructInUpperLevel(upper: var_upper);
  }

  @protected
  StructWithCommentsTwinNormal sse_decode_struct_with_comments_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinNormal(
        fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithCommentsTwinRustAsync
      sse_decode_struct_with_comments_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinRustAsync(
        fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithCommentsTwinSync sse_decode_struct_with_comments_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinSync(fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithEnumTwinNormal sse_decode_struct_with_enum_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_abc1 = sse_decode_abc_twin_normal(deserializer);
    var var_abc2 = sse_decode_abc_twin_normal(deserializer);
    return StructWithEnumTwinNormal(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithEnumTwinRustAsync sse_decode_struct_with_enum_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_abc1 = sse_decode_abc_twin_rust_async(deserializer);
    var var_abc2 = sse_decode_abc_twin_rust_async(deserializer);
    return StructWithEnumTwinRustAsync(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithEnumTwinSync sse_decode_struct_with_enum_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_abc1 = sse_decode_abc_twin_sync(deserializer);
    var var_abc2 = sse_decode_abc_twin_sync(deserializer);
    return StructWithEnumTwinSync(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinNormal
      sse_decode_struct_with_explicit_auto_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_autoOpaque =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            deserializer);
    var var_normal = sse_decode_i_32(deserializer);
    return StructWithExplicitAutoOpaqueFieldTwinNormal(
        autoOpaque: var_autoOpaque, normal: var_normal);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinRustAsync
      sse_decode_struct_with_explicit_auto_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_autoOpaque =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            deserializer);
    var var_normal = sse_decode_i_32(deserializer);
    return StructWithExplicitAutoOpaqueFieldTwinRustAsync(
        autoOpaque: var_autoOpaque, normal: var_normal);
  }

  @protected
  StructWithExplicitAutoOpaqueFieldTwinSync
      sse_decode_struct_with_explicit_auto_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_autoOpaque =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            deserializer);
    var var_normal = sse_decode_i_32(deserializer);
    return StructWithExplicitAutoOpaqueFieldTwinSync(
        autoOpaque: var_autoOpaque, normal: var_normal);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_struct_with_good_and_opaque_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_good = sse_decode_String(deserializer);
    var var_opaque =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            deserializer);
    var var_optionOpaque =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            deserializer);
    return StructWithGoodAndOpaqueFieldTwinNormal(
        good: var_good, opaque: var_opaque, optionOpaque: var_optionOpaque);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_struct_with_good_and_opaque_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_good = sse_decode_String(deserializer);
    var var_opaque =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            deserializer);
    var var_optionOpaque =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            deserializer);
    return StructWithGoodAndOpaqueFieldTwinRustAsync(
        good: var_good, opaque: var_opaque, optionOpaque: var_optionOpaque);
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_struct_with_good_and_opaque_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_good = sse_decode_String(deserializer);
    var var_opaque =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            deserializer);
    var var_optionOpaque =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            deserializer);
    return StructWithGoodAndOpaqueFieldTwinSync(
        good: var_good, opaque: var_opaque, optionOpaque: var_optionOpaque);
  }

  @protected
  StructWithHashMap sse_decode_struct_with_hash_map(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_map = sse_decode_Map_String_hash_map_value(deserializer);
    return StructWithHashMap(map: var_map);
  }

  @protected
  StructWithOneFieldTwinNormal sse_decode_struct_with_one_field_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinNormal(a: var_a);
  }

  @protected
  StructWithOneFieldTwinRustAsync
      sse_decode_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinRustAsync(a: var_a);
  }

  @protected
  StructWithOneFieldTwinSync sse_decode_struct_with_one_field_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinSync(a: var_a);
  }

  @protected
  StructWithTwoFieldTwinNormal sse_decode_struct_with_two_field_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinNormal(a: var_a, b: var_b);
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      sse_decode_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinRustAsync(a: var_a, b: var_b);
  }

  @protected
  StructWithTwoFieldTwinSync sse_decode_struct_with_two_field_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinSync(a: var_a, b: var_b);
  }

  @protected
  StructWithZeroFieldTwinNormal sse_decode_struct_with_zero_field_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithZeroFieldTwinNormal();
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      sse_decode_struct_with_zero_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithZeroFieldTwinRustAsync();
  }

  @protected
  StructWithZeroFieldTwinSync sse_decode_struct_with_zero_field_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StructWithZeroFieldTwinSync();
  }

  @protected
  SumWithTwinNormal sse_decode_sum_with_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinNormal(x: var_x);
  }

  @protected
  SumWithTwinNormalArray3 sse_decode_sum_with_twin_normal_array_3(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_sum_with_twin_normal(deserializer);
    return SumWithTwinNormalArray3(inner);
  }

  @protected
  SumWithTwinRustAsync sse_decode_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinRustAsync(x: var_x);
  }

  @protected
  SumWithTwinRustAsyncArray3 sse_decode_sum_with_twin_rust_async_array_3(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_sum_with_twin_rust_async(deserializer);
    return SumWithTwinRustAsyncArray3(inner);
  }

  @protected
  SumWithTwinSync sse_decode_sum_with_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinSync(x: var_x);
  }

  @protected
  SumWithTwinSyncArray3 sse_decode_sum_with_twin_sync_array_3(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_sum_with_twin_sync(deserializer);
    return SumWithTwinSyncArray3(inner);
  }

  @protected
  TestChronoTwinNormal sse_decode_test_chrono_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_dt2 = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_du = sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinNormal(dt: var_dt, dt2: var_dt2, du: var_du);
  }

  @protected
  TestChronoTwinRustAsync sse_decode_test_chrono_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_dt2 = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_du = sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinRustAsync(dt: var_dt, dt2: var_dt2, du: var_du);
  }

  @protected
  TestChronoTwinSync sse_decode_test_chrono_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_dt2 = sse_decode_opt_box_autoadd_Chrono_Naive(deserializer);
    var var_du = sse_decode_opt_box_autoadd_Chrono_Duration(deserializer);
    return TestChronoTwinSync(dt: var_dt, dt2: var_dt2, du: var_du);
  }

  @protected
  TestIdTwinNormal sse_decode_test_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinNormal(field0: var_field0);
  }

  @protected
  TestIdTwinNormalArray2 sse_decode_test_id_twin_normal_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_normal(deserializer);
    return TestIdTwinNormalArray2(inner);
  }

  @protected
  TestIdTwinNormalArray4 sse_decode_test_id_twin_normal_array_4(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_normal(deserializer);
    return TestIdTwinNormalArray4(inner);
  }

  @protected
  TestIdTwinRustAsync sse_decode_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinRustAsync(field0: var_field0);
  }

  @protected
  TestIdTwinRustAsyncArray2 sse_decode_test_id_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_rust_async(deserializer);
    return TestIdTwinRustAsyncArray2(inner);
  }

  @protected
  TestIdTwinRustAsyncArray4 sse_decode_test_id_twin_rust_async_array_4(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_rust_async(deserializer);
    return TestIdTwinRustAsyncArray4(inner);
  }

  @protected
  TestIdTwinSync sse_decode_test_id_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinSync(field0: var_field0);
  }

  @protected
  TestIdTwinSyncArray2 sse_decode_test_id_twin_sync_array_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_sync(deserializer);
    return TestIdTwinSyncArray2(inner);
  }

  @protected
  TestIdTwinSyncArray4 sse_decode_test_id_twin_sync_array_4(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_test_id_twin_sync(deserializer);
    return TestIdTwinSyncArray4(inner);
  }

  @protected
  TestModelTwinNormal sse_decode_test_model_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinNormal(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TestModelTwinRustAsync sse_decode_test_model_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinRustAsync(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TestModelTwinSync sse_decode_test_model_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinSync(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TranslatableStructWithDartCodeTwinNormal
      sse_decode_translatable_struct_with_dart_code_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_a = sse_decode_i_32(deserializer);
    return TranslatableStructWithDartCodeTwinNormal(a: var_a);
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      sse_decode_tuple_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinNormal(field0: var_field0);
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      sse_decode_tuple_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinRustAsync(field0: var_field0);
  }

  @protected
  TupleStructWithOneFieldTwinSync
      sse_decode_tuple_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinSync(field0: var_field0);
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      sse_decode_tuple_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinNormal(
        field0: var_field0, field1: var_field1);
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      sse_decode_tuple_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinRustAsync(
        field0: var_field0, field1: var_field1);
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      sse_decode_tuple_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinSync(
        field0: var_field0, field1: var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array1600 sse_decode_u_8_array_1600(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array1600(inner);
  }

  @protected
  U8Array2 sse_decode_u_8_array_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array2(inner);
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  U8Array5 sse_decode_u_8_array_5(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array5(inner);
  }

  @protected
  U8Array8 sse_decode_u_8_array_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array8(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UserIdTwinNormal sse_decode_user_id_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinNormal(value: var_value);
  }

  @protected
  UserIdTwinRustAsync sse_decode_user_id_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinRustAsync(value: var_value);
  }

  @protected
  UserIdTwinSync sse_decode_user_id_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinSync(value: var_value);
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  VecOfPrimitivePackTwinNormal sse_decode_vec_of_primitive_pack_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinNormal(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  VecOfPrimitivePackTwinRustAsync
      sse_decode_vec_of_primitive_pack_twin_rust_async(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinRustAsync(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  VecOfPrimitivePackTwinSync sse_decode_vec_of_primitive_pack_twin_sync(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinSync(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  WeekdaysTwinNormal sse_decode_weekdays_twin_normal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinNormal.values[inner];
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinRustAsync.values[inner];
  }

  @protected
  WeekdaysTwinSync sse_decode_weekdays_twin_sync(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinSync.values[inner];
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          BoxFnStringString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          BoxMyTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          BoxMyTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          BoxMyTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          ConstructorOpaqueStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          ConstructorOpaqueSyncStructTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          EnumWithGoodAndOpaqueWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          EnumWithGoodAndOpaqueWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          NonCloneSimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          NonCloneSimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          NonCloneSimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          OpaqueOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          OpaqueOneTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          OpaqueOneTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          OpaqueStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          OpaqueTwoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          OpaqueTwoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          OpaqueTwoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SimpleOpaqueExternalStructWithMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          StaticGetterOnlyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          StaticGetterOnlyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          StaticGetterOnlyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          ConstructorOpaqueStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          ConstructorOpaqueSyncStructTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          NonCloneSimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          NonCloneSimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          NonCloneSimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          OpaqueStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SimpleOpaqueExternalStructWithMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Backtrace(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.inMicroseconds, serializer);
  }

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.microsecondsSinceEpoch, serializer);
  }

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.microsecondsSinceEpoch, serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.microsecondsSinceEpoch, serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_DartOpaque_Output_unit(
      FutureOr<void> Function(Object) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_DartOpaque_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_unit(
      FutureOr<void> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_unit(self), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
          FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
          FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_DartOpaque(
      FutureOr<Object> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_DartOpaque(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_String(
      FutureOr<String> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_String(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_unit(
      FutureOr<void> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(encode_DartFn_Inputs__Output_unit(self), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
          FutureOr<DemoStructForRustCallDartTwinNormal> Function(
                  DemoStructForRustCallDartTwinNormal)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
          FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque_array_1(
      ObjectArray1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_DartOpaque(self.inner, serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_normal(
      Map<String, EnumSimpleTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_enum_simple_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_rust_async(
      Map<String, EnumSimpleTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_enum_simple_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_sync(
      Map<String, EnumSimpleTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_enum_simple_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_hash_map_value(
      Map<String, HashMapValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_hash_map_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_normal(
      Map<String, KitchenSinkTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_kitchen_sink_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_rust_async(
      Map<String, KitchenSinkTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_kitchen_sink_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_sync(
      Map<String, KitchenSinkTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_kitchen_sink_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_list_prim_u_8_strict(
      Map<String, Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_my_size(
      Map<String, MySize> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_my_size(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_String(
      Map<int, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_normal(
      Map<int, BasicGeneralEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_general_enum_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_rust_async(
      Map<int, BasicGeneralEnumTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_general_enum_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_sync(
      Map<int, BasicGeneralEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_general_enum_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_normal(
      Map<int, BasicPrimitiveEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_primitive_enum_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_rust_async(
      Map<int, BasicPrimitiveEnumTwinRustAsync> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_primitive_enum_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_sync(
      Map<int, BasicPrimitiveEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_primitive_enum_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_normal(
      Map<int, BasicStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_struct_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_rust_async(
      Map<int, BasicStructTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_struct_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_sync(
      Map<int, BasicStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_basic_struct_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_bool(Map<int, bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_bool(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_f_32(
      Map<int, double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_f_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_f_64(
      Map<int, double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_f_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_16(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_16(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_32(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_64(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_8(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_i_8(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_isize(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_isize(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_list_prim_u_8_strict(
      Map<int, Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_16(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_16(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_32(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_64(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_8(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_u_8(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_usize(Map<int, int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_i_32_usize(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_u_8_application_mode(
      Map<int, ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_8_application_mode(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_BoxdynDartDebugTwinNormal(
      BoxDartDebugTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_BoxdynDartDebugTwinRustAsync(
      BoxDartDebugTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_BoxdynDartDebugTwinSync(
      BoxDartDebugTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueReturnTwinNormal(
      FrbOpaqueReturnTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueReturnTwinRustAsync(
      FrbOpaqueReturnTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueReturnTwinSync(
      FrbOpaqueReturnTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_FrbOpaqueSyncReturnTwinNormal(
      FrbOpaqueSyncReturnTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataAnotherTwinNormal(
      HideDataAnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinNormal(
      HideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinNormal_array_2(
      HideDataTwinNormalArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_RustOpaque_HideDataTwinNormal(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinRustAsync(
      HideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinRustAsync_array_2(
      HideDataTwinRustAsyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_RustOpaque_HideDataTwinRustAsync(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinSync(
      HideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_HideDataTwinSync_array_2(
      HideDataTwinSyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_RustOpaque_HideDataTwinSync(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinNormal(
      MutexHideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinRustAsync(
      MutexHideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinSync(
      MutexHideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_NonCloneDataTwinNormal(
      NonCloneDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_NonCloneDataTwinRustAsync(
      NonCloneDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_NonCloneDataTwinSync(
      NonCloneDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinNormal(
      RwLockHideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinRustAsync(
      RwLockHideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinSync(
      RwLockHideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynFnStringStringSendSync(
          BoxFnStringString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinNormalSendSync(
          BoxMyTraitTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinRustAsyncSendSync(
          BoxMyTraitTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynMyTraitTwinSyncSendSync(
          BoxMyTraitTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueStructTwinNormal(
          ConstructorOpaqueStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConstructorOpaqueSyncStructTwinNormal(
          ConstructorOpaqueSyncStructTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinNormal(
          DroppableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinRustAsync(
          DroppableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDroppableTwinSync(
          DroppableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinNormal(
          EnumWithGoodAndOpaqueWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinRustAsync(
          EnumWithGoodAndOpaqueWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnumWithGoodAndOpaqueWithoutOptionTwinSync(
          EnumWithGoodAndOpaqueWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinNormal(
          NonCloneSimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinRustAsync(
          NonCloneSimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleEnumTwinSync(
          NonCloneSimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
          OpaqueOneTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
          OpaqueOneTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
          OpaqueOneTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueStructWithDartCodeTwinNormal(
          OpaqueStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
          OpaqueTwoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
          OpaqueTwoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
          OpaqueTwoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSimpleOpaqueExternalStructWithMethod(
          SimpleOpaqueExternalStructWithMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinNormal(
          StaticGetterOnlyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinRustAsync(
          StaticGetterOnlyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStaticGetterOnlyTwinSync(
          StaticGetterOnlyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinNormal(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithGoodAndOpaqueFieldWithoutOptionTwinSync(
          StructWithGoodAndOpaqueFieldWithoutOptionTwinSync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_i32(I32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_Set_String(Set<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_application_mode(
      Set<ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_application_mode(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_i_32(Set<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(
        Int32List.fromList(self.toList()), serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal_Sse(
          RustStreamSink<NonCloneSimpleTwinNormal> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData:
                    sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync_Sse(
          RustStreamSink<NonCloneSimpleTwinRustAsync> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData:
                    sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync_Sse(
          RustStreamSink<NonCloneSimpleTwinSync> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData:
                    sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_Map_u_8_application_mode_Sse(
      RustStreamSink<Map<int, ApplicationMode>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_Map_u_8_application_mode,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_Set_application_mode_Sse(
      RustStreamSink<Set<ApplicationMode>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_Set_application_mode,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_String, decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_application_mode_Sse(
      RustStreamSink<ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_application_mode,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_application_mode_array_2_Sse(
      RustStreamSink<ApplicationModeArray2> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_application_mode_array_2,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_application_settings_Sse(
      RustStreamSink<ApplicationSettings> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_application_settings,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_event_twin_normal_Sse(
      RustStreamSink<EventTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_event_twin_normal,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_event_twin_rust_async_Sse(
      RustStreamSink<EventTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_event_twin_rust_async,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_i_32_Sse(
      RustStreamSink<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_i_32, decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_application_mode_Sse(
      RustStreamSink<List<ApplicationMode>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_list_application_mode,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_application_settings_Sse(
      RustStreamSink<List<ApplicationSettings>> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_list_application_settings,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_2_twin_normal_Sse(
      RustStreamSink<Log2TwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_2_twin_normal,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_2_twin_rust_async_Sse(
      RustStreamSink<Log2TwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_2_twin_rust_async,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_2_twin_sync_Sse(
      RustStreamSink<Log2TwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_2_twin_sync,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_twin_normal_Sse(
      RustStreamSink<LogTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_twin_normal,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_log_twin_rust_async_Sse(
      RustStreamSink<LogTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_log_twin_rust_async,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mirror_struct_twin_normal_Sse(
      RustStreamSink<MirrorStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_mirror_struct_twin_normal,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mirror_struct_twin_rust_async_Sse(
      RustStreamSink<MirrorStructTwinRustAsync> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_mirror_struct_twin_rust_async,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_mirror_struct_twin_sync_Sse(
      RustStreamSink<MirrorStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_mirror_struct_twin_sync,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_my_stream_entry_twin_normal_Sse(
      RustStreamSink<MyStreamEntryTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_my_stream_entry_twin_normal,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_my_stream_entry_twin_rust_async_Sse(
      RustStreamSink<MyStreamEntryTwinRustAsync> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_my_stream_entry_twin_rust_async,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_opt_box_autoadd_application_mode_Sse(
      RustStreamSink<ApplicationMode?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_opt_box_autoadd_application_mode,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void
      sse_encode_StreamSink_record_application_settings_raw_string_enum_mirrored_Sse(
          RustStreamSink<(ApplicationSettings, RawStringEnumMirrored)> self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData:
                    sse_decode_record_application_settings_raw_string_enum_mirrored,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_u_32_Sse(
      RustStreamSink<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_u_32, decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_u_8_array_2_Sse(
      RustStreamSink<U8Array2> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
                decodeSuccessData: sse_decode_u_8_array_2,
                decodeErrorData: null)),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_a_twin_normal(ATwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_a_twin_sync(ATwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AbcTwinNormal_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_normal(field0, serializer);
      case AbcTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_normal(field0, serializer);
      case AbcTwinNormal_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_normal(field0, serializer);
      case AbcTwinNormal_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AbcTwinRustAsync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_abc_twin_sync(AbcTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AbcTwinSync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_sync(field0, serializer);
      case AbcTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_sync(field0, serializer);
      case AbcTwinSync_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_sync(field0, serializer);
      case AbcTwinSync_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_another_macro_struct_twin_normal(
      AnotherMacroStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.data, serializer);
    sse_encode_i_32(self.nonFinalData, serializer);
  }

  @protected
  void sse_encode_another_twin_normal(
      AnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_another_twin_rust_async(
      AnotherTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_another_twin_sync(
      AnotherTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_application_env_var(self.vars, serializer);
  }

  @protected
  void sse_encode_application_env_var(
      ApplicationEnvVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
    sse_encode_bool(self.field1, serializer);
  }

  @protected
  void sse_encode_application_message(
      ApplicationMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ApplicationMessage_DisplayMessage(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case ApplicationMessage_RenderPixel(x: final x, y: final y):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
      case ApplicationMessage_Exit():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_application_mode(
      ApplicationMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_application_mode_array_2(
      ApplicationModeArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_application_mode(self.inner, serializer);
  }

  @protected
  void sse_encode_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_application_mode(self.mode, serializer);
    sse_encode_box_application_env(self.env, serializer);
    sse_encode_opt_box_autoadd_application_env(self.envOptional, serializer);
  }

  @protected
  void sse_encode_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_b_twin_normal(BTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_b_twin_sync(BTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BasicGeneralEnumTwinNormal_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinNormal_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BasicGeneralEnumTwinRustAsync_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinRustAsync_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BasicGeneralEnumTwinSync_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinSync_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_normal(
      BasicStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_sync(
      BasicStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_normal(self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_normal(
        self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
        self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
        self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_sync(self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_sync(self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_normal(
      BenchmarkBlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_rust_async(
      BenchmarkBlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_sync(
      BenchmarkBlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_normal(
      BigBuffersTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_rust_async(
      BigBuffersTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_sync(
      BigBuffersTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_blob_twin_sync(BlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_env(self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Duration(
      Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Duration(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Naive(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Naive(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
      DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_DartOpaque(
      Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
      HideDataAnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataAnotherTwinNormal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataTwinNormal(
      HideDataTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinNormal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      HideDataTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinRustAsync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_HideDataTwinSync(
      HideDataTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinSync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_normal(
      ATwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_a_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_a_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_sync(
      ATwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_a_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_sync(
      AbcTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_env(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_mode(
      ApplicationMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_mode(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attribute_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attribute_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_attribute_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_normal(
      BTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_b_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_b_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_sync(
      BTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_b_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_general_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_general_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_general_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_primitive_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_primitive_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_primitive_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_normal(
      BasicStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_sync(
      BasicStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_basic_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_normal(
      BenchmarkBlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_blob_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_rust_async(
      BenchmarkBlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_blob_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_sync(
      BenchmarkBlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_blob_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_normal(
      CTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_c_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_c_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_sync(
      CTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_c_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_concatenate_with_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_concatenate_with_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_concatenate_with_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_normal(
      CustomNestedError2TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_2_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_rust_async(
      CustomNestedError2TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_2_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_sync(
      CustomNestedError2TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_2_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_inner_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_inner_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_inner_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_outer_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_outer_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_nested_error_outer_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_error_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_error_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_error_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_custom_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_customized_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_customized_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_customized_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_opaque_nested_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_opaque_nested_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_dart_opaque_nested_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_normal(
      ElementTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_element_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_rust_async(
      ElementTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_element_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_sync(
      ElementTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_element_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_empty_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_empty_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_empty_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_dart_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_dart_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_dart_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_good_and_opaque_twin_normal(
      EnumWithGoodAndOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_good_and_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_good_and_opaque_twin_rust_async(
      EnumWithGoodAndOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_good_and_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_good_and_opaque_twin_sync(
      EnumWithGoodAndOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_good_and_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_mixed_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_mixed_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_mixed_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_tuple_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_tuple_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_enum_with_item_tuple_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_event_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_event_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_chrono_twin_normal(
      FeatureChronoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_chrono_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_chrono_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_chrono_twin_sync(
      FeatureChronoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_chrono_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_uuid_twin_normal(
      FeatureUuidTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_uuid_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_uuid_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feature_uuid_twin_sync(
      FeatureUuidTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feature_uuid_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_isize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_list_of_nested_raw_string_mirrored(
      ListOfNestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_of_nested_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_macro_struct(
      MacroStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_macro_struct(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_measure_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_measure_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_measure_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_callable_twin_normal(
      MyCallableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_callable_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_callable_twin_rust_async(
      MyCallableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_callable_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_callable_twin_sync(
      MyCallableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_callable_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_nested_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_nested_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_nested_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_size(MySize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_size(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct(
      MyStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_normal(
      MyStructContainingStreamSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct_containing_stream_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct_containing_stream_sink_twin_rust_async(
      MyStructContainingStreamSinkTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_struct_containing_stream_sink_twin_rust_async(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_nested_raw_string_mirrored(
      NestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_nested_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_type_int_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_type_int_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_new_type_int_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_sync(
      NoteTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_note_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_numbers(Numbers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_numbers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opaque_nested_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opaque_nested_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opaque_nested_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_vecs_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_vecs_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_vecs_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_raw_string_mirrored(
      RawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_string_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequences(
      Sequences self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sequences(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_enum_twin_normal(
      SimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_enum_twin_rust_async(
      SimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_enum_twin_sync(
      SimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_for_borrow_twin_normal(
      SimpleStructForBorrowTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_for_borrow_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_for_borrow_twin_rust_async(
      SimpleStructForBorrowTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_for_borrow_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_for_borrow_twin_sync(
      SimpleStructForBorrowTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_for_borrow_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_twin_normal(
      SimpleStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_twin_rust_async(
      SimpleStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_struct_twin_sync(
      SimpleStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_simple_translatable_external_struct_with_method(
      SimpleTranslatableExternalStructWithMethod self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_translatable_external_struct_with_method(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_some_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_some_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_some_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_in_lower_level(
      StructInLowerLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_in_lower_level(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_comments_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_comments_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_comments_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_enum_twin_sync(self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_normal(
          StructWithExplicitAutoOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_explicit_auto_opaque_field_twin_normal(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_rust_async(
          StructWithExplicitAutoOpaqueFieldTwinRustAsync self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_explicit_auto_opaque_field_twin_rust_async(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_explicit_auto_opaque_field_twin_sync(
      StructWithExplicitAutoOpaqueFieldTwinSync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_explicit_auto_opaque_field_twin_sync(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_normal(
      StructWithGoodAndOpaqueFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_good_and_opaque_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_rust_async(
      StructWithGoodAndOpaqueFieldTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_good_and_opaque_field_twin_rust_async(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_good_and_opaque_field_twin_sync(
      StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_good_and_opaque_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_one_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_one_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_one_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_two_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_two_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_two_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_zero_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_zero_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_with_zero_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sum_with_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sum_with_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sum_with_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_test_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_test_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_test_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_translatable_struct_with_dart_code_twin_normal(
      TranslatableStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_translatable_struct_with_dart_code_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_one_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_one_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_one_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_two_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_two_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tuple_struct_with_two_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_benchmark_binary_tree_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_blob_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_blob_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_sync(
      BlobTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_blob_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_distance_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_distance_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_distance_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_feed_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_8(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_my_size(MySize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_size(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_speed_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_speed_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_speed_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_u_8_array_1600(
      U8Array1600 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_1600(self, serializer);
  }

  @protected
  void sse_encode_box_u_8_array_8(U8Array8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_weekdays_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_c_twin_normal(CTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_c_twin_sync(CTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_constructor_translatable_struct_twin_normal(
      ConstructorTranslatableStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_constructor_translatable_sync_struct_twin_normal(
      ConstructorTranslatableSyncStructTwinNormal self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_normal(
      ContainsMirroredSubStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_normal(self.test2, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_rust_async(
      ContainsMirroredSubStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_rust_async(self.test2, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_sync(
      ContainsMirroredSubStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_sync(self.test2, serializer);
  }

  @protected
  void sse_encode_custom_enum_error_twin_normal(
      CustomEnumErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomEnumErrorTwinNormal_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinNormal_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_enum_error_twin_rust_async(
      CustomEnumErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomEnumErrorTwinRustAsync_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinRustAsync_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_enum_error_twin_sync(
      CustomEnumErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomEnumErrorTwinSync_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinSync_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_normal(
      CustomErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomErrorTwinNormal_Error0(e: final e, backtrace: final backtrace):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinNormal_Error1(e: final e, backtrace: final backtrace):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_rust_async(
      CustomErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomErrorTwinRustAsync_Error0(
          e: final e,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinRustAsync_Error1(
          e: final e,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_sync(
      CustomErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomErrorTwinSync_Error0(e: final e, backtrace: final backtrace):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinSync_Error1(e: final e, backtrace: final backtrace):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_normal(
      CustomNestedError1TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError1TwinNormal_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinNormal_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_normal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_rust_async(
      CustomNestedError1TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError1TwinRustAsync_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinRustAsync_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_rust_async(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_sync(
      CustomNestedError1TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError1TwinSync_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinSync_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_sync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_normal(
      CustomNestedError2TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError2TwinNormal_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinNormal_CustomNested2Number(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_rust_async(
      CustomNestedError2TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError2TwinRustAsync_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinRustAsync_CustomNested2Number(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_sync(
      CustomNestedError2TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedError2TwinSync_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinSync_CustomNested2Number(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorInnerTwinNormal_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinNormal_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorInnerTwinRustAsync_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinRustAsync_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorInnerTwinSync_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinSync_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorOuterTwinNormal_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinNormal_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorOuterTwinRustAsync_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinRustAsync_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case CustomNestedErrorOuterTwinSync_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinSync_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_normal(
      CustomStructErrorAnotherTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_rust_async(
      CustomStructErrorAnotherTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_sync(
      CustomStructErrorAnotherTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_demo_struct_for_rust_call_dart_twin_normal(
      DemoStructForRustCallDartTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_demo_struct_for_rust_call_dart_twin_rust_async(
      DemoStructForRustCallDartTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DistanceTwinNormal_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinNormal_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DistanceTwinRustAsync_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinRustAsync_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DistanceTwinSync_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinSync_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_element_twin_normal(
      ElementTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_normal(self.attributes, serializer);
    sse_encode_opt_list_element_twin_normal(self.children, serializer);
  }

  @protected
  void sse_encode_element_twin_rust_async(
      ElementTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_rust_async(self.attributes, serializer);
    sse_encode_opt_list_element_twin_rust_async(self.children, serializer);
  }

  @protected
  void sse_encode_element_twin_sync(
      ElementTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_sync(self.attributes, serializer);
    sse_encode_opt_list_element_twin_sync(self.children, serializer);
  }

  @protected
  void sse_encode_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumDartOpaqueTwinNormal_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinNormal_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumDartOpaqueTwinRustAsync_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinRustAsync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumDartOpaqueTwinSync_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinSync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumOpaqueTwinNormal_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_HideDataTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i32(field0, serializer);
      case EnumOpaqueTwinNormal_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_BoxdynDartDebugTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Nothing():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_normal_array_5(
      EnumOpaqueTwinNormalArray5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_enum_opaque_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumOpaqueTwinRustAsync_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_HideDataTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i32(field0, serializer);
      case EnumOpaqueTwinRustAsync_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_BoxdynDartDebugTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_Nothing():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async_array_5(
      EnumOpaqueTwinRustAsyncArray5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_enum_opaque_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumOpaqueTwinSync_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_HideDataTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i32(field0, serializer);
      case EnumOpaqueTwinSync_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_BoxdynDartDebugTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Nothing():
        sse_encode_i_32(5, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_sync_array_5(
      EnumOpaqueTwinSyncArray5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_enum_opaque_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_normal(
      EnumSimpleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_rust_async(
      EnumSimpleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_sync(
      EnumSimpleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_discriminant_twin_normal(
      EnumWithDiscriminantTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_discriminant_twin_rust_async(
      EnumWithDiscriminantTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_discriminant_twin_sync(
      EnumWithDiscriminantTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_good_and_opaque_twin_normal(
      EnumWithGoodAndOpaqueTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithGoodAndOpaqueTwinNormal_Good(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case EnumWithGoodAndOpaqueTwinNormal_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_good_and_opaque_twin_rust_async(
      EnumWithGoodAndOpaqueTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithGoodAndOpaqueTwinRustAsync_Good(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case EnumWithGoodAndOpaqueTwinRustAsync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_good_and_opaque_twin_sync(
      EnumWithGoodAndOpaqueTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithGoodAndOpaqueTwinSync_Good(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case EnumWithGoodAndOpaqueTwinSync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemMixedTwinNormal_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinNormal_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemMixedTwinRustAsync_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinRustAsync_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemMixedTwinSync_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinSync_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemStructTwinNormal_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinNormal_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemStructTwinRustAsync_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinRustAsync_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemStructTwinSync_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinSync_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemTupleTwinNormal_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemTupleTwinRustAsync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case EnumWithItemTupleTwinSync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.payload, serializer);
  }

  @protected
  void sse_encode_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.payload, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_normal(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_normal(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_normal(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_rust_async(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_sync(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_sync(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_sync(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_f_64_array_16(F64Array16 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_f_64_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_feature_chrono_twin_normal(
      FeatureChronoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.utc, serializer);
    sse_encode_Chrono_Local(self.local, serializer);
    sse_encode_Chrono_Duration(self.duration, serializer);
    sse_encode_Chrono_Naive(self.naive, serializer);
  }

  @protected
  void sse_encode_feature_chrono_twin_rust_async(
      FeatureChronoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.utc, serializer);
    sse_encode_Chrono_Local(self.local, serializer);
    sse_encode_Chrono_Duration(self.duration, serializer);
    sse_encode_Chrono_Naive(self.naive, serializer);
  }

  @protected
  void sse_encode_feature_chrono_twin_sync(
      FeatureChronoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self.utc, serializer);
    sse_encode_Chrono_Local(self.local, serializer);
    sse_encode_Chrono_Duration(self.duration, serializer);
    sse_encode_Chrono_Naive(self.naive, serializer);
  }

  @protected
  void sse_encode_feature_uuid_twin_normal(
      FeatureUuidTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.one, serializer);
  }

  @protected
  void sse_encode_feature_uuid_twin_rust_async(
      FeatureUuidTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.one, serializer);
  }

  @protected
  void sse_encode_feature_uuid_twin_sync(
      FeatureUuidTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.one, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_hash_map_value(HashMapValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.inner, serializer);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_32_array_2(I32Array2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_isize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case KitchenSinkTwinNormal_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinNormal_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinNormal_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_normal(field1, serializer);
      case KitchenSinkTwinNormal_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinNormal_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinNormal_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_normal(field0, serializer);
    }
  }

  @protected
  void sse_encode_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case KitchenSinkTwinRustAsync_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinRustAsync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinRustAsync_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_rust_async(field1, serializer);
      case KitchenSinkTwinRustAsync_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinRustAsync_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinRustAsync_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_rust_async(field0, serializer);
    }
  }

  @protected
  void sse_encode_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case KitchenSinkTwinSync_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinSync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinSync_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_sync(field1, serializer);
      case KitchenSinkTwinSync_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinSync_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinSync_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_sync(field0, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          List<NonCloneSimpleTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          List<NonCloneSimpleTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          List<NonCloneSimpleTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_Chrono_Duration(
      List<Duration> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Chrono_Duration(item, serializer);
    }
  }

  @protected
  void sse_encode_list_Chrono_Local(
      List<DateTime> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Chrono_Local(item, serializer);
    }
  }

  @protected
  void sse_encode_list_Chrono_Naive(
      List<DateTime> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Chrono_Naive(item, serializer);
    }
  }

  @protected
  void sse_encode_list_DartOpaque(List<Object> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_DartOpaque(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_HideDataTwinNormal(
      List<HideDataTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_HideDataTwinNormal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_HideDataTwinRustAsync(
      List<HideDataTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_HideDataTwinRustAsync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_HideDataTwinSync(
      List<HideDataTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_HideDataTwinSync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_StreamSink_i_32_Sse(
      List<RustStreamSink<int>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_StreamSink_i_32_Sse(item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_Uuid(List<UuidValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Uuid(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_env_var(
      List<ApplicationEnvVar> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_env_var(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_mode(
      List<ApplicationMode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_mode(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_settings(
      List<ApplicationSettings> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_settings(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_normal(
      List<AttributeTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_sync(
      List<AttributeTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_normal(
      List<BasicGeneralEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_rust_async(
      List<BasicGeneralEnumTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_sync(
      List<BasicGeneralEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_normal(
      List<BasicPrimitiveEnumTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_rust_async(
      List<BasicPrimitiveEnumTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_sync(
      List<BasicPrimitiveEnumTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_normal(
      List<BasicStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_rust_async(
      List<BasicStructTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_sync(
      List<BasicStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bool(List<bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_normal(
      List<ElementTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_rust_async(
      List<ElementTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_sync(
      List<ElementTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_normal(
      List<EnumOpaqueTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_rust_async(
      List<EnumOpaqueTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_sync(
      List<EnumOpaqueTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_enum(List<MyEnum> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_enum(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_size(List<MySize> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_size(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_normal(
      List<MyTreeNodeTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_rust_async(
      List<MyTreeNodeTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_sync(
      List<MyTreeNodeTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_nested_raw_string_mirrored(
      List<NestedRawStringMirrored> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_nested_raw_string_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_of_nested_raw_string_mirrored(
      ListOfNestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_nested_raw_string_mirrored(self.raw, serializer);
  }

  @protected
  void sse_encode_list_opt_String(
      List<String?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_i_32(
      List<int?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
      List<WeekdaysTwinNormal?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_sync(
      List<WeekdaysTwinSync?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_list_prim_i_32_strict(
      List<Int32List?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_list_prim_i_32_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_normal(
      List<PointTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_rust_async(
      List<PointTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_sync(
      List<PointTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_32_loose(
      List<double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(
        self is Float32List ? self : Float32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_f_32_strict(
      Float32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  @protected
  void sse_encode_list_prim_f_64_loose(
      List<double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(
        self is Float64List ? self : Float64List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_i_16_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt16List(self is Int16List ? self : Int16List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_16_strict(
      Int16List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt16List(self);
  }

  @protected
  void sse_encode_list_prim_i_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt32List(self is Int32List ? self : Int32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_32_strict(
      Int32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(self);
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_i_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt8List(self is Int8List ? self : Int8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_8_strict(
      Int8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt8List(self);
  }

  @protected
  void sse_encode_list_prim_u_16_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint16List(self is Uint16List ? self : Uint16List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_16_strict(
      Uint16List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint16List(self);
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_raw_string_enum_mirrored(
      List<RawStringEnumMirrored> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_raw_string_enum_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_raw_string_mirrored(
      List<RawStringMirrored> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_raw_string_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_normal(
      List<(int, BasicGeneralEnumTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_rust_async(
      List<(int, BasicGeneralEnumTwinRustAsync)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_rust_async(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_sync(
      List<(int, BasicGeneralEnumTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_normal(
      List<(int, BasicPrimitiveEnumTwinNormal)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_rust_async(
      List<(int, BasicPrimitiveEnumTwinRustAsync)> self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_rust_async(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_sync(
      List<(int, BasicPrimitiveEnumTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_normal(
      List<(int, BasicStructTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_rust_async(
      List<(int, BasicStructTwinRustAsync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_sync(
      List<(int, BasicStructTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_bool(
      List<(int, bool)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_f_32(
      List<(int, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_f_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_f_64(
      List<(int, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_f_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_16(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_16(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_32(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_64(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_8(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_isize(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_isize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_list_prim_u_8_strict(
      List<(int, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_string(
      List<(int, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_16(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_16(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_32(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_64(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_8(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_usize(
      List<(int, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_usize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_normal(
      List<(String, EnumSimpleTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_rust_async(
      List<(String, EnumSimpleTwinRustAsync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_sync(
      List<(String, EnumSimpleTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_hash_map_value(
      List<(String, HashMapValue)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_hash_map_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_i_32(
      List<(String, int)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_normal(
      List<(String, KitchenSinkTwinNormal)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_rust_async(
      List<(String, KitchenSinkTwinRustAsync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_sync(
      List<(String, KitchenSinkTwinSync)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_list_prim_u_8_strict(
      List<(String, Uint8List)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_my_size(
      List<(String, MySize)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_my_size(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_8_application_mode(
      List<(int, ApplicationMode)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_8_application_mode(item, serializer);
    }
  }

  @protected
  void sse_encode_list_simple_struct_twin_normal(
      List<SimpleStructTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_simple_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_simple_struct_twin_rust_async(
      List<SimpleStructTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_simple_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_simple_struct_twin_sync(
      List<SimpleStructTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_simple_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_normal(
      List<SumWithTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_rust_async(
      List<SumWithTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_sync(
      List<SumWithTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_normal(
      List<TestIdTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_rust_async(
      List<TestIdTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_sync(
      List<TestIdTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_normal(
      List<WeekdaysTwinNormal> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_sync(
      List<WeekdaysTwinSync> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_log_2_twin_normal(
      Log2TwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_2_twin_rust_async(
      Log2TwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_2_twin_sync(Log2TwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_twin_normal(
      LogTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_log_twin_rust_async(
      LogTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.key, serializer);
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_macro_struct(MacroStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.data, serializer);
  }

  @protected
  void sse_encode_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MeasureTwinNormal_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_normal(field0, serializer);
      case MeasureTwinNormal_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_normal(field0, serializer);
    }
  }

  @protected
  void sse_encode_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MeasureTwinRustAsync_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_rust_async(field0, serializer);
      case MeasureTwinRustAsync_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_rust_async(field0, serializer);
    }
  }

  @protected
  void sse_encode_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MeasureTwinSync_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_sync(field0, serializer);
      case MeasureTwinSync_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_sync(field0, serializer);
    }
  }

  @protected
  void sse_encode_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_normal(
      MirrorStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_rust_async(
      MirrorStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_sync(
      MirrorStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_normal(
      MoreThanJustOneRawStringStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_rust_async(
      MoreThanJustOneRawStringStructTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_sync(
      MoreThanJustOneRawStringStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_my_callable_twin_normal(
      MyCallableTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_my_callable_twin_rust_async(
      MyCallableTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_my_callable_twin_sync(
      MyCallableTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_my_enum(MyEnum self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_normal(self.treeNode, serializer);
    sse_encode_weekdays_twin_normal(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_rust_async(self.treeNode, serializer);
    sse_encode_weekdays_twin_rust_async(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_my_tree_node_twin_sync(self.treeNode, serializer);
    sse_encode_weekdays_twin_sync(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_size(MySize self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.width, serializer);
    sse_encode_i_32(self.height, serializer);
  }

  @protected
  void sse_encode_my_stream_entry_twin_normal(
      MyStreamEntryTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hello, serializer);
  }

  @protected
  void sse_encode_my_stream_entry_twin_rust_async(
      MyStreamEntryTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hello, serializer);
  }

  @protected
  void sse_encode_my_struct(MyStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.content, serializer);
  }

  @protected
  void sse_encode_my_struct_containing_stream_sink_twin_normal(
      MyStructContainingStreamSinkTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_StreamSink_i_32_Sse(self.b, serializer);
  }

  @protected
  void sse_encode_my_struct_containing_stream_sink_twin_rust_async(
      MyStructContainingStreamSinkTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_StreamSink_i_32_Sse(self.b, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_normal(self.children, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_rust_async(self.children, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_sync(self.children, serializer);
  }

  @protected
  void sse_encode_nested_raw_string_mirrored(
      NestedRawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_raw_string_mirrored(self.raw, serializer);
  }

  @protected
  void sse_encode_new_simple_struct(
      NewSimpleStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_box_weekdays_twin_normal(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_box_weekdays_twin_rust_async(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_note_twin_sync(NoteTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_box_weekdays_twin_sync(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_numbers(Numbers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_old_simple_struct(
      OldSimpleStruct self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinNormal(self.first, serializer);
    sse_encode_RustOpaque_HideDataTwinNormal(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinRustAsync(self.first, serializer);
    sse_encode_RustOpaque_HideDataTwinRustAsync(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_HideDataTwinSync(self.first, serializer);
    sse_encode_RustOpaque_HideDataTwinSync(self.second, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Duration(
      Duration? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Duration(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Naive(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Naive(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
      DateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_DartOpaque(
      Object? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_DartOpaque(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
      HideDataAnotherTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataAnotherTwinNormal(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinNormal(
      HideDataTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataTwinNormal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinRustAsync(
      HideDataTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataTwinRustAsync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_HideDataTwinSync(
      HideDataTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_HideDataTwinSync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_application_env(
      ApplicationEnv? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_application_env(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_application_mode(
      ApplicationMode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_application_mode(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_sync(
      AttributeTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_normal(
      BasicStructTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_sync(
      BasicStructTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_normal(
      ElementTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_rust_async(
      ElementTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_sync(
      ElementTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_isize(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_isize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_normal(
      MeasureTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_sync(
      MeasureTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_record_string_i_32(
      (String, int)? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_string_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_normal(
      List<AttributeTwinNormal>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_sync(
      List<AttributeTwinSync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_normal(
      List<ElementTwinNormal>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_rust_async(
      List<ElementTwinRustAsync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_sync(
      List<ElementTwinSync>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_32_strict(
      Float32List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_32_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_64_strict(
      Float64List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_64_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_i_32_strict(
      Int32List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_i_32_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_i_8_strict(
      Int8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_i_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
        self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
        self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_sync(self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_point_twin_normal(
      PointTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_normal_array_2(
      PointTwinNormalArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_point_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_point_twin_rust_async(
      PointTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_rust_async_array_2(
      PointTwinRustAsyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_point_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_point_twin_sync(
      PointTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_sync_array_2(
      PointTwinSyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_point_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_raw_string_enum_mirrored(
      RawStringEnumMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RawStringEnumMirrored_Raw(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_raw_string_mirrored(field0, serializer);
      case RawStringEnumMirrored_Nested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_nested_raw_string_mirrored(field0, serializer);
      case RawStringEnumMirrored_ListOfNested(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_list_of_nested_raw_string_mirrored(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_normal(
      RawStringItemStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_rust_async(
      RawStringItemStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_sync(
      RawStringItemStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_mirrored(
      RawStringMirrored self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_record_application_settings_raw_string_enum_mirrored(
      (ApplicationSettings, RawStringEnumMirrored) self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_application_settings(self.$1, serializer);
    sse_encode_raw_string_enum_mirrored(self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_normal_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_normal(
          (OpaqueOneTwinNormal, OpaqueTwoTwinNormal) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinNormal(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinNormal(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_rust_async_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_rust_async(
          (OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinRustAsync(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinRustAsync(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_one_twin_sync_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_opaque_two_twin_sync(
          (OpaqueOneTwinSync, OpaqueTwoTwinSync) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueOneTwinSync(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOpaqueTwoTwinSync(
        self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_normal(
      (int, BasicGeneralEnumTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_rust_async(
      (int, BasicGeneralEnumTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_sync(
      (int, BasicGeneralEnumTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_normal(
      (int, BasicPrimitiveEnumTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_rust_async(
      (int, BasicPrimitiveEnumTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_sync(
      (int, BasicPrimitiveEnumTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_normal(
      (int, BasicStructTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_rust_async(
      (int, BasicStructTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_sync(
      (int, BasicStructTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_bool((int, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_bool(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_f_32(
      (int, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_f_64(
      (int, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_16((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_16(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_64((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_8((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_8(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_isize((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_isize(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_list_prim_u_8_strict(
      (int, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_string(
      (int, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_16((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_16(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_64((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_8((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_8(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_usize((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_usize(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_normal(
      (String, EnumSimpleTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_rust_async(
      (String, EnumSimpleTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_sync(
      (String, EnumSimpleTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_hash_map_value(
      (String, HashMapValue) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_hash_map_value(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_normal(
      (String, KitchenSinkTwinNormal) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_rust_async(
      (String, KitchenSinkTwinRustAsync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_sync(
      (String, KitchenSinkTwinSync) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_list_prim_u_8_strict(
      (String, Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_my_size(
      (String, MySize) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_my_size(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_8_application_mode(
      (int, ApplicationMode) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.$1, serializer);
    sse_encode_application_mode(self.$2, serializer);
  }

  @protected
  void sse_encode_sequences(Sequences self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_32_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_simple_enum_twin_normal(
      SimpleEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimpleEnumTwinNormal_First():
        sse_encode_i_32(0, serializer);
      case SimpleEnumTwinNormal_Second(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_simple_enum_twin_rust_async(
      SimpleEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimpleEnumTwinRustAsync_First():
        sse_encode_i_32(0, serializer);
      case SimpleEnumTwinRustAsync_Second(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_simple_enum_twin_sync(
      SimpleEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SimpleEnumTwinSync_First():
        sse_encode_i_32(0, serializer);
      case SimpleEnumTwinSync_Second(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_simple_primitive_enum_twin_normal(
      SimplePrimitiveEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_simple_primitive_enum_twin_rust_async(
      SimplePrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_simple_primitive_enum_twin_sync(
      SimplePrimitiveEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_simple_struct_for_borrow_twin_normal(
      SimpleStructForBorrowTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_for_borrow_twin_rust_async(
      SimpleStructForBorrowTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_for_borrow_twin_sync(
      SimpleStructForBorrowTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_twin_normal(
      SimpleStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_twin_rust_async(
      SimpleStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_struct_twin_sync(
      SimpleStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_simple_translatable_external_struct_with_method(
      SimpleTranslatableExternalStructWithMethod self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SpeedTwinNormal_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinNormal_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SpeedTwinRustAsync_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinRustAsync_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SpeedTwinSync_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinSync_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_static_only_twin_normal(
      StaticOnlyTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_static_only_twin_rust_async(
      StaticOnlyTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_static_only_twin_sync(
      StaticOnlyTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.one, serializer);
  }

  @protected
  void sse_encode_struct_in_lower_level(
      StructInLowerLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_struct_in_upper_level(self.inner, serializer);
  }

  @protected
  void sse_encode_struct_in_upper_level(
      StructInUpperLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.upper, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_normal(self.abc1, serializer);
    sse_encode_abc_twin_normal(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_rust_async(self.abc1, serializer);
    sse_encode_abc_twin_rust_async(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_abc_twin_sync(self.abc1, serializer);
    sse_encode_abc_twin_sync(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_explicit_auto_opaque_field_twin_normal(
      StructWithExplicitAutoOpaqueFieldTwinNormal self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self.autoOpaque, serializer);
    sse_encode_i_32(self.normal, serializer);
  }

  @protected
  void sse_encode_struct_with_explicit_auto_opaque_field_twin_rust_async(
      StructWithExplicitAutoOpaqueFieldTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self.autoOpaque, serializer);
    sse_encode_i_32(self.normal, serializer);
  }

  @protected
  void sse_encode_struct_with_explicit_auto_opaque_field_twin_sync(
      StructWithExplicitAutoOpaqueFieldTwinSync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self.autoOpaque, serializer);
    sse_encode_i_32(self.normal, serializer);
  }

  @protected
  void sse_encode_struct_with_good_and_opaque_field_twin_normal(
      StructWithGoodAndOpaqueFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.good, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self.opaque, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinNormal(
        self.optionOpaque, serializer);
  }

  @protected
  void sse_encode_struct_with_good_and_opaque_field_twin_rust_async(
      StructWithGoodAndOpaqueFieldTwinRustAsync self,
      SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.good, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self.opaque, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinRustAsync(
        self.optionOpaque, serializer);
  }

  @protected
  void sse_encode_struct_with_good_and_opaque_field_twin_sync(
      StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.good, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self.opaque, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNonCloneSimpleTwinSync(
        self.optionOpaque, serializer);
  }

  @protected
  void sse_encode_struct_with_hash_map(
      StructWithHashMap self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_hash_map_value(self.map, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_normal_array_3(
      SumWithTwinNormalArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_sum_with_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_rust_async_array_3(
      SumWithTwinRustAsyncArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_sum_with_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_sync_array_3(
      SumWithTwinSyncArray3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_sum_with_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_chrono_twin_normal(
      TestChronoTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Chrono_Utc(self.dt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.dt2, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(self.du, serializer);
  }

  @protected
  void sse_encode_test_chrono_twin_rust_async(
      TestChronoTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Chrono_Utc(self.dt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.dt2, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(self.du, serializer);
  }

  @protected
  void sse_encode_test_chrono_twin_sync(
      TestChronoTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_Chrono_Utc(self.dt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Naive(self.dt2, serializer);
    sse_encode_opt_box_autoadd_Chrono_Duration(self.du, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal_array_2(
      TestIdTwinNormalArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal_array_4(
      TestIdTwinNormalArray4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async_array_2(
      TestIdTwinRustAsyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async_array_4(
      TestIdTwinRustAsyncArray4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync_array_2(
      TestIdTwinSyncArray2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync_array_4(
      TestIdTwinSyncArray4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_test_id_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_model_twin_normal(
      TestModelTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_test_model_twin_rust_async(
      TestModelTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_test_model_twin_sync(
      TestModelTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_translatable_struct_with_dart_code_twin_normal(
      TranslatableStructWithDartCodeTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_1600(U8Array1600 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_2(U8Array2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_5(U8Array5 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_8(U8Array8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_normal(
      VecOfPrimitivePackTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_rust_async(
      VecOfPrimitivePackTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_sync(
      VecOfPrimitivePackTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}
