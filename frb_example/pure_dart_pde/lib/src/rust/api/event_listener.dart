// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.35.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'event_listener.freezed.dart';

Future<Stream<EventTwinNormal>> registerEventListenerTwinNormal(
        {dynamic hint}) =>
    RustLib.instance.api
        .crateApiEventListenerRegisterEventListenerTwinNormal(hint: hint);

Future<void> closeEventListenerTwinNormal({dynamic hint}) =>
    RustLib.instance.api
        .crateApiEventListenerCloseEventListenerTwinNormal(hint: hint);

Future<void> createEventTwinNormal(
        {required String address, required String payload, dynamic hint}) =>
    RustLib.instance.api.crateApiEventListenerCreateEventTwinNormal(
        address: address, payload: payload, hint: hint);

void createEventSyncTwinNormal(
        {required String address, required String payload, dynamic hint}) =>
    RustLib.instance.api.crateApiEventListenerCreateEventSyncTwinNormal(
        address: address, payload: payload, hint: hint);

@freezed
class EventTwinNormal with _$EventTwinNormal {
  const EventTwinNormal._();
  const factory EventTwinNormal({
    required String address,
    required String payload,
  }) = _EventTwinNormal;
  Future<String> asStringTwinNormal({dynamic hint}) => RustLib.instance.api
      .crateApiEventListenerEventTwinNormalAsStringTwinNormal(
          that: this, hint: hint);
}
