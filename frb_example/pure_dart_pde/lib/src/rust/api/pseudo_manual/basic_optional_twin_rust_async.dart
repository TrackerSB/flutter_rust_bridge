// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic_twin_rust_async.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleBasicOptionalTypeI8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI8TwinRustAsync(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI16TwinRustAsync(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI32TwinRustAsync(
            arg: arg, hint: hint);

Future<PlatformInt64?> exampleBasicOptionalTypeI64TwinRustAsync(
        {PlatformInt64? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI64TwinRustAsync(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeI128TwinRustAsync(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeI128TwinRustAsync(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU8TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU8TwinRustAsync(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU16TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU16TwinRustAsync(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU32TwinRustAsync(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU32TwinRustAsync(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeU64TwinRustAsync(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU64TwinRustAsync(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeU128TwinRustAsync(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeU128TwinRustAsync(
            arg: arg, hint: hint);

Future<PlatformInt64?> exampleBasicOptionalTypeIsizeTwinRustAsync(
        {PlatformInt64? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeIsizeTwinRustAsync(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeUsizeTwinRustAsync(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeUsizeTwinRustAsync(
            arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF32TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF32TwinRustAsync(
            arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF64TwinRustAsync(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeF64TwinRustAsync(
            arg: arg, hint: hint);

Future<bool?> exampleBasicOptionalTypeBoolTwinRustAsync(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBoolTwinRustAsync(
            arg: arg, hint: hint);

Future<String?> exampleBasicOptionalTypeStringTwinRustAsync(
        {String? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeStringTwinRustAsync(
            arg: arg, hint: hint);

Future<Uint8List?> exampleBasicOptionalTypeBytesTwinRustAsync(
        {Uint8List? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBytesTwinRustAsync(
            arg: arg, hint: hint);

Future<BasicPrimitiveEnumTwinRustAsync?>
    exampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
            {BasicPrimitiveEnumTwinRustAsync? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
                arg: arg, hint: hint);

Future<BasicGeneralEnumTwinRustAsync?>
    exampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
            {BasicGeneralEnumTwinRustAsync? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
                arg: arg, hint: hint);

Future<BasicStructTwinRustAsync?>
    exampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
            {BasicStructTwinRustAsync? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinRustAsyncExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
                arg: arg, hint: hint);
