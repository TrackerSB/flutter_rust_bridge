// NOTE: This file is mimicking how a human developer writes tests,
// and is auto-generated from `basic_test.dart` by frb_internal
// Please do not modify manually, but modify the origin and re-run frb_internal generator

// NOTE: This file is mimicking how a human developer writes tests,
// and is auto-generated by frb_internal
// Please do not modify manually, but modify the origin and re-run frb_internal generator

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:frb_example_pure_dart_pde/src/rust/api/pseudo_manual/basic_twin_sync.dart';
import 'package:frb_example_pure_dart_pde/src/rust/frb_generated.dart';
import 'package:test/test.dart';
import '../../test_utils.dart';

Future<void> main({bool skipRustLibInit = false}) async {
  if (!skipRustLibInit) await RustLib.init();

  group('basic', () {
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeI8TwinSync, <int>[0, -128, 127, 79, -79]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeI16TwinSync, <int>[0, -32768, 32767, 12345, -12345]);
    addTestsIdentityWithExpectFunctionCall(exampleBasicTypeI32TwinSync,
        <int>[0, -2147483648, 2147483647, 1234567890, -1234567890]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeI64TwinSync, <PlatformInt64>[
      PlatformInt64.parse("0"),
      PlatformInt64.parse("-9007199254740992"),
      PlatformInt64.parse("9007199254740992"),
      PlatformInt64.parse("-9223372036854775808"),
      PlatformInt64.parse("9223372036854775807"),
      PlatformInt64.parse("1234567890123456789"),
      PlatformInt64.parse("-1234567890123456789")
    ]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeI128TwinSync, <BigInt>[
      BigInt.parse("0"),
      BigInt.parse("-9007199254740992"),
      BigInt.parse("9007199254740992"),
      BigInt.parse("-9223372036854775808"),
      BigInt.parse("9223372036854775807"),
      BigInt.parse("-170141183460469231731687303715884105728"),
      BigInt.parse("170141183460469231731687303715884105727")
    ]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeU8TwinSync, <int>[0, 255, 123]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeU16TwinSync, <int>[0, 65535, 12345]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeU32TwinSync, <int>[0, 4294967295, 2468013579]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeU64TwinSync, <BigInt>[
      BigInt.parse("0"),
      BigInt.parse("9007199254740992"),
      BigInt.parse("9223372036854775807"),
      BigInt.parse("9223372036854775808"),
      BigInt.parse("18446744073709551615"),
      BigInt.parse("12345678912345678913")
    ]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeU128TwinSync, <BigInt>[
      BigInt.parse("0"),
      BigInt.parse("9007199254740992"),
      BigInt.parse("9223372036854775807"),
      BigInt.parse("9223372036854775808"),
      BigInt.parse("18446744073709551615"),
      BigInt.parse("340282366920938463463374607431768211455")
    ]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeIsizeTwinSync, <PlatformInt64>[
      PlatformInt64.parse("0"),
      PlatformInt64.parse("-2147483648"),
      PlatformInt64.parse("2147483647"),
      PlatformInt64.parse("-1234234567"),
      PlatformInt64.parse("1234234567"),
      if (!kIsWeb) PlatformInt64.parse("-9007199254740992"),
      if (!kIsWeb) PlatformInt64.parse("9007199254740992"),
      if (!kIsWeb) PlatformInt64.parse("-9223372036854775808"),
      if (!kIsWeb) PlatformInt64.parse("9223372036854775807")
    ]);
    addTestsIdentityWithExpectFunctionCall(
        exampleBasicTypeUsizeTwinSync, <BigInt>[
      BigInt.parse("0"),
      BigInt.parse("4294967295"),
      BigInt.parse("1234234567"),
      if (!kIsWeb) BigInt.parse("9007199254740992"),
      if (!kIsWeb) BigInt.parse("9223372036854775807"),
      if (!kIsWeb) BigInt.parse("18446744073709551615"),
      if (!kIsWeb) BigInt.parse("12345678912345678913")
    ]);
    addTestsIdentityFunctionCall(
        exampleBasicTypeF32TwinSync, <double>[0, -42.5, 123456]);
    addTestsIdentityFunctionCall(
        exampleBasicTypeF64TwinSync, <double>[0, -42.5, 123456]);
    addTestsIdentityFunctionCall(
        exampleBasicTypeBoolTwinSync, <bool>[false, true]);
    addTestsIdentityFunctionCall(
        exampleBasicTypeStringTwinSync, <String>["", "hello", "ðŸ˜‚"]);
    addTestsIdentityFunctionCall(exampleBasicTypeBytesTwinSync, <Uint8List>[
      Uint8List.fromList([]),
      Uint8List.fromList([255, 0]),
      Uint8List.fromList([10, 20, 30, 40])
    ]);
    addTestsIdentityFunctionCall(
        exampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync,
        <BasicPrimitiveEnumTwinSync>[
          BasicPrimitiveEnumTwinSync.apple,
          BasicPrimitiveEnumTwinSync.orange
        ]);
    addTestsIdentityFunctionCall(
        exampleBasicTypeBasicGeneralEnumTwinSyncTwinSync,
        <BasicGeneralEnumTwinSync>[
          BasicGeneralEnumTwinSync.apple(field: "one"),
          BasicGeneralEnumTwinSync.orange()
        ]);
    addTestsIdentityFunctionCall(
        exampleBasicTypeBasicStructTwinSyncTwinSync, <BasicStructTwinSync>[
      BasicStructTwinSync(apple: null, orange: null),
      BasicStructTwinSync(apple: "one", orange: 42)
    ]);
  });
}
