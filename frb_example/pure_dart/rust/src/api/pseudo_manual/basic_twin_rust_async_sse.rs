// NOTE: This file is mimicking how a human developer writes tests,
// and is auto-generated from `basic.rs` by frb_internal
// Please do not modify manually, but modify the origin and re-run frb_internal generator

// NOTE: This file is mimicking how a human developer writes tests,
// and is auto-generated by frb_internal
// Please do not modify manually, but modify the origin and re-run frb_internal generator

pub enum BasicPrimitiveEnumTwinRustAsyncSse {
    Apple,
    Orange,
}

pub enum BasicGeneralEnumTwinRustAsyncSse {
    Apple { field: String },
    Orange,
}

pub struct BasicStructTwinRustAsyncSse {
    pub apple: Option<String>,
    pub orange: Option<i32>,
}
#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_i8_twin_rust_async_sse(arg: i8, expect: String) -> i8 {
    assert_eq!(arg, expect.parse::<i8>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_i16_twin_rust_async_sse(arg: i16, expect: String) -> i16 {
    assert_eq!(arg, expect.parse::<i16>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_i32_twin_rust_async_sse(arg: i32, expect: String) -> i32 {
    assert_eq!(arg, expect.parse::<i32>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_i64_twin_rust_async_sse(arg: i64, expect: String) -> i64 {
    assert_eq!(arg, expect.parse::<i64>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_i128_twin_rust_async_sse(arg: i128, expect: String) -> i128 {
    assert_eq!(arg, expect.parse::<i128>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_u8_twin_rust_async_sse(arg: u8, expect: String) -> u8 {
    assert_eq!(arg, expect.parse::<u8>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_u16_twin_rust_async_sse(arg: u16, expect: String) -> u16 {
    assert_eq!(arg, expect.parse::<u16>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_u32_twin_rust_async_sse(arg: u32, expect: String) -> u32 {
    assert_eq!(arg, expect.parse::<u32>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_u64_twin_rust_async_sse(arg: u64, expect: String) -> u64 {
    assert_eq!(arg, expect.parse::<u64>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_u128_twin_rust_async_sse(arg: u128, expect: String) -> u128 {
    assert_eq!(arg, expect.parse::<u128>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_isize_twin_rust_async_sse(arg: isize, expect: String) -> isize {
    assert_eq!(arg, expect.parse::<isize>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_usize_twin_rust_async_sse(arg: usize, expect: String) -> usize {
    assert_eq!(arg, expect.parse::<usize>().unwrap());
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_f32_twin_rust_async_sse(arg: f32) -> f32 {
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_f64_twin_rust_async_sse(arg: f64) -> f64 {
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_bool_twin_rust_async_sse(arg: bool) -> bool {
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_string_twin_rust_async_sse(arg: String) -> String {
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_bytes_twin_rust_async_sse(arg: Vec<u8>) -> Vec<u8> {
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(
    arg: BasicPrimitiveEnumTwinRustAsyncSse,
) -> BasicPrimitiveEnumTwinRustAsyncSse {
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(
    arg: BasicGeneralEnumTwinRustAsyncSse,
) -> BasicGeneralEnumTwinRustAsyncSse {
    arg
}

#[flutter_rust_bridge::frb(serialize)]
pub async fn example_basic_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(
    arg: BasicStructTwinRustAsyncSse,
) -> BasicStructTwinRustAsyncSse {
    arg
}
