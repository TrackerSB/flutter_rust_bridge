// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'basic_twin_sync.freezed.dart';

int exampleBasicTypeI8TwinSync(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeI8TwinSync(
            arg: arg, expect: expect, hint: hint);

int exampleBasicTypeI16TwinSync(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeI16TwinSync(
            arg: arg, expect: expect, hint: hint);

int exampleBasicTypeI32TwinSync(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeI32TwinSync(
            arg: arg, expect: expect, hint: hint);

PlatformInt64 exampleBasicTypeI64TwinSync(
        {required PlatformInt64 arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeI64TwinSync(
            arg: arg, expect: expect, hint: hint);

BigInt exampleBasicTypeI128TwinSync(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeI128TwinSync(
            arg: arg, expect: expect, hint: hint);

int exampleBasicTypeU8TwinSync(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeU8TwinSync(
            arg: arg, expect: expect, hint: hint);

int exampleBasicTypeU16TwinSync(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeU16TwinSync(
            arg: arg, expect: expect, hint: hint);

int exampleBasicTypeU32TwinSync(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeU32TwinSync(
            arg: arg, expect: expect, hint: hint);

BigInt exampleBasicTypeU64TwinSync(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeU64TwinSync(
            arg: arg, expect: expect, hint: hint);

BigInt exampleBasicTypeU128TwinSync(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeU128TwinSync(
            arg: arg, expect: expect, hint: hint);

PlatformInt64 exampleBasicTypeIsizeTwinSync(
        {required PlatformInt64 arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeIsizeTwinSync(
            arg: arg, expect: expect, hint: hint);

BigInt exampleBasicTypeUsizeTwinSync(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeUsizeTwinSync(
            arg: arg, expect: expect, hint: hint);

double exampleBasicTypeF32TwinSync({required double arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeF32TwinSync(
            arg: arg, hint: hint);

double exampleBasicTypeF64TwinSync({required double arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeF64TwinSync(
            arg: arg, hint: hint);

bool exampleBasicTypeBoolTwinSync({required bool arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeBoolTwinSync(
            arg: arg, hint: hint);

String exampleBasicTypeStringTwinSync({required String arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeStringTwinSync(
            arg: arg, hint: hint);

Uint8List exampleBasicTypeBytesTwinSync(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeBytesTwinSync(
            arg: arg, hint: hint);

BasicPrimitiveEnumTwinSync exampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
        {required BasicPrimitiveEnumTwinSync arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
            arg: arg, hint: hint);

BasicGeneralEnumTwinSync exampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
        {required BasicGeneralEnumTwinSync arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
            arg: arg, hint: hint);

BasicStructTwinSync exampleBasicTypeBasicStructTwinSyncTwinSync(
        {required BasicStructTwinSync arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinSyncExampleBasicTypeBasicStructTwinSyncTwinSync(
            arg: arg, hint: hint);

@freezed
sealed class BasicGeneralEnumTwinSync with _$BasicGeneralEnumTwinSync {
  const BasicGeneralEnumTwinSync._();

  const factory BasicGeneralEnumTwinSync.apple({
    required String field,
  }) = BasicGeneralEnumTwinSync_Apple;
  const factory BasicGeneralEnumTwinSync.orange() =
      BasicGeneralEnumTwinSync_Orange;
}

enum BasicPrimitiveEnumTwinSync {
  apple,
  orange,
  ;
}

class BasicStructTwinSync {
  final String? apple;
  final int? orange;

  const BasicStructTwinSync({
    this.apple,
    this.orange,
  });

  @override
  int get hashCode => apple.hashCode ^ orange.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BasicStructTwinSync &&
          runtimeType == other.runtimeType &&
          apple == other.apple &&
          orange == other.orange;
}
