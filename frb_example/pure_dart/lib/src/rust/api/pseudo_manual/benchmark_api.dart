// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.35.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> benchmarkVoidTwinNormal({dynamic hint}) => RustLib.instance.api
    .crateApiPseudoManualBenchmarkApiBenchmarkVoidTwinNormal(hint: hint);

Future<int> benchmarkInputBytesTwinNormal(
        {required List<int> bytes, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkInputBytesTwinNormal(
            bytes: bytes, hint: hint);

Future<Uint8List> benchmarkOutputBytesTwinNormal(
        {required int size, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkOutputBytesTwinNormal(
            size: size, hint: hint);

Future<void> benchmarkBinaryTreeInputTwinNormal(
        {required BenchmarkBinaryTreeTwinNormal tree, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputTwinNormal(
            tree: tree, hint: hint);

Future<BenchmarkBinaryTreeTwinNormal> benchmarkBinaryTreeOutputTwinNormal(
        {required int depth, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputTwinNormal(
            depth: depth, hint: hint);

Future<void> benchmarkBinaryTreeInputProtobufTwinNormal(
        {required List<int> raw, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputProtobufTwinNormal(
            raw: raw, hint: hint);

Future<Uint8List> benchmarkBinaryTreeOutputProtobufTwinNormal(
        {required int depth, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputProtobufTwinNormal(
            depth: depth, hint: hint);

Future<void> benchmarkBinaryTreeInputJsonTwinNormal(
        {required String raw, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeInputJsonTwinNormal(
            raw: raw, hint: hint);

Future<String> benchmarkBinaryTreeOutputJsonTwinNormal(
        {required int depth, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBinaryTreeOutputJsonTwinNormal(
            depth: depth, hint: hint);

Future<void> benchmarkBlobInputTwinNormal(
        {required BenchmarkBlobTwinNormal blob, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBlobInputTwinNormal(
            blob: blob, hint: hint);

Future<BenchmarkBlobTwinNormal> benchmarkBlobOutputTwinNormal(
        {required int size, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputTwinNormal(
            size: size, hint: hint);

Future<void> benchmarkBlobInputProtobufTwinNormal(
        {required List<int> raw, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBlobInputProtobufTwinNormal(
            raw: raw, hint: hint);

Future<Uint8List> benchmarkBlobOutputProtobufTwinNormal(
        {required int size, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputProtobufTwinNormal(
            size: size, hint: hint);

Future<void> benchmarkBlobInputJsonTwinNormal(
        {required String raw, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBlobInputJsonTwinNormal(
            raw: raw, hint: hint);

Future<String> benchmarkBlobOutputJsonTwinNormal(
        {required int size, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBenchmarkApiBenchmarkBlobOutputJsonTwinNormal(
            size: size, hint: hint);

class BenchmarkBinaryTreeTwinNormal {
  final String name;
  final BenchmarkBinaryTreeTwinNormal? left;
  final BenchmarkBinaryTreeTwinNormal? right;

  const BenchmarkBinaryTreeTwinNormal({
    required this.name,
    this.left,
    this.right,
  });

  @override
  int get hashCode => name.hashCode ^ left.hashCode ^ right.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BenchmarkBinaryTreeTwinNormal &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          left == other.left &&
          right == other.right;
}

class BenchmarkBlobTwinNormal {
  final Uint8List first;
  final Uint8List second;
  final Uint8List third;

  const BenchmarkBlobTwinNormal({
    required this.first,
    required this.second,
    required this.third,
  });

  @override
  int get hashCode => first.hashCode ^ second.hashCode ^ third.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BenchmarkBlobTwinNormal &&
          runtimeType == other.runtimeType &&
          first == other.first &&
          second == other.second &&
          third == other.third;
}
