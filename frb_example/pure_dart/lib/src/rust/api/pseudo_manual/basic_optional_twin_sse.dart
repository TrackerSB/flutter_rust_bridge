// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.35.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic_twin_sse.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleBasicOptionalTypeI8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeI8TwinSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeI16TwinSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeI32TwinSse(
            arg: arg, hint: hint);

Future<PlatformInt64?> exampleBasicOptionalTypeI64TwinSse(
        {PlatformInt64? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeI64TwinSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeI128TwinSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeI128TwinSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU8TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeU8TwinSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU16TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeU16TwinSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU32TwinSse({int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeU32TwinSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeU64TwinSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeU64TwinSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeU128TwinSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeU128TwinSse(
            arg: arg, hint: hint);

Future<PlatformInt64?> exampleBasicOptionalTypeIsizeTwinSse(
        {PlatformInt64? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeIsizeTwinSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeUsizeTwinSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeUsizeTwinSse(
            arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF32TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeF32TwinSse(
            arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF64TwinSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeF64TwinSse(
            arg: arg, hint: hint);

Future<bool?> exampleBasicOptionalTypeBoolTwinSse({bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeBoolTwinSse(
            arg: arg, hint: hint);

Future<String?> exampleBasicOptionalTypeStringTwinSse(
        {String? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeStringTwinSse(
            arg: arg, hint: hint);

Future<Uint8List?> exampleBasicOptionalTypeBytesTwinSse(
        {Uint8List? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeBytesTwinSse(
            arg: arg, hint: hint);

Future<BasicPrimitiveEnumTwinSse?>
    exampleBasicOptionalTypeBasicPrimitiveEnumTwinSseTwinSse(
            {BasicPrimitiveEnumTwinSse? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeBasicPrimitiveEnumTwinSseTwinSse(
                arg: arg, hint: hint);

Future<BasicGeneralEnumTwinSse?>
    exampleBasicOptionalTypeBasicGeneralEnumTwinSseTwinSse(
            {BasicGeneralEnumTwinSse? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeBasicGeneralEnumTwinSseTwinSse(
                arg: arg, hint: hint);

Future<BasicStructTwinSse?> exampleBasicOptionalTypeBasicStructTwinSseTwinSse(
        {BasicStructTwinSse? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinSseExampleBasicOptionalTypeBasicStructTwinSseTwinSse(
            arg: arg, hint: hint);
