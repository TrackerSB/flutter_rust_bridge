// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic_twin_rust_async_sse.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<int?> exampleBasicOptionalTypeI8TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeI8TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI16TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeI16TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeI32TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeI32TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<PlatformInt64?> exampleBasicOptionalTypeI64TwinRustAsyncSse(
        {PlatformInt64? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeI64TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeI128TwinRustAsyncSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeI128TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU8TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeU8TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU16TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeU16TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<int?> exampleBasicOptionalTypeU32TwinRustAsyncSse(
        {int? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeU32TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeU64TwinRustAsyncSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeU64TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeU128TwinRustAsyncSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeU128TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<PlatformInt64?> exampleBasicOptionalTypeIsizeTwinRustAsyncSse(
        {PlatformInt64? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeIsizeTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<BigInt?> exampleBasicOptionalTypeUsizeTwinRustAsyncSse(
        {BigInt? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeUsizeTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF32TwinRustAsyncSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeF32TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<double?> exampleBasicOptionalTypeF64TwinRustAsyncSse(
        {double? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeF64TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<bool?> exampleBasicOptionalTypeBoolTwinRustAsyncSse(
        {bool? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeBoolTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<String?> exampleBasicOptionalTypeStringTwinRustAsyncSse(
        {String? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeStringTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<Uint8List?> exampleBasicOptionalTypeBytesTwinRustAsyncSse(
        {Uint8List? arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeBytesTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<BasicPrimitiveEnumTwinRustAsyncSse?>
    exampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncSseTwinRustAsyncSse(
            {BasicPrimitiveEnumTwinRustAsyncSse? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);

Future<BasicGeneralEnumTwinRustAsyncSse?>
    exampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncSseTwinRustAsyncSse(
            {BasicGeneralEnumTwinRustAsyncSse? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);

Future<BasicStructTwinRustAsyncSse?>
    exampleBasicOptionalTypeBasicStructTwinRustAsyncSseTwinRustAsyncSse(
            {BasicStructTwinRustAsyncSse? arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicOptionalTwinRustAsyncSseExampleBasicOptionalTypeBasicStructTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);
