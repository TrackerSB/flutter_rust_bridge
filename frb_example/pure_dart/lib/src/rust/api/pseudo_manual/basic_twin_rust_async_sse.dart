// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'basic_twin_rust_async_sse.freezed.dart';

Future<int> exampleBasicTypeI8TwinRustAsyncSse(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeI8TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<int> exampleBasicTypeI16TwinRustAsyncSse(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeI16TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<int> exampleBasicTypeI32TwinRustAsyncSse(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeI32TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<PlatformInt64> exampleBasicTypeI64TwinRustAsyncSse(
        {required PlatformInt64 arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeI64TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<BigInt> exampleBasicTypeI128TwinRustAsyncSse(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeI128TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<int> exampleBasicTypeU8TwinRustAsyncSse(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeU8TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<int> exampleBasicTypeU16TwinRustAsyncSse(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeU16TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<int> exampleBasicTypeU32TwinRustAsyncSse(
        {required int arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeU32TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<BigInt> exampleBasicTypeU64TwinRustAsyncSse(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeU64TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<BigInt> exampleBasicTypeU128TwinRustAsyncSse(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeU128TwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<PlatformInt64> exampleBasicTypeIsizeTwinRustAsyncSse(
        {required PlatformInt64 arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeIsizeTwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<BigInt> exampleBasicTypeUsizeTwinRustAsyncSse(
        {required BigInt arg, required String expect, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeUsizeTwinRustAsyncSse(
            arg: arg, expect: expect, hint: hint);

Future<double> exampleBasicTypeF32TwinRustAsyncSse(
        {required double arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeF32TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<double> exampleBasicTypeF64TwinRustAsyncSse(
        {required double arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeF64TwinRustAsyncSse(
            arg: arg, hint: hint);

Future<bool> exampleBasicTypeBoolTwinRustAsyncSse(
        {required bool arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeBoolTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<String> exampleBasicTypeStringTwinRustAsyncSse(
        {required String arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeStringTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<Uint8List> exampleBasicTypeBytesTwinRustAsyncSse(
        {required List<int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeBytesTwinRustAsyncSse(
            arg: arg, hint: hint);

Future<BasicPrimitiveEnumTwinRustAsyncSse>
    exampleBasicTypeBasicPrimitiveEnumTwinRustAsyncSseTwinRustAsyncSse(
            {required BasicPrimitiveEnumTwinRustAsyncSse arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);

Future<BasicGeneralEnumTwinRustAsyncSse>
    exampleBasicTypeBasicGeneralEnumTwinRustAsyncSseTwinRustAsyncSse(
            {required BasicGeneralEnumTwinRustAsyncSse arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeBasicGeneralEnumTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);

Future<BasicStructTwinRustAsyncSse>
    exampleBasicTypeBasicStructTwinRustAsyncSseTwinRustAsyncSse(
            {required BasicStructTwinRustAsyncSse arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicTwinRustAsyncSseExampleBasicTypeBasicStructTwinRustAsyncSseTwinRustAsyncSse(
                arg: arg, hint: hint);

@freezed
sealed class BasicGeneralEnumTwinRustAsyncSse
    with _$BasicGeneralEnumTwinRustAsyncSse {
  const BasicGeneralEnumTwinRustAsyncSse._();

  const factory BasicGeneralEnumTwinRustAsyncSse.apple({
    required String field,
  }) = BasicGeneralEnumTwinRustAsyncSse_Apple;
  const factory BasicGeneralEnumTwinRustAsyncSse.orange() =
      BasicGeneralEnumTwinRustAsyncSse_Orange;
}

enum BasicPrimitiveEnumTwinRustAsyncSse {
  apple,
  orange,
  ;
}

class BasicStructTwinRustAsyncSse {
  final String? apple;
  final int? orange;

  const BasicStructTwinRustAsyncSse({
    this.apple,
    this.orange,
  });

  @override
  int get hashCode => apple.hashCode ^ orange.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BasicStructTwinRustAsyncSse &&
          runtimeType == other.runtimeType &&
          apple == other.apple &&
          orange == other.orange;
}
