// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.35.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'rust_auto_opaque_twin_moi.dart';
part 'rust_auto_opaque_twin_rust_async_sse_moi.freezed.dart';

// The type `HelloOneStructTwinRustAsyncSseMoi` is not used by any `pub` functions, thus it is ignored.
// The type `HelloTwoEnumTwinRustAsyncSseMoi` is not used by any `pub` functions, thus it is ignored.

Future<void> rustAutoOpaqueArgOwnTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueArgOwnTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueArgBorrowTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        required int adder,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueArgMutBorrowTwinRustAsyncSseMoi(
            arg: arg, expect: expect, adder: adder, hint: hint);

Future<
    NonCloneSimpleTwinRustAsyncSseMoi> rustAutoOpaqueReturnOwnTwinRustAsyncSseMoi(
        {required int initial, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueReturnOwnTwinRustAsyncSseMoi(
            initial: initial, hint: hint);

Future<NonCloneSimpleTwinRustAsyncSseMoi>
    rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSseMoi(
            {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncSseMoi(
                arg: arg, hint: hint);

Future<void> rustAutoOpaqueTwoArgsTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi a,
        required NonCloneSimpleTwinRustAsyncSseMoi b,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueTwoArgsTwinRustAsyncSseMoi(
            a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi a,
        required String b,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncSseMoi(
            a: a, b: b, hint: hint);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinRustAsyncSseMoi(
        {required BoxMyTraitTwinRustAsyncSseMoi arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaquePlusSignArgTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<BoxMyTraitTwinRustAsyncSseMoi>
    rustAutoOpaquePlusSignReturnTwinRustAsyncSseMoi({dynamic hint}) => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaquePlusSignReturnTwinRustAsyncSseMoi(
            hint: hint);

Future<void> rustAutoOpaqueCallableArgTwinRustAsyncSseMoi(
        {required BoxFnStringString arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueCallableArgTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsyncSseMoi(
        {dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueCallableReturnTwinRustAsyncSseMoi(
            hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSseMoi(
        {required BoxHelloTraitTwinRustAsyncSseMoi arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSseMoi(
        {required BoxHelloTraitTwinRustAsyncSseMoi arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSseMoi(
        {required BoxHelloTraitTwinRustAsyncSseMoi arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<BoxHelloTraitTwinRustAsyncSseMoi>
    rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncSseMoi(
                hint: hint);

Future<BoxHelloTraitTwinRustAsyncSseMoi>
    rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncSseMoi(
                hint: hint);

Future<
    void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSseMoi(
        {required StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi arg,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSseMoi(
            {dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncSseMoi(
                hint: hint);

Future<void> rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSseMoi(
        {required EnumWithGoodAndOpaqueTwinRustAsyncSseMoi arg,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<EnumWithGoodAndOpaqueTwinRustAsyncSseMoi>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSseMoi(
            {dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinRustAsyncSseMoi(
                hint: hint);

Future<EnumWithGoodAndOpaqueTwinRustAsyncSseMoi>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSseMoi(
            {dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinRustAsyncSseMoi(
                hint: hint);

Future<void> rustAutoOpaqueDummyTwinRustAsyncSseMoi(
        {required StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi
            a,
        required EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi b,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueDummyTwinRustAsyncSseMoi(
            a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueEnumArgBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleEnumTwinRustAsyncSseMoi arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueEnumArgBorrowTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<NonCloneSimpleEnumTwinRustAsyncSseMoi>
    rustAutoOpaqueEnumReturnOwnTwinRustAsyncSseMoi({dynamic hint}) => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueEnumReturnOwnTwinRustAsyncSseMoi(
            hint: hint);

Stream<NonCloneSimpleTwinRustAsyncSseMoi>
    rustAutoOpaqueStreamSinkTwinRustAsyncSseMoi({dynamic hint}) => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueStreamSinkTwinRustAsyncSseMoi(
            hint: hint);

Future<void> rustAutoOpaqueArgVecOwnTwinRustAsyncSseMoi(
        {required List<NonCloneSimpleTwinRustAsyncSseMoi> arg,
        required List<int> expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueArgVecOwnTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<List<NonCloneSimpleTwinRustAsyncSseMoi>>
    rustAutoOpaqueReturnVecOwnTwinRustAsyncSseMoi({dynamic hint}) => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueReturnVecOwnTwinRustAsyncSseMoi(
            hint: hint);

Future<void> rustAutoOpaqueExplicitArgTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueExplicitArgTwinRustAsyncSseMoi(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueExplicitStructTwinRustAsyncSseMoi(
        {required StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi arg,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueExplicitStructTwinRustAsyncSseMoi(
            arg: arg, hint: hint);

Future<StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi>
    rustAutoOpaqueExplicitReturnStructTwinRustAsyncSseMoi({dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueExplicitReturnStructTwinRustAsyncSseMoi(
                hint: hint);

Future<NonCloneSimpleTwinRustAsyncSseMoi>
    rustAutoOpaqueExplicitReturnTwinRustAsyncSseMoi(
            {required int initial, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueExplicitReturnTwinRustAsyncSseMoi(
                initial: initial, hint: hint);

Future<int> rustAutoOpaqueSleepTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi apple,
        required NonCloneSimpleTwinRustAsyncSseMoi orange,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueSleepTwinRustAsyncSseMoi(
            apple: apple, orange: orange, hint: hint);

Future<
    (
      OpaqueOneTwinRustAsyncSseMoi,
      OpaqueTwoTwinRustAsyncSseMoi
    )> rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSseMoi(
        {dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncSseMoi(
            hint: hint);

Future<OpaqueTwoTwinRustAsyncSseMoi>
    rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSseMoi({dynamic hint}) => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncSseMoi(
            hint: hint);

Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi borrow,
        required NonCloneSimpleTwinRustAsyncSseMoi mutBorrow,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncSseMoi(
            borrow: borrow, mutBorrow: mutBorrow, hint: hint);

Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsyncSseMoi(
        {required NonCloneSimpleTwinRustAsyncSseMoi a,
        required NonCloneSimpleTwinRustAsyncSseMoi b,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiRustAutoOpaqueBorrowAndBorrowTwinRustAsyncSseMoi(
            a: a, b: b, hint: hint);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn HelloTraitTwinRustAsyncSseMoi >>>
@sealed
class BoxHelloTraitTwinRustAsyncSseMoi extends RustOpaque {
  BoxHelloTraitTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxHelloTraitTwinRustAsyncSseMoi.sseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn MyTraitTwinRustAsyncSseMoi + Send + Sync >>>
@sealed
class BoxMyTraitTwinRustAsyncSseMoi extends RustOpaque {
  BoxMyTraitTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxMyTraitTwinRustAsyncSseMoi.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BoxMyTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi>>
@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi extends RustOpaque {
  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi.dcoDecode(
      List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi.sseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleEnumTwinRustAsyncSseMoi>>
@sealed
class NonCloneSimpleEnumTwinRustAsyncSseMoi extends RustOpaque {
  NonCloneSimpleEnumTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleEnumTwinRustAsyncSseMoi.sseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleEnumTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleTwinRustAsyncSseMoi>>
@sealed
class NonCloneSimpleTwinRustAsyncSseMoi extends RustOpaque {
  NonCloneSimpleTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleTwinRustAsyncSseMoi.sseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncSseMoiPtr,
  );

  Future<void> instanceMethodArgBorrowTwinRustAsyncSseMoi({dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiInstanceMethodArgBorrowTwinRustAsyncSseMoi(
              that: this, hint: hint);

  Future<void> instanceMethodArgMutBorrowTwinRustAsyncSseMoi({dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiInstanceMethodArgMutBorrowTwinRustAsyncSseMoi(
              that: this, hint: hint);

  Future<void> instanceMethodArgOwnTwinRustAsyncSseMoi({dynamic hint}) => RustLib
      .instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiInstanceMethodArgOwnTwinRustAsyncSseMoi(
          that: this, hint: hint);

  Future<int> get instanceMethodGetterTwinRustAsyncSseMoi =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiInstanceMethodGetterTwinRustAsyncSseMoi(
        that: this,
      );

  Future<NonCloneSimpleTwinRustAsyncSseMoi>
      instanceMethodReturnOwnTwinRustAsyncSseMoi({dynamic hint}) => RustLib
          .instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiInstanceMethodReturnOwnTwinRustAsyncSseMoi(
              that: this, hint: hint);

  /// named constructor
  static Future<NonCloneSimpleTwinRustAsyncSseMoi>
      newCustomNameTwinRustAsyncSseMoi({dynamic hint}) => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiNewCustomNameTwinRustAsyncSseMoi(
              hint: hint);

  /// unnamed constructor
  static Future<NonCloneSimpleTwinRustAsyncSseMoi> newTwinRustAsyncSseMoi(
          {dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiNewTwinRustAsyncSseMoi(
              hint: hint);

  /// constructor with Result
  static Future<NonCloneSimpleTwinRustAsyncSseMoi>
      newWithResultTwinRustAsyncSseMoi({dynamic hint}) => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiNewWithResultTwinRustAsyncSseMoi(
              hint: hint);

  static Future<void> staticMethodArgBorrowTwinRustAsyncSseMoi(
          {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiStaticMethodArgBorrowTwinRustAsyncSseMoi(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgMutBorrowTwinRustAsyncSseMoi(
          {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiStaticMethodArgMutBorrowTwinRustAsyncSseMoi(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgOwnTwinRustAsyncSseMoi(
          {required NonCloneSimpleTwinRustAsyncSseMoi arg, dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiStaticMethodArgOwnTwinRustAsyncSseMoi(
              arg: arg, hint: hint);

  static Future<NonCloneSimpleTwinRustAsyncSseMoi>
      staticMethodReturnOwnTwinRustAsyncSseMoi({dynamic hint}) => RustLib
          .instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinRustAsyncSseMoiNonCloneSimpleTwinRustAsyncSseMoiStaticMethodReturnOwnTwinRustAsyncSseMoi(
              hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueOneTwinRustAsyncSseMoi>>
@sealed
class OpaqueOneTwinRustAsyncSseMoi extends RustOpaque {
  OpaqueOneTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueOneTwinRustAsyncSseMoi.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueTwoTwinRustAsyncSseMoi>>
@sealed
class OpaqueTwoTwinRustAsyncSseMoi extends RustOpaque {
  OpaqueTwoTwinRustAsyncSseMoi.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueTwoTwinRustAsyncSseMoi.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_OpaqueTwoTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncSseMoiPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi>>
@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi
    extends RustOpaque {
  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi.dcoDecode(
      List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi.sseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoi,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinRustAsyncSseMoiPtr,
  );
}

@freezed
sealed class EnumWithGoodAndOpaqueTwinRustAsyncSseMoi
    with _$EnumWithGoodAndOpaqueTwinRustAsyncSseMoi {
  const EnumWithGoodAndOpaqueTwinRustAsyncSseMoi._();

  const factory EnumWithGoodAndOpaqueTwinRustAsyncSseMoi.good(
    String field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSseMoi_Good;
  const factory EnumWithGoodAndOpaqueTwinRustAsyncSseMoi.opaque(
    NonCloneSimpleTwinRustAsyncSseMoi field0,
  ) = EnumWithGoodAndOpaqueTwinRustAsyncSseMoi_Opaque;
}

class StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {
  final NonCloneSimpleTwinRustAsyncSseMoi autoOpaque;
  final int normal;

  const StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi({
    required this.autoOpaque,
    required this.normal,
  });

  @override
  int get hashCode => autoOpaque.hashCode ^ normal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi &&
          runtimeType == other.runtimeType &&
          autoOpaque == other.autoOpaque &&
          normal == other.normal;
}

class StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi {
  final String good;
  final NonCloneSimpleTwinRustAsyncSseMoi opaque;
  final NonCloneSimpleTwinRustAsyncSseMoi? optionOpaque;

  const StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi({
    required this.good,
    required this.opaque,
    this.optionOpaque,
  });

  @override
  int get hashCode => good.hashCode ^ opaque.hashCode ^ optionOpaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi &&
          runtimeType == other.runtimeType &&
          good == other.good &&
          opaque == other.opaque &&
          optionOpaque == other.optionOpaque;
}
