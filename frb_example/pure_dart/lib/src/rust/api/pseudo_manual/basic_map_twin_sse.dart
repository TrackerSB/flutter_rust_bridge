// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'basic_twin_sse.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<Map<int, int>> exampleBasicMapTypeI8TwinSse(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeI8TwinSse(
            arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeI16TwinSse(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeI16TwinSse(
            arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeI32TwinSse(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeI32TwinSse(
            arg: arg, hint: hint);

Future<Map<int, PlatformInt64>> exampleBasicMapTypeI64TwinSse(
        {required Map<int, PlatformInt64> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeI64TwinSse(
            arg: arg, hint: hint);

Future<Map<int, BigInt>> exampleBasicMapTypeI128TwinSse(
        {required Map<int, BigInt> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeI128TwinSse(
            arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeU8TwinSse(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeU8TwinSse(
            arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeU16TwinSse(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeU16TwinSse(
            arg: arg, hint: hint);

Future<Map<int, int>> exampleBasicMapTypeU32TwinSse(
        {required Map<int, int> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeU32TwinSse(
            arg: arg, hint: hint);

Future<Map<int, BigInt>> exampleBasicMapTypeU64TwinSse(
        {required Map<int, BigInt> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeU64TwinSse(
            arg: arg, hint: hint);

Future<Map<int, BigInt>> exampleBasicMapTypeU128TwinSse(
        {required Map<int, BigInt> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeU128TwinSse(
            arg: arg, hint: hint);

Future<Map<int, PlatformInt64>> exampleBasicMapTypeIsizeTwinSse(
        {required Map<int, PlatformInt64> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeIsizeTwinSse(
            arg: arg, hint: hint);

Future<Map<int, BigInt>> exampleBasicMapTypeUsizeTwinSse(
        {required Map<int, BigInt> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeUsizeTwinSse(
            arg: arg, hint: hint);

Future<Map<int, double>> exampleBasicMapTypeF32TwinSse(
        {required Map<int, double> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeF32TwinSse(
            arg: arg, hint: hint);

Future<Map<int, double>> exampleBasicMapTypeF64TwinSse(
        {required Map<int, double> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeF64TwinSse(
            arg: arg, hint: hint);

Future<Map<int, bool>> exampleBasicMapTypeBoolTwinSse(
        {required Map<int, bool> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeBoolTwinSse(
            arg: arg, hint: hint);

Future<Map<int, String>> exampleBasicMapTypeStringTwinSse(
        {required Map<int, String> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeStringTwinSse(
            arg: arg, hint: hint);

Future<Map<int, Uint8List>> exampleBasicMapTypeBytesTwinSse(
        {required Map<int, Uint8List> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeBytesTwinSse(
            arg: arg, hint: hint);

Future<Map<int, BasicPrimitiveEnumTwinSse>>
    exampleBasicMapTypeBasicPrimitiveEnumTwinSseTwinSse(
            {required Map<int, BasicPrimitiveEnumTwinSse> arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeBasicPrimitiveEnumTwinSseTwinSse(
                arg: arg, hint: hint);

Future<Map<int, BasicGeneralEnumTwinSse>>
    exampleBasicMapTypeBasicGeneralEnumTwinSseTwinSse(
            {required Map<int, BasicGeneralEnumTwinSse> arg, dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeBasicGeneralEnumTwinSseTwinSse(
                arg: arg, hint: hint);

Future<
    Map<int, BasicStructTwinSse>> exampleBasicMapTypeBasicStructTwinSseTwinSse(
        {required Map<int, BasicStructTwinSse> arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualBasicMapTwinSseExampleBasicMapTypeBasicStructTwinSseTwinSse(
            arg: arg, hint: hint);
