// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'rust_auto_opaque_twin_moi.dart';
part 'rust_auto_opaque_twin_sse.freezed.dart';

// The type `HelloOneStructTwinSse` is not used by any `pub` functions, thus it is ignored.
// The type `HelloTwoEnumTwinSse` is not used by any `pub` functions, thus it is ignored.

Future<void> rustAutoOpaqueArgOwnTwinSse(
        {required NonCloneSimpleTwinSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueArgOwnTwinSse(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgBorrowTwinSse(
        {required NonCloneSimpleTwinSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueArgBorrowTwinSse(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueArgMutBorrowTwinSse(
        {required NonCloneSimpleTwinSse arg,
        required int expect,
        required int adder,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueArgMutBorrowTwinSse(
            arg: arg, expect: expect, adder: adder, hint: hint);

Future<NonCloneSimpleTwinSse> rustAutoOpaqueReturnOwnTwinSse(
        {required int initial, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueReturnOwnTwinSse(
            initial: initial, hint: hint);

Future<NonCloneSimpleTwinSse> rustAutoOpaqueArgOwnAndReturnOwnTwinSse(
        {required NonCloneSimpleTwinSse arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueArgOwnAndReturnOwnTwinSse(
            arg: arg, hint: hint);

Future<void> rustAutoOpaqueTwoArgsTwinSse(
        {required NonCloneSimpleTwinSse a,
        required NonCloneSimpleTwinSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueTwoArgsTwinSse(
            a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinSse(
        {required NonCloneSimpleTwinSse a, required String b, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueNormalAndOpaqueArgTwinSse(
            a: a, b: b, hint: hint);

/// "+" inside the type signature
Future<void> rustAutoOpaquePlusSignArgTwinSse(
        {required BoxMyTraitTwinSse arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaquePlusSignArgTwinSse(
            arg: arg, hint: hint);

Future<BoxMyTraitTwinSse> rustAutoOpaquePlusSignReturnTwinSse({dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaquePlusSignReturnTwinSse(
            hint: hint);

Future<void> rustAutoOpaqueCallableArgTwinSse(
        {required BoxFnStringString arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueCallableArgTwinSse(
            arg: arg, hint: hint);

Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinSse({dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueCallableReturnTwinSse(
            hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgOwnTwinSse(
        {required BoxHelloTraitTwinSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueTraitObjectArgOwnTwinSse(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinSse(
        {required BoxHelloTraitTwinSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueTraitObjectArgBorrowTwinSse(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinSse(
        {required BoxHelloTraitTwinSse arg,
        required String expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueTraitObjectArgMutBorrowTwinSse(
            arg: arg, expect: expect, hint: hint);

Future<BoxHelloTraitTwinSse> rustAutoOpaqueTraitObjectReturnOwnOneTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueTraitObjectReturnOwnOneTwinSse(
            hint: hint);

Future<BoxHelloTraitTwinSse> rustAutoOpaqueTraitObjectReturnOwnTwoTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueTraitObjectReturnOwnTwoTwinSse(
            hint: hint);

Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSse(
        {required StructWithGoodAndOpaqueFieldTwinSse arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSse(
            arg: arg, hint: hint);

Future<StructWithGoodAndOpaqueFieldTwinSse>
    rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSse(
            {dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSse(
                hint: hint);

Future<void> rustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSse(
        {required EnumWithGoodAndOpaqueTwinSse arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueEnumWithGoodAndOpaqueArgOwnTwinSse(
            arg: arg, hint: hint);

Future<EnumWithGoodAndOpaqueTwinSse>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSse({dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnGoodTwinSse(
                hint: hint);

Future<EnumWithGoodAndOpaqueTwinSse>
    rustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSse({dynamic hint}) =>
        RustLib.instance.api
            .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueEnumWithGoodAndOpaqueReturnOwnOpaqueTwinSse(
                hint: hint);

Future<void> rustAutoOpaqueDummyTwinSse(
        {required StructWithGoodAndOpaqueFieldWithoutOptionTwinSse a,
        required EnumWithGoodAndOpaqueWithoutOptionTwinSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueDummyTwinSse(
            a: a, b: b, hint: hint);

Future<void> rustAutoOpaqueEnumArgBorrowTwinSse(
        {required NonCloneSimpleEnumTwinSse arg, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueEnumArgBorrowTwinSse(
            arg: arg, hint: hint);

Future<NonCloneSimpleEnumTwinSse> rustAutoOpaqueEnumReturnOwnTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueEnumReturnOwnTwinSse(
            hint: hint);

Stream<NonCloneSimpleTwinSse> rustAutoOpaqueStreamSinkTwinSse({dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueStreamSinkTwinSse(
            hint: hint);

Future<void> rustAutoOpaqueArgVecOwnTwinSse(
        {required List<NonCloneSimpleTwinSse> arg,
        required List<int> expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueArgVecOwnTwinSse(
            arg: arg, expect: expect, hint: hint);

Future<List<NonCloneSimpleTwinSse>> rustAutoOpaqueReturnVecOwnTwinSse(
        {dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueReturnVecOwnTwinSse(
            hint: hint);

Future<void> rustAutoOpaqueExplicitArgTwinSse(
        {required NonCloneSimpleTwinSse arg,
        required int expect,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueExplicitArgTwinSse(
            arg: arg, expect: expect, hint: hint);

Future<void> rustAutoOpaqueExplicitStructTwinSse(
        {required StructWithExplicitAutoOpaqueFieldTwinSse arg,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueExplicitStructTwinSse(
            arg: arg, hint: hint);

Future<NonCloneSimpleTwinSse> rustAutoOpaqueExplicitReturnTwinSse(
        {required int initial, dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueExplicitReturnTwinSse(
            initial: initial, hint: hint);

Future<int> rustAutoOpaqueSleepTwinSse(
        {required NonCloneSimpleTwinSse apple,
        required NonCloneSimpleTwinSse orange,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueSleepTwinSse(
            apple: apple, orange: orange, hint: hint);

Future<(OpaqueOneTwinSse, OpaqueTwoTwinSse)>
    rustAutoOpaqueReturnOpaqueOneAndTwoTwinSse({dynamic hint}) => RustLib
        .instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueReturnOpaqueOneAndTwoTwinSse(
            hint: hint);

Future<OpaqueTwoTwinSse> rustAutoOpaqueReturnOpaqueTwoTwinSse({dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueReturnOpaqueTwoTwinSse(
            hint: hint);

Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinSse(
        {required NonCloneSimpleTwinSse borrow,
        required NonCloneSimpleTwinSse mutBorrow,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueBorrowAndMutBorrowTwinSse(
            borrow: borrow, mutBorrow: mutBorrow, hint: hint);

Future<int> rustAutoOpaqueBorrowAndBorrowTwinSse(
        {required NonCloneSimpleTwinSse a,
        required NonCloneSimpleTwinSse b,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiPseudoManualRustAutoOpaqueTwinSseRustAutoOpaqueBorrowAndBorrowTwinSse(
            a: a, b: b, hint: hint);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn HelloTraitTwinSse >>>
@sealed
class BoxHelloTraitTwinSse extends RustOpaque {
  BoxHelloTraitTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxHelloTraitTwinSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxHelloTraitTwinSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxHelloTraitTwinSse,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxHelloTraitTwinSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn MyTraitTwinSse + Send + Sync >>>
@sealed
class BoxMyTraitTwinSse extends RustOpaque {
  BoxMyTraitTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxMyTraitTwinSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxMyTraitTwinSse,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinSse,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxMyTraitTwinSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EnumWithGoodAndOpaqueWithoutOptionTwinSse>>
@sealed
class EnumWithGoodAndOpaqueWithoutOptionTwinSse extends RustOpaque {
  EnumWithGoodAndOpaqueWithoutOptionTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  EnumWithGoodAndOpaqueWithoutOptionTwinSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_EnumWithGoodAndOpaqueWithoutOptionTwinSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleEnumTwinSse>>
@sealed
class NonCloneSimpleEnumTwinSse extends RustOpaque {
  NonCloneSimpleEnumTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleEnumTwinSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NonCloneSimpleEnumTwinSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_NonCloneSimpleEnumTwinSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NonCloneSimpleTwinSse>>
@sealed
class NonCloneSimpleTwinSse extends RustOpaque {
  NonCloneSimpleTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  NonCloneSimpleTwinSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_NonCloneSimpleTwinSse,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneSimpleTwinSse,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_NonCloneSimpleTwinSsePtr,
  );

  Future<void> instanceMethodArgBorrowTwinSse({dynamic hint}) => RustLib
      .instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseInstanceMethodArgBorrowTwinSse(
          that: this, hint: hint);

  Future<void> instanceMethodArgMutBorrowTwinSse({dynamic hint}) => RustLib
      .instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseInstanceMethodArgMutBorrowTwinSse(
          that: this, hint: hint);

  Future<void> instanceMethodArgOwnTwinSse({dynamic hint}) => RustLib
      .instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseInstanceMethodArgOwnTwinSse(
          that: this, hint: hint);

  Future<int> get instanceMethodGetterTwinSse => RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseInstanceMethodGetterTwinSse(
        that: this,
      );

  Future<NonCloneSimpleTwinSse> instanceMethodReturnOwnTwinSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseInstanceMethodReturnOwnTwinSse(
              that: this, hint: hint);

  /// named constructor
  static Future<NonCloneSimpleTwinSse> newCustomNameTwinSse({dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseNewCustomNameTwinSse(
              hint: hint);

  /// unnamed constructor
  static Future<NonCloneSimpleTwinSse> newTwinSse({dynamic hint}) => RustLib
      .instance.api
      .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseNewTwinSse(
          hint: hint);

  /// constructor with Result
  static Future<NonCloneSimpleTwinSse> newWithResultTwinSse({dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseNewWithResultTwinSse(
              hint: hint);

  static Future<void> staticMethodArgBorrowTwinSse(
          {required NonCloneSimpleTwinSse arg, dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseStaticMethodArgBorrowTwinSse(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgMutBorrowTwinSse(
          {required NonCloneSimpleTwinSse arg, dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseStaticMethodArgMutBorrowTwinSse(
              arg: arg, hint: hint);

  static Future<void> staticMethodArgOwnTwinSse(
          {required NonCloneSimpleTwinSse arg, dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseStaticMethodArgOwnTwinSse(
              arg: arg, hint: hint);

  static Future<NonCloneSimpleTwinSse> staticMethodReturnOwnTwinSse(
          {dynamic hint}) =>
      RustLib.instance.api
          .crateApiPseudoManualRustAutoOpaqueTwinSseNonCloneSimpleTwinSseStaticMethodReturnOwnTwinSse(
              hint: hint);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueOneTwinSse>>
@sealed
class OpaqueOneTwinSse extends RustOpaque {
  OpaqueOneTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueOneTwinSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OpaqueOneTwinSse,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinSse,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueOneTwinSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueTwoTwinSse>>
@sealed
class OpaqueTwoTwinSse extends RustOpaque {
  OpaqueTwoTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  OpaqueTwoTwinSse.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OpaqueTwoTwinSse,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinSse,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueTwoTwinSsePtr,
  );
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructWithGoodAndOpaqueFieldWithoutOptionTwinSse>>
@sealed
class StructWithGoodAndOpaqueFieldWithoutOptionTwinSse extends RustOpaque {
  StructWithGoodAndOpaqueFieldWithoutOptionTwinSse.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  StructWithGoodAndOpaqueFieldWithoutOptionTwinSse.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSse,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSse,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldWithoutOptionTwinSsePtr,
  );
}

@freezed
sealed class EnumWithGoodAndOpaqueTwinSse with _$EnumWithGoodAndOpaqueTwinSse {
  const EnumWithGoodAndOpaqueTwinSse._();

  const factory EnumWithGoodAndOpaqueTwinSse.good(
    String field0,
  ) = EnumWithGoodAndOpaqueTwinSse_Good;
  const factory EnumWithGoodAndOpaqueTwinSse.opaque(
    NonCloneSimpleTwinSse field0,
  ) = EnumWithGoodAndOpaqueTwinSse_Opaque;
}

class StructWithExplicitAutoOpaqueFieldTwinSse {
  final NonCloneSimpleTwinSse autoOpaque;
  final int normal;

  const StructWithExplicitAutoOpaqueFieldTwinSse({
    required this.autoOpaque,
    required this.normal,
  });

  @override
  int get hashCode => autoOpaque.hashCode ^ normal.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithExplicitAutoOpaqueFieldTwinSse &&
          runtimeType == other.runtimeType &&
          autoOpaque == other.autoOpaque &&
          normal == other.normal;
}

class StructWithGoodAndOpaqueFieldTwinSse {
  final String good;
  final NonCloneSimpleTwinSse opaque;
  final NonCloneSimpleTwinSse? optionOpaque;

  const StructWithGoodAndOpaqueFieldTwinSse({
    required this.good,
    required this.opaque,
    this.optionOpaque,
  });

  @override
  int get hashCode => good.hashCode ^ opaque.hashCode ^ optionOpaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithGoodAndOpaqueFieldTwinSse &&
          runtimeType == other.runtimeType &&
          good == other.good &&
          opaque == other.opaque &&
          optionOpaque == other.optionOpaque;
}
